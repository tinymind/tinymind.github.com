<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | 浮生猎趣]]></title>
  <link href="http://blog.lessfun.com/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://blog.lessfun.com/"/>
  <updated>2017-08-17T20:31:17+08:00</updated>
  <id>http://blog.lessfun.com/</id>
  <author>
    <name><![CDATA[lslin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Swift语言在iOS客户端生成七牛的上传Token]]></title>
    <link href="http://blog.lessfun.com/blog/2015/12/29/swift-create-qiniu-upload-token/"/>
    <updated>2015-12-29T14:14:01+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/12/29/swift-create-qiniu-upload-token</id>
    <content type="html"><![CDATA[<p>七牛SDK官方不推荐由客户端生成Token，所以在SDK的源码以及Demo中都没有提供生成上传Token的接口与示例。但是有时候的确需要在客户端生成Token，因为个人用户哪里有那么多服务器啊……本文提供了Swift语言版本在iOS客户端生成七牛上传Token的示例代码。</p>

<!--more-->


<h2>Token 的生成算法</h2>

<p>详见 <a href="http://developer.qiniu.com/docs/v6/api/reference/security/upload-token.html">官方说明</a>。概述如下：</p>

<ol>
<li>构造<a href="http://developer.qiniu.com/docs/v6/api/reference/security/put-policy.html">上传策略</a>，转为 JSON 字符串，进行 <a href="http://developer.qiniu.com/docs/v6/api/overview/appendix.html#urlsafe-base64">URL安全的Base64编码</a>，得到 <code>encodedPutPolicy</code>。</li>
<li>使用 <code>SecretKey</code> 对上一步生成的 <code>encodedPutPolicy</code> 计算 <a href="http://en.wikipedia.org/wiki/Hash-based_message_authentication_code">HMAC-SHA1</a> 签名，进行URL安全的Base64编码，得到 <code>encodedSign</code>。</li>
<li>将 <code>AccessKey</code>、<code>encodedSign</code> 和 <code>encodedPutPolicy</code> 用<code>:</code>连接起来，得到Token</li>
</ol>


<h2>Swift 示例代码</h2>

<h3>修改 Podfile 文件添加七牛依赖库</h3>

<p>``` bash
source &lsquo;<a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git</a>&rsquo;
platform :ios, &lsquo;8.0&rsquo;
use_frameworks!</p>

<p>inhibit_all_warnings!</p>

<p>pod &lsquo;JSONKit-NoWarning&rsquo;, &lsquo;1.2&rsquo;
pod &lsquo;AFNetworking&rsquo;, &lsquo;2.5.0&rsquo;
pod &lsquo;Qiniu&rsquo;, &lsquo;~> 7.0&rsquo;
```</p>

<h3>在 .swift 文件上方，引入库，定义钥匙串</h3>

<p>``` objc
import Qiniu
import JSONKit_NoWarning</p>

<p>let kQiniuBucket = &ldquo;qiniubucket&rdquo;
let kQiniuAccessKey = &ldquo;xxxxxxxxxxxxxxxxxxxxxx&mdash;xxxxxxxxxxxxxxxx&rdquo;
let kQiniuSecretKey = &ldquo;xxxxxxxxxxxxxxxxxxxxxx&mdash;xxxxxxxxxxxxxxxx&rdquo;
```</p>

<h3>定义辅助方法</h3>

<p>``` objc</p>

<pre><code>func hmacsha1WithString(str: String, secretKey: String) -&gt; NSData {

    let cKey  = secretKey.cStringUsingEncoding(NSASCIIStringEncoding)
    let cData = str.cStringUsingEncoding(NSASCIIStringEncoding)

    var result = [CUnsignedChar](count: Int(CC_SHA1_DIGEST_LENGTH), repeatedValue: 0)
    CCHmac(CCHmacAlgorithm(kCCHmacAlgSHA1), cKey!, Int(strlen(cKey!)), cData!, Int(strlen(cData!)), &amp;result)
    let hmacData: NSData = NSData(bytes: result, length: (Int(CC_SHA1_DIGEST_LENGTH)))
    return hmacData
}
</code></pre>

<p>```</p>

<p>其中，<code>CCHmac</code> 使用的是 Objective C 的 <code>#import &lt;CommonCrypto/CommonCrypto.h&gt;</code>，在 Swift 中用需要自己添加桥接头文件。</p>

<h3>定义生成 Token 方法</h3>

<p>``` objc</p>

<pre><code>func createQiniuToken(fileName: String) -&gt; String {

    let oneHourLater = NSDate().timeIntervalSince1970 + 3600
    // 上传策略中，只有scope和deadline是必填的
    let scope = fileName.isEmpty ? kQiniuBucket : kQiniuBucket + ":" + fileName;
    let putPolicy: NSDictionary = ["scope": scope, "deadline": NSNumber(unsignedLongLong: UInt64(oneHourLater))]
    let encodedPutPolicy = QNUrlSafeBase64.encodeString(putPolicy.JSONString())
    let sign = self.hmacsha1WithString(encodedPutPolicy, secretKey: kQiniuSecretKey)
    let encodedSign = QNUrlSafeBase64.encodeData(sign)

    return kQiniuAccessKey + ":" + encodedSign + ":" + encodedPutPolicy
}
</code></pre>

<p>```</p>

<h3>上传示例</h3>

<p>``` objc</p>

<pre><code>func uploadWithName(fileName: String, content: String) {
    let dict: NSDictionary = ["content": content]
    // 如果覆盖已有的文件，则指定文件名。否则如果同名文件已存在，会上传失败
    let token = self.qiniuToken(self.replaceIfExists ? fileName : "")

    var uploader: QNUploadManager = QNUploadManager()
    uploader.putData(dict.JSONData(), key: fileName, token: token, complete: { (info: QNResponseInfo!, key: String!, resp: [NSObject : AnyObject]!) -&gt; Void in
            if info.ok {
                NSLog("Success")
            } else {
                NSLog("Error: " + info.error.description)
            }
        }, option: nil)
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
