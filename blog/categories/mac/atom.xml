<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | 浮生猎趣]]></title>
  <link href="http://blog.lessfun.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://blog.lessfun.com/"/>
  <updated>2017-08-16T14:11:58+08:00</updated>
  <id>http://blog.lessfun.com/</id>
  <author>
    <name><![CDATA[lslin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[查找XCode工程中没被使用的图片资源]]></title>
    <link href="http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project/"/>
    <updated>2015-09-02T13:27:29+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project</id>
    <content type="html"><![CDATA[<p><img src="https://github.com/tinymind/LSUnusedResources/raw/master/LSUnusedResourcesExample.gif" alt="LSUnusedResources" /></p>

<h2>1. 需求的引入</h2>

<p>一个项目开发得越久，添加的功能模块也就越多，相应地，也会慢慢引入大量图片等资源。但是，在移除一些不再使用的模块的时候，开发者往往会把该模块所对应的图片资源一起删除，因为源码和资源是分离的。长久以来，项目中就会存在大量没被使用的资源文件。</p>

<p>在某个时机，也就是需求完成得差不多，Bug 增加得不够多，Crash 上涨得不够快的时候，码农们终于有了一点闲暇时间，打算清理一下资源文件，减少 App 安装包的大小。这是一件体力活，方法无非是，一个一个地复制资源文件名，然后在 XCode 中全局查找该字符串，如果结果为 0，那么这个资源很可能就没有被使用。为什么说很可能？因为在代码中，有可能通过字符串拼接的方式使用了这个资源，而这种情况是没办法通过字符串匹配查找出来的。</p>

<p>道理我们都懂，但是，操作起来也实在是太繁琐了，码农们不可能会乐意这样干的。于是，我们需要这么一款工具：能够迅速找出工程中所有没被使用的资源文件。</p>

<!--more-->


<h2>2. 已有的方案</h2>

<p>果不其然，在我打算写这么一个工具的时候，在网上已经有了两种方案。</p>

<h3>2.1 方案1：<a href="http://stackoverflow.com/a/6113449/3737409">万能的脚本</a></h3>

<p>``` sh</p>

<h1>!/bin/sh</h1>

<p>PROJ=<code>find . -name '*.xib' -o -name '*.[mh]'</code></p>

<p>for png in <code>find . -name '*.png'</code>
do</p>

<pre><code>name=`basename $png`
if ! grep -qhs "$name" "$PROJ"; then
    echo "$png is not referenced"
fi
</code></pre>

<p>done
```</p>

<p><strong>缺点</strong>：不够智能，不够通用，速度太慢，结果不正确。</p>

<h3>2.2 方案2：<a href="http://jeffhodnett.github.io/Unused/">脚本界面化</a></h3>

<p><a href="http://jeffhodnett.github.io/Unused/">Unused</a> 对脚本的调用做了封装，通过界面可以配置一定的信息，然后比较清晰的输入结果。</p>

<p><strong>缺点</strong>：实际上，Unused 的内部还是调用了方案 1 的脚本，所以方案 1 的缺点也就是方案 2 的缺点。</p>

<h2>3. LSUnusedResources 做的改进</h2>

<h3>3.1 提高匹配速度</h3>

<p>LSUnusedResources 很大程度上受 Unused 的影响，比如界面、交互，以及部分代码。但是，本工具在核心代码上做了优化，使其在搜索的速度、结果的正确上都有了很大的提高。</p>

<p>核心步骤，简述如下：</p>

<ul>
<li>查找：选定的目录下的所有资源文件。这一步与上述方案1区别不大，都是调用 <code>find</code> 命令查找指定后缀名的文件。</li>
<li>匹配：与上述方案不同，我不是对每个资源文件名都做一次全文搜索匹配，因为加入项目的资源太多，这里会导致性能快速下降。而我只是针对源码、Xib、Storyboard 和 plist 等文件，先全文搜索其中可能是引用了资源的字符串，然后用资源名和字符串做匹配。</li>
</ul>


<h3>3.2 优化匹配结果</h3>

<p>Unused 会把大量实际上有使用的资源，当做未使用的资源输出。LSUnusedResources 则不会出现这样的问题，并且使得结果更加优化。</p>

<p>举例说明：<br/>
你在工程中添加了下面资源:</p>

<p>```</p>

<pre><code>icon_tag_0.png
icon_tag_1.png
icon_tag_2.png
icon_tag_3.png
</code></pre>

<p>```</p>

<p>然后用字符串拼接的方式在代码中引用:</p>

<p>``` objc</p>

<pre><code>NSInteger index = random() % 4;
UIImage *img = [UIImage imageNamed:[NSString stringWithFormat:@"icon_tag_%d", index]];
</code></pre>

<p>```</p>

<p><code>icon_tag_x.png</code> 是不应该被当做未使用的资源的，只是以一种比较隐晦的方式间接引用了，所以不应该出现在结果列表中。</p>

<h2>4. 使用方法</h2>

<ol>
<li>点击 <code>Browse..</code> 选择一个文件夹；</li>
<li>点击 <code>Search</code> 开始搜索；</li>
<li>等待片刻即可看到结果；</li>
<li>选中某些行，然后点击 <code>Delete</code> 可以直接删除资源。</li>
</ol>


<h2>5. 下载安装</h2>

<ul>
<li>下载: <a href="https://github.com/tinymind/LSUnusedResources/raw/master/Release/LSUnusedResources.app.zip">LSUnusedResources.app.zip</a></li>
<li>或者使用 XCode 编译运行<a href="https://github.com/tinymind/LSUnusedResources/">项目代码</a>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac系统上简便地启用Http Server]]></title>
    <link href="http://blog.lessfun.com/blog/2014/06/30/setup-a-simple-http-server-on-mac/"/>
    <updated>2014-06-30T15:27:28+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/06/30/setup-a-simple-http-server-on-mac</id>
    <content type="html"><![CDATA[<p>在本地调试Html等简单网页的时候，经常需要启动一个Web服务器，但又不想或不方便安装Apache或者IIS之类的软件，那么可以使用简单的方法：在Python或Php命令行下启用Http Server。</p>

<p>由于在Mac系统下，Python和Php都是默认安装好的，所以不需要额外的软件支持。具体方法如下：</p>

<!--more-->


<h4>方法一：不支持Php</h4>

<p>这一方法的前提是，Mac系统默认安装了Python，所以可以利用Python启用Http服务器。
步骤：
``` bash</p>

<pre><code>$cd /path/project/site
$python -m SimpleHTTPServer 8080
</code></pre>

<p>````</p>

<p>然后，在浏览器打开<a href="http://localhost:8080/index.html%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost:8080/index.html%E5%8D%B3%E5%8F%AF%E3%80%82</a></p>

<h4>方法二：支持Php</h4>

<p>注意，以上方法，仅适用于提供html等文件服务，不支持运行php脚本。</p>

<p>如果需要运行php，参考 StackOverFlow 和 官网。请先确保php版本是5.4之后。
步骤：
``` bash</p>

<pre><code>$cd /path/project/site
$php -S localhost:8080
</code></pre>

<p>```</p>

<h4>停止Server</h4>

<p>在终端按<code>Ctrl-C</code>即可停止。</p>

<h4>其他系统</h4>

<p>由于Python和PHP都是跨平台的，在其他系统上，只需要安装好这两个运行环境，就可以使用同样的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在一台电脑上使用两个Github账号]]></title>
    <link href="http://blog.lessfun.com/blog/2014/06/11/two-github-account-in-one-client/"/>
    <updated>2014-06-11T01:30:09+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/06/11/two-github-account-in-one-client</id>
    <content type="html"><![CDATA[<p>有时候我们需要在一台电脑上push到两个github的repo，但是默认情况Github只适用一个账号。本文介绍了如何在一台电脑使用两个Github提交更改的方法。</p>

<!--more-->


<p>前提：你已经在使用github的A账号，其ssh-key保存在~/.ssh/id_rsa中。<br/>
现在，需要做的是添加另一个ssh-key，按照以下步骤操作。</p>

<h4>1. 生成新的ssh-key</h4>

<p>保存的时候，输入一个新的文件名，如：id_rsa_second</p>

<p>``` bash</p>

<pre><code>$ssh-keygen -t rsa -C "your_email@example.com"
# Creates a new ssh key, using the provided email as a label
# Generating public/private rsa key pair.
# Enter file in which to save the key (/Users/you/.ssh/id_rsa_second): [Press enter]
</code></pre>

<p>```</p>

<h4>2. 添加到ssh-agent（每次重启之后都需要调用这句）</h4>

<p>``` bash</p>

<pre><code>$ssh-add ~/.ssh/id_rsa_second
</code></pre>

<p>```</p>

<h4>3. 添加ssh key到github</h4>

<p>见<a href="https://help.github.com/articles/generating-ssh-keys">配置ssh-key</a>。</p>

<h4>4. 配置多个ssh-key</h4>

<p>修改<code>~/.ssh/config</code>文件，如下：</p>

<p>``` bash</p>

<pre><code>#default github
Host github.com
  HostName github.com
  IdentityFile ~/.ssh/id_rsa

Host github_second
  HostName github.com
  IdentityFile ~/.ssh/id_rsa_second
</code></pre>

<p>```</p>

<h4>5. 使用别名pull/push代码</h4>

<p>如：</p>

<p>``` bash</p>

<pre><code>git clone git@github_second:username/reponame
</code></pre>

<p>```</p>

<h4>6. 为每个账号对应的项目配置email/name</h4>

<p>``` bash</p>

<pre><code>1.取消global
git config --global --unset user.name
git config --global --unset user.email

2.设置每个项目repo的自己的user.email
git config  user.email "xxxx@xx.com"
git config  user.name "xxxx"
</code></pre>

<p>```</p>

<p>这样，以后每次在相应的repo下提交更改，都会自动匹配相应的ssh-key了。</p>
]]></content>
  </entry>
  
</feed>
