<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | 浮生猎趣]]></title>
  <link href="http://blog.lessfun.com/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://blog.lessfun.com/"/>
  <updated>2016-08-29T15:19:08+08:00</updated>
  <id>http://blog.lessfun.com/</id>
  <author>
    <name><![CDATA[lslin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在C++中使用七牛C-SDK，给QINIU_ACCESS_KEY和QINIU_SECRET_KEY赋值失败的解决方法]]></title>
    <link href="http://blog.lessfun.com/blog/2014/04/01/using-qiniu-c-sdk-in-cpp/"/>
    <updated>2014-04-01T10:14:00+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/04/01/using-qiniu-c-sdk-in-cpp</id>
    <content type="html"><![CDATA[<p>七牛云存储为广大开发者提供了数据云存储的免费使用空间，对于个人开发来说完全足够了。并且提供了各种语言的SDK，方便开发。</p>

<p>在C++工程中使用C-SDK的时候，遇到了一个问题，下面语句在运行时，提示：<code>0x00401005 处未处理的异常: 0xC0000005: 写入位置 0x0040ab42 时发生访问冲突</code></p>

<p>```cpp</p>

<p>extern &ldquo;C&rdquo;
{</p>

<h1>include &ldquo;qiniu/conf.h&rdquo;</h1>

<h1>include &ldquo;qiniu/rs.h&rdquo;</h1>

<h1>include &ldquo;qiniu/io.h&rdquo;</h1>

<p>}</p>

<p>void Class::_initQiniu()
{</p>

<pre><code>QINIU_ACCESS_KEY = "my-akey";
QINIU_SECRET_KEY = "my-sKey";
</code></pre>

<p>}
```
以上语句是官方文档给出的例子代码，但是我用了各种方法，都无法赋值成功，绝望……</p>

<p>在网上找有没有人遇到类似的问题的时候，看到了这篇问答：<a href="http://segmentfault.com/q/1010000000450707">七牛C-SDK中，QINIU_ACCESS_KEY和QINIU_SECRET_KEY应该怎么赋值？</a>，虽然没有给出解决方案，但是至少可以知道，七牛官方提供的C-SDK由于没有在<code>qiniu.def</code>的导出变量后面加上<code>DATA</code>关键字，导致无法在别的C++工程中直接修改变量值。<br/>
在回答中还看到，原来七牛还有一个<a href="https://github.com/qiniu/cpp-sdk/">Cpp-SDK</a>，尝试下载，发现有28M，没有了继续使用的欲望。</p>

<p>那就继续折腾C-SDK吧。既然官方提供的C-SDK无法直接修改<code>QINIU_ACCESS_KEY</code> 和 <code>QINIU_SECRET_KEY</code>，在不重现编译DLL和Lib的情况下（Windows下编译不方便，还得配置各种cURL和OpenSSL的头文件路径），解决方法如下：<br/>
<strong>不直接给那两个变量赋值，而是自己参考源码写生成uptoken的方法。</strong></p>

<!--more-->


<p>```cpp</p>

<h1>include &ldquo;cJSON.h&rdquo;</h1>

<h1>include &ldquo;http.h&rdquo;</h1>

<p>//&hellip;&hellip;
char<em> uptoken(const char</em> bucket)
{</p>

<pre><code>int expires = 3600; // 1小时;
time_t deadline;
char* authstr;
char* token;

cJSON* root = cJSON_CreateObject();

cJSON_AddStringToObject(root, "scope", bucket);
time(&amp;deadline);
deadline += expires;
cJSON_AddNumberToObject(root, "deadline", deadline);

authstr = cJSON_PrintUnformatted(root);
cJSON_Delete(root);

Qiniu_Auth mac;
mac.accessKey = KYourQiniuAccessKey;//将两个Key赋值到mac
mac.secretKey = KYourQiniuSecretKey;
token = Qiniu_Mac_SignToken(&amp;mac, authstr);//当mac不为空，七牛就不会访问QINIU_ACCESS_KEY和QINIU_SECRET_KEY
Qiniu_Free(authstr);//这里会出现堆冲突=_=#

return token;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在程序运行时获取被调用的DLL的本地文件路径]]></title>
    <link href="http://blog.lessfun.com/blog/2014/03/18/get-dll-path-at-runtime/"/>
    <updated>2014-03-18T17:42:46+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/03/18/get-dll-path-at-runtime</id>
    <content type="html"><![CDATA[<p>很多时候，DLL都是被别的进程所调用，所以在运行时，下面方法获取到的实际上是EXE所在的文件路径：</p>

<p>``` c++</p>

<pre><code>QCoreApplication::applicationFilePath();//Qt
</code></pre>

<p>```</p>

<p>但是我们实际上想要获得的是DLL本身的路径，因为运行的EXE与被调用的DLL不一定在同一个目录，比如，当把abc.dll注入到notepad.exe进程，很明显abc.dll是不在notepad所在的目录的。在dll代码中调用上述语句，返回的实际上是notepad的EXE路径。</p>

<p>那么，我们要获得abc.dll真实路径，有两个方法。</p>

<!--more-->


<h4>方法一：</h4>

<p>在DLL的入口函数附近，声明以下变量，并定义函数：</p>

<p>``` c++</p>

<pre><code>EXTERN_C IMAGE_DOS_HEADER __ImageBase;  VOID CALLBACK abcAPCProc(ULONG_PTR dwParam) {       WCHAR path[MAX_PATH + 1] = {0};     ::GetModuleFileName((HINSTANCE)&amp;__ImageBase, path, MAX_PATH);       //path就是当前dll的文件路径    }
</code></pre>

<p>```</p>

<p>然后，需要在导出函数里调用一下上面的函数：</p>

<p>``` c++</p>

<pre><code>extern "C" DWORD __declspec(dllexport) __stdcall showABC(void *)    {       HANDLE hThread = NULL;      DWORD dwRes = 0;        hThread = ::OpenThread(THREAD_SET_CONTEXT,          FALSE, getMainThreadId(0));     DW_ASSERT(NULL != hThread);     dwRes = ::QueueUserAPC(abcAPCProc,          hThread, 0);        ::CloseHandle(hThread);     hThread = NULL;     return dwRes;   }
</code></pre>

<p>```</p>

<h4>方法二：</h4>

<p>定义以下函数：</p>

<p>``` c++</p>

<pre><code>HMODULE GetCurrentModule()  { // NB: XP+ solution!      HMODULE hModule = NULL;     GetModuleHandleEx(          GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,         (LPCTSTR)GetCurrentModule,          &amp;hModule);          return hModule; }
</code></pre>

<p>```</p>

<p>调用上面函数，获取当前局部，然后就可以使用<code>GetModuleFileName</code>方法获取DLL路径：</p>

<p>``` c++</p>

<pre><code>WCHAR path[MAX_PATH + 1] = {0}; HMODULE hm = GetCurrentModule();    ::GetModuleFileName(hm, path, MAX_PATH);
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
