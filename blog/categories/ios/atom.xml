<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | 浮生猎趣]]></title>
  <link href="http://blog.lessfun.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.lessfun.com/"/>
  <updated>2015-01-22T18:44:59+08:00</updated>
  <id>http://blog.lessfun.com/</id>
  <author>
    <name><![CDATA[lslin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MarkText - iOS 上支持语法高亮、HTML预览、文件导出的Markdown文本编辑器]]></title>
    <link href="http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios/"/>
    <updated>2014-12-10T21:29:06+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/app/marktext/marktext_appicon.png" width="120" height="120" title="&lsquo;MarkText App&rsquo; &lsquo;A Markdown Text Editor&rsquo;" ></p>

<p>MarkText是iPhone上的Markdown文本编辑器。支持实时语法高亮、带CSS的HTML预览、文件导出为HTML/PNG/PDF, 分享到Evernote，Dropbox或 Email。</p>

<p>当前版本：1.0.1<br/>
更新时间：2014.01.14</p>

<h2>iPhone 屏幕截图</h2>

<div style="margin-top:30px;font-size:16px;line-height:20px;background:rgb(78,81,85);border-radius:4px;padding:4px;">
<div style="margin: 0 14px; max-height: 640px; min-height: 320px; overflow-x: auto; overflow-y: hidden; padding-bottom: 16px; white-space: nowrap;"><img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_1.png" alt="1"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_2.png" alt="2"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_3.png" alt="3"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_4.png" alt="4"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_5.png" alt="5"></div>
</div>


<h2>下载</h2>

<p><a href="https://itunes.apple.com/cn/app/marktext-markdown-text-editor/id948768793?mt=8"><img src="/images/app/appstore_available.png" alt="从AppStore下载" /></a></p>

<h2>应用介绍</h2>

<!--more-->


<p>MarkText是iPhone上的一款Markdown文本编辑器.</p>

<h3>编辑 &amp; 分享</h3>

<p>通过MarkText，你可以导入或创建markdown格式的文本文件，支持实时语法高亮显示。编辑完后，支持将markdown的纯文本转换为HTML、PNG或PDF文件，通过iTunes导出到电脑，或者分享到Evernote、Dropbox或Email。</p>

<h3>光标增强</h3>

<p>辅助工具条可以让你很方便地点击按钮插入Tabs、标题、列表、代码块，或者超链接。左右滑动工具条可以迅速移动光标；双指选择可以快速选择文本。</p>

<h3>HTML预览</h3>

<p>HTML预览支持CSS样式，语法高亮支持的特性：常规Markdown、MultiMarkdown、脚注、图片、表格和代码块。</p>

<h2>版本1.0.1 新特性</h2>

<ul>
<li>Bug 修复；</li>
<li>字数统计;</li>
<li>全文搜索。</li>
</ul>


<h2>版本1.0.0 特性</h2>

<ul>
<li>创建、编辑markdown格式的文本；</li>
<li>实时语法高亮；</li>
<li>带CSS样式的HTML预览；</li>
<li>修改主题配色；</li>
<li>从iTunes导入文稿；</li>
<li>导出文稿为HTML、PNG和PDF格式的文件；</li>
<li>分享内容到Evernote、Dropbox和Email；</li>
<li>光标增强：滑动输入工具栏，快速移动光标；</li>
<li>支持的文件后缀类型：md、mmd、markdown、markdn、mdown、mkdn、markd、txt、text。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年在Apple Store申请iOS个人开发者账号详细流程]]></title>
    <link href="http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014/"/>
    <updated>2014-12-03T19:20:56+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/12/idp_intro.png" alt="idp intro" /></p>

<!--more-->


<p>想要在AppStore上发布个人App从来都不是一件简单的事，光是申请开发者账号就可以折腾好久了。这是加入个人开发者计划，申请iOS开发者账号的最新教程，2014年版，供参考。什么时候，苹果才能为开发者考虑一下，减少各种繁琐的流程呢？</p>

<h2>前期准备</h2>

<ul>
<li>需要有一张支持美元支付的信用卡。</li>
</ul>


<h2>注册Apple ID</h2>

<ol>
<li><p>访问<a href="https://developer.apple.com/cn/programs/ios/">https://developer.apple.com/cn/programs/ios/</a> ，点击<code>立即注册</code>。<br/>
<img src="/images/2014/12/idp_register.png" alt="apple register" /></p></li>
<li><p>按照提示，选择注册类型：公司或个人。这里以「个人」为例，点击继续。<br/>
<img src="/images/2014/12/idp_register_continue.png" alt="register continue" /></p></li>
<li><p>注册或创建Apple ID。如果已有，可以继续使用。我选了新建。<br/>
<img src="/images/2014/12/idp_create_apple_id.png" alt="create apple id" /></p></li>
<li><p>按照要求填写接口。需要注意的地方：FirstName 和 LastName 要是自己的名字拼音，由于涉及到审核、支付、收款等操作，不要乱填。另外，中英文的姓名顺序一直都可以把人绕晕，总之，我在 FirstName 填了名字拼音，在 LastName 填姓氏拼音。<br/>
<img src="/images/2014/12/idp_fill_apple_id.png" alt="fill apple id" /></p></li>
<li><p>设置安全问题答案，找回密码需要。</p></li>
<li>验证邮箱，之后就可以使用新的AppleID了，如果在上面填错了资料，可以登录修改，比如姓名。<br/>
<img src="/images/2014/12/idp_verify_email.png" alt="verify email" /></li>
</ol>


<h2>填写开发者信息</h2>

<ol>
<li><p>在协议这里打钩，点击<code>Agree</code>。<br/>
<img src="/images/2014/12/idp_develop_agreement.png" alt="develop agreement" /></p></li>
<li><p>完善个人的一些信息。<br/>
<img src="/images/2014/12/idp_self_info.png" alt="self info" /></p></li>
<li><p>至此，Apple ID创建完成。<br/>
<img src="/images/2014/12/idp_register_finished.png" alt="register finished" /></p></li>
</ol>


<h2>加入开发者计划</h2>

<ol>
<li><p>这时候已有新的Apple ID，再次打开<a href="https://developer.apple.com/programs/ios">https://developer.apple.com/programs/ios</a> ，正式加入$99/年的个人开发者计划。<br/>
<img src="/images/2014/12/idp_enroll_now.png" alt="enroll now" /></p></li>
<li><p>选择刚刚创建的Apple ID：<br/>
<img src="/images/2014/12/idp_select_apple_id.png" alt="select apple id" /></p></li>
<li><p>提示选择注册类型，个人或公司。这里选择个人。<br/>
<img src="/images/2014/12/idp_select_individual.png" alt="select individual" /></p></li>
<li><p>输入账单地址等信息，这里需要与信用卡账单显示的地址完全一致，中英文各输入一遍，注意输入手机号时，区号填<code>86</code>。<br/>
<img src="/images/2014/12/idp_credit_card_address.png" alt="credit card address" /></p></li>
<li><p>选择开发者计划类型。<br/>
<img src="/images/2014/12/idp_select_program.png" alt="select program" /></p></li>
<li><p>Review，检查没问题后，提交。</p></li>
<li>继续同意协议。<br/>
<img src="/images/2014/12/idp_program_license.png" alt="program license" /></li>
</ol>


<h2>提交订单、付款</h2>

<ol>
<li><p>终于到了付款这一步骤了，点击<code>Buy now</code>。<br/>
<img src="/images/2014/12/idp_buy_now.png" alt="buy now" /></p></li>
<li><p>再次要求登录Apple ID。<br/>
<img src="/images/2014/12/idp_login_again.png" alt="login again" /></p></li>
<li><p>输入信用卡信息进行付款。<br/>
<img src="/images/2014/12/idp_credit_card_info.png" alt="credit card info" /></p></li>
<li><p>提交订单。<br/>
<img src="/images/2014/12/idp_commit_order.png" alt="commit order" /></p></li>
<li><p>付款完成提示，等待苹果发送激活的邮件吧。</p></li>
</ol>


<p><img src="/images/2014/12/idp_order_tips.png" alt="order tips" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf]]></title>
    <link href="http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/"/>
    <updated>2014-11-22T15:59:18+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block</id>
    <content type="html"><![CDATA[<p>Objective C 的 <code>Block</code> 是一个很实用的语法，特别是与GCD结合使用，可以很方便地实现并发、异步任务。但是，如果使用不当，Block 也会引起一些循环引用问题(<code>retain cycle</code>)—— Block 会 retain ‘self’，而 ‘self‘ 又 retain 了 Block。因为在 ObjC 中，直接调用一个实例变量，会被编译器处理成 &lsquo;self->theVar'，'self&rsquo; 是一个 strong 类型的变量，引用计数会加 1，于是，self retains queue， queue retains block，block retains self。</p>

<!--more-->


<h3>解决 retain circle</h3>

<p>Apple 官方的建议是，传进 Block 之前，把 &lsquo;self&rsquo; 转换成 weak automatic 的变量，这样在 Block 中就不会出现对 self 的强引用。如果在 Block 执行完成之前，self 被释放了，weakSelf 也会变为 nil。</p>

<p>示例代码：</p>

<p>``` m</p>

<p><strong>weak </strong>typeof__(self) weakSelf = self;</p>

<pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
[weakSelf doSomething];
</code></pre>

<p>});</p>

<p>```</p>

<p>clang 的文档表示，在 doSomething 内，weakSelf 不会被释放。但，下面的情况除外：</p>

<p>``` m</p>

<p><strong>weak </strong>typeof__(self) weakSelf = self;</p>

<pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
[weakSelf doSomething];
[weakSelf doOtherThing];
</code></pre>

<p>});</p>

<p>```</p>

<p>在 doSomething 中，weakSelf 不会变成 nil，不过在 doSomething 执行完成，调用第二个方法 doOtherThing 的时候，weakSelf 有可能被释放，于是，strongSelf 就派上用场了：</p>

<p>``` m</p>

<p><strong>weak </strong>typeof__(self) weakSelf = self;</p>

<pre><code>dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
__strong __typeof(self) strongSelf = weakSelf;
[strongSelf doSomething];
[strongSelf doOtherThing];
</code></pre>

<p>});</p>

<p>```</p>

<p><code>__strong</code> 确保在 Block 内，strongSelf 不会被释放。</p>

<h3>总结</h3>

<ul>
<li>在 Block 内如果需要访问 self 的方法、变量，建议使用 weakSelf。</li>
<li>如果在 Block 内需要多次 访问 self，则需要使用 strongSelf。</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="http://dhoerl.wordpress.com/2013/04/23/i-finally-figured-out-weakself-and-strongself/">I finally figured out weakSelf and strongSelf</a></li>
<li><a href="http://stackoverflow.com/questions/21113963/is-the-weakself-strongself-dance-really-necessary-when-referencing-self-inside-a?rq=1">Is the weakSelf/strongSelf dance really necessary when referencing self inside a non-retained completion called from a UIViewController?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 6.1 iPhone Simulator 8.1 Keyboard Issue：键盘无法显示，设置inputAccessoryView崩溃]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue/"/>
    <updated>2014-10-24T14:42:51+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue</id>
    <content type="html"><![CDATA[<p>随着iPhone 6 &amp; Plus的发布，苹果也陆续更新了XCode和开发模拟器，目前最新的Xcode版本是6.1，内置的Simulator的iOS版本是8.1。也许你兴致冲冲迫不及待地一下子升级到了最新版的开发环境，那么可能会遇到一些键盘上的问题：无法弹出键盘，或者弹出键盘后会莫名其妙地崩溃。</p>

<p>当然，不能怪你，你的项目在iOS7.1上是运行地好好的。只能怪苹果没有推出一个完美无Bug的开发工具。</p>

<!--more-->


<h2>1. 在XCode 6，iOS 8.1模拟器无法弹出键盘</h2>

<p>解决方法很简单，在Simulator的系统菜单中，取消勾选：</p>

<p><code>Hardware</code> &ndash;> <code>Keyboard</code> &ndash;> <code>Connect Hardware Keyboard</code>。</p>

<p>取消选中之后，键盘可以正常弹出，但是，无法使用硬件的键盘输入了，自己慢慢用鼠标点击模拟器里的键盘吧……</p>

<h2>2. 弹出键盘后会莫名其妙地崩溃</h2>

<p>也许你键盘能正常显示了，但是一显示就崩溃，在堆栈中有这样的字样：</p>

<p>``` m</p>

<pre><code>*** First throw call stack:
(
    0   CoreFoundation                      0x02101df6 __exceptionPreprocess + 182
    1   libobjc.A.dylib                     0x01d8ba97 objc_exception_throw + 44
    2   CoreFoundation                      0x02101d1d +[NSException raise:format:] + 141
    3   UIKit                               0x008cff9c -[UIViewController _addChildViewController:performHierarchyCheck:notifyWillMove:] + 210
    4   UIKit                               0x00f4b44d -[UIInputWindowController changeToInputViewSet:] + 576
    5   UIKit                               0x00f4c1be __43-[UIInputWindowController setInputViewSet:]_block_invoke + 103
    6   UIKit                               0x007f73bf +[UIView(Animation) performWithoutAnimation:] + 82
    7   UIKit                               0x00f4bf9c -[UIInputWindowController setInputViewSet:] + 374
    8   UIKit                               0x00ce9101 __64-[UIPeripheralHost(UIKitInternal) setInputViews:animationStyle:]_block_invoke1459 + 43
    9   UIKit                               0x00f473af -[UIInputWindowController performOperations:withAnimationStyle:] + 56

......
}
</code></pre>

<p>```</p>

<p>以上崩溃也只在XCode 6，iOS 8出现，在iOS 7一切正常。</p>

<p>原因可能是你设置了<code>UITextField</code>或<code>UITextView</code>的<code>inputView</code>或<code>inputAccessoryView</code>为customView，比如这样：</p>

<p>``` m</p>

<pre><code>//在Xib或Storyboard中创建了一个自定义View
@property (strong, nonatomic) IBOutlet UIView *switchKeyboardBar;

...

- (void)viewDidLoad
{
    [super viewDidLoad];

    self.textView.inputAccessoryView = self.switchKeyboardBar;
}
</code></pre>

<p>```</p>

<p>上述代码在iOS 8中是必定Crash的，因为<code>UITextView.inputAccessoryView</code>不能是其他View的子View。而上面的<code>switchKeyboardBar</code>先被添加到了当前<code>UIViewController</code>的<code>View</code>中，再被设置到<code>inputAccessoryView</code>，就会导致崩溃。</p>

<h3>2.1 解决方法</h3>

<p>不从Xib创建自定义View，而是在代码中手动创建，并且不添加到别的View中。</p>

<p>如下：</p>

<p>``` m</p>

<pre><code>//注意这里没有 IBOutlet
@property (strong, nonatomic) UIView *switchKeyboardBar;

- (UIView *)switchKeyboardBar
{
    if (!_switchKeyboardBar) {
        _switchKeyboardBar = [[UIView alloc] initWithFrame:CGRectMake(0, 0, CGRectGetWidth(self.view.frame), 40)];

        //add other subviews
        ...
    }
    return _switchKeyboardBar;
}

- (void)viewDidLoad
{
    [super viewDidLoad];

    self.textView.inputAccessoryView = self.switchKeyboardBar;
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS AutoLayout与AutoSizing：自动布局，想说爱你真的好难]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing/"/>
    <updated>2014-10-17T14:31:20+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing</id>
    <content type="html"><![CDATA[<p>在iPhone Retina发布之前，还没有AutoLayout，因为屏幕只有一种尺寸。<br/>
当iPhone Retina发布之后，我没有用上AutoLayout，因为屏幕尺寸是用点来表示，布局写起来没什么不同。<br/>
当iPhone 5发布之后，屏幕尺寸终于加长了，但是由于有AutoSizing，所以我还是可以不用AutoLayout。<br/>
现在，iPhone 6和6 Plus发布了，屏幕又大了，我不得不开始考虑是否要使用AutoLayout。</p>

<!--more-->


<h2>1. Autolayout 与 Autosizing的区别</h2>

<p>虽然自iOS6之后，苹果推荐我们使用Autolayout布局，并且在Xib和Storyboard中默认帮我们打开了这个选项，但是在开发过程中，我们偏向于使用<code>Autosizing</code>，并且手动取消掉<code>Autolayout</code>，原因在于，Autolayout太繁琐复杂，而Autosizing简单并且能满足大部分的需求。</p>

<h3>Autosizing适用的情况</h3>

<p>当父视图被拉伸的时候，子视图能够适配父视图的新大小。其原理是，子视图有一个masks，用于指定与父视图上下左右边缘的距离，以及自身宽高的关系。</p>

<p>比如，指定子视图的右边缘紧跟着父视图的右边缘，那么父视图变大之后，子视图还是贴在父视图的右边。</p>

<p>这在大部分简单布局情况下非常有效。</p>

<h3>Autosizing的不足</h3>

<p>使用Autosizing，有一个前提，就是子视图的Frame是固定的，至少宽高是固定的，或者跟随着父视图的Frame变化。但是，如果希望多个子视图与父视图的边距固定，大小自动调整，Autosizing就爱莫能助了。</p>

<p>原因在于：<strong>Autosizing无法智能计算多个子View各自的Frame</strong>。</p>

<p>比如，我们希望在竖屏下布局是这样：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/StrutsProblem-portrait-design-423x500.png" alt="autosizing portrait" /></p>

<p>并且在横屏下布局是这样：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/StrutsProblem-landscape-looks-good-480x289.png" alt="autosizing landscape" /></p>

<p>除了手写代码调整Frame，单独用Autosizing是无法做到的。这时候就需要借助强大的Autolayout了。</p>

<h3>Autolayout的优点</h3>

<p>Autolayout使用约束来决定每个View的坐标、大小，约束可以针对SuperView，也可以针对其他任意一个SubView。</p>

<p>使用自动布局，你可以表达出视图与视图之间的关系，而不是明确地指定每个视图的Frame。通过约束，视图会自动计算它们应该呆在哪个位置，只要约束足够多，它们也能自动计算自己的大小。</p>

<p>只要指定了约束，无论屏幕大小怎么变化，它们都能自适应，这就是Autolayout的优点：妈妈再也不用担心你手写布局代码啦！也不用担心你为了适配各种屏幕大小而加班了。</p>

<h3>Autolayout的缺点</h3>

<p>Autolayout唯一的缺点就在于：过于复杂，较难上手。</p>

<h3>使用Autolayout，还是Autosizing？</h3>

<p>取决于项目需求。如果Autosizing完全能满足开发需求，那么就没必要使用复杂的Autolayout。但是，如果你已经被适配各种屏幕大小折腾得不成人形了，那么就要早日投入到Autolayout的怀抱了。</p>

<h2>Autolayout的使用</h2>

<p>首先要改变自己对布局的思考方式。你应该忘掉Frame，需要考虑的是subView A与subView B的上下左右的关系，以及与superView的关系。</p>

<h3>借助XCode</h3>

<p>在Xcode5之后，苹果已经尽力让开发者能更方便地使用Autolayout了。<br/>
通过<code>Xcode</code>&ndash;><code>Editor</code>&ndash;><code>Pin/Align</code>菜单为视图添加约束即可。</p>

<p>在XCode中除了通过菜单，还可以通过可视化的方式添加约束：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/Pin-green-view.png" alt="autolayout add constraint" /></p>

<p>如果你添加的约束不足以表达某个View的位置大小，XCode还会以黄色的辅助线发出警告，十分好用。</p>

<h3>手写约束Constraint</h3>

<p>XCode虽然强大，但是有时候我们也许希望借助代码来写Constraint。</p>

<p>加入你希望一个子view跟随父view的大小，但是与边距有10个点的距离：</p>

<p>``` m</p>

<p>UIView *superview = self;</p>

<p>UIView *view1 = [[UIView alloc] init];
view1.translatesAutoresizingMaskIntoConstraints = NO;
view1.backgroundColor = [UIColor greenColor];
[superview addSubview:view1];</p>

<p>UIEdgeInsets padding = UIEdgeInsetsMake(10, 10, 10, 10);</p>

<p>[superview addConstraints:@[</p>

<pre><code>//view1 constraints
[NSLayoutConstraint constraintWithItem:view1
                             attribute:NSLayoutAttributeTop
                             relatedBy:NSLayoutRelationEqual
                                toItem:superview
                             attribute:NSLayoutAttributeTop
                            multiplier:1.0
                              constant:padding.top],

[NSLayoutConstraint constraintWithItem:view1
                             attribute:NSLayoutAttributeLeft
                             relatedBy:NSLayoutRelationEqual
                                toItem:superview
                             attribute:NSLayoutAttributeLeft
                            multiplier:1.0
                              constant:padding.left],

[NSLayoutConstraint constraintWithItem:view1
                             attribute:NSLayoutAttributeBottom
                             relatedBy:NSLayoutRelationEqual
                                toItem:superview
                             attribute:NSLayoutAttributeBottom
                            multiplier:1.0
                              constant:-padding.bottom],

[NSLayoutConstraint constraintWithItem:view1
                             attribute:NSLayoutAttributeRight
                             relatedBy:NSLayoutRelationEqual
                                toItem:superview
                             attribute:NSLayoutAttributeRight
                            multiplier:1
                              constant:-padding.right],
</code></pre>

<p> ]];</p>

<p>```</p>

<p>每个约束都是这样的长长一串代码，设想一下需要添加6个约束的话……</p>

<p>幸好有了这个开源库：<a href="https://github.com/Masonry/Masonry">Masonry</a>。</p>

<p>使用这个库，代码添加约束就可以简介如下：</p>

<p>``` m</p>

<p>[view1 mas_makeConstraints:^(MASConstraintMaker *make) {</p>

<pre><code>make.edges.equalTo(superview).with.insets(padding);
</code></pre>

<p>}];</p>

<p>```</p>

<h3>更新约束</h3>

<p>比如，我们自己实现了一个图文混排的TextView，添加到Xib时我们还不知道其高度，需要在代码中计算，那么就需要在代码里更新约束，如：</p>

<p>``` m</p>

<p>@property (strong, nonatomic) IBOutlet NSLayoutConstraint *richTextHeightConstraint;</p>

<p>&hellip;</p>

<ul>
<li><p>(void)relayout
{
  self.richTextHeightConstraint.constant = self.richTextView.frame.size.height;</p>

<p>  [self needsUpdateConstraints];
}</p></li>
</ul>


<p>```</p>

<h2>关键还是实践</h2>

<p>多说无益，贵在实践。只要有意识地去使用了一次，自然就会了。</p>

<h3>参考链接</h3>

<ul>
<li><a href="http://www.raywenderlich.com/50317/beginning-auto-layout-tutorial-in-ios-7-part-1">Beginning Auto Layout Tutorial in iOS 7: Part 1</a></li>
<li><a href="http://www.raywenderlich.com/50319/beginning-auto-layout-tutorial-in-ios-7-part-2">Beginning Auto Layout Tutorial in iOS 7: Part 2</a></li>
<li><a href="http://www.cocoachina.com/industry/20131203/7462.html">开始iOS 7中自动布局教程 一</a></li>
<li><a href="http://www.cnblogs.com/zer0Black/p/3977288.html">开始iOS 7中自动布局教程 二</a></li>
<li><a href="http://segmentfault.com/blog/ilikewhite/1190000000646452">从此爱上iOS Autolayout</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
