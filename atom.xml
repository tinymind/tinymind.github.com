<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[浮生猎趣]]></title>
  <link href="http://blog.lessfun.com/atom.xml" rel="self"/>
  <link href="http://blog.lessfun.com/"/>
  <updated>2017-08-16T14:11:58+08:00</updated>
  <id>http://blog.lessfun.com/</id>
  <author>
    <name><![CDATA[lslin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用 Python 对 CSV 文件进行数据分析，生成统计图表]]></title>
    <link href="http://blog.lessfun.com/blog/2017/05/11/use-python-to-handle-csv-file/"/>
    <updated>2017-05-11T15:37:46+08:00</updated>
    <id>http://blog.lessfun.com/blog/2017/05/11/use-python-to-handle-csv-file</id>
    <content type="html"><![CDATA[<p>CSV 文件本质上还是文本文件，只是格式是固定的，所以看起来跟表格差不多。Mac 下的 Numbers 原生支持打开 CSV 文件，也可以进行排序、筛选、统计等操作。不过有一点比较致命，当数据量特别大的时候，用 Numbers 简直痛不欲生，内存涨得飞起，卡得你不要不要的。而利用 Python，处理起来则灵活方便很多。</p>

<h3>1. 配置环境</h3>

<h4>1.1 安装 MacPorts</h4>

<p>最简单的方式是使用 <a href="https://www.macports.org/install.php">pkg 安装</a>。下载<a href="https://github.com/macports/macports-base/releases/download/v2.4.1/MacPorts-2.4.1-10.12-Sierra.pkg">安装包</a>，然后双击即可。</p>

<p><img src="http://blog.lessfun.com/images/2017/05/macports_install.png" alt="macports_install" /></p>

<p>安装完后要重新开一个终端才能运行，否则会提示 <code>port command not found</code>.</p>

<h4>1.2 安装依赖库 numpy &amp; matplotlib</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo port install py35-numpy py35-scipy py35-matplotlib py35-ipython +notebook py35-pandas py35-sympy py35-nose</span></code></pre></td></tr></table></div></figure>


<h4>1.3 测试</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="err">$</span> <span class="n">python</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">np</span><span class="o">.</span><span class="n">test</span><span class="p">(</span><span class="s">&#39;full&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">scipy</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">scipy</span><span class="o">.</span><span class="n">test</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考 <a href="http://www.jianshu.com/p/21bb9d06cf79">[Mac] Python Numpy Scipy Matplotlib 快速安装</a>。</p>

<h4></h4>

<!--more-->


<h3>2. 分析数据</h3>

<p>如前所述，CSV 文件其实就是文本文件，常规格式如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="s">&quot;Header1&quot;</span><span class="p">,</span><span class="s">&quot;Header2&quot;</span><span class="p">,</span><span class="s">&quot;Header3&quot;</span>
</span><span class='line'><span class="s">&quot;Data1&quot;</span><span class="p">,</span><span class="s">&quot;Data2&quot;</span><span class="p">,</span><span class="s">&quot;Data3&quot;</span>
</span><span class='line'><span class="s">&quot;Data1&quot;</span><span class="p">,</span><span class="s">&quot;Data2&quot;</span><span class="p">,</span><span class="s">&quot;Data3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过 Numbers 打开，看起来是这样的：</p>

<table>
<thead>
<tr>
<th>Header1 </th>
<th> Header2 </th>
<th> Header3 </th>
</tr>
</thead>
<tbody>
<tr>
<td>Data1  </td>
<td>  Data2  </td>
<td>  Data3 </td>
</tr>
<tr>
<td>Data1  </td>
<td>  Data2  </td>
<td>  Data3 </td>
</tr>
</tbody>
</table>


<p>知道了规则，不难用 Python 写出大概这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">input_file_path</span><span class="p">):</span>
</span><span class='line'>  <span class="n">input_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">input_file_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># skip header</span>
</span><span class='line'>  <span class="n">input_file</span><span class="o">.</span><span class="n">readline</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">datas</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">key_index_table</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s">&quot;Header1&quot;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Header2&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="s">&quot;Header3&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">max_count</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">max_count</span><span class="p">:</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">input_file</span><span class="o">.</span><span class="n">readline</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">values</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">key_index_table</span><span class="p">:</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">=</span> <span class="n">values</span><span class="p">[</span><span class="n">key_index_table</span><span class="p">[</span><span class="n">key</span><span class="p">]];</span>
</span><span class='line'>      <span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span> <span class="c"># remove quotation mark</span>
</span><span class='line'>      <span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">datas</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">drawTable</span><span class="p">(</span><span class="n">datas</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有的数据都读到了 datas 数组中，下面是对这组数据进行绘制。</p>

<h3>3. 绘制图表</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">drawTable</span><span class="p">(</span><span class="n">datas</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data1_list</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="n">data2_list</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="n">data3_list</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">avg_data1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">avg_data2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">avg_data3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">less_than_1000_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">total_count</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">datas</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">datas</span><span class="p">:</span>
</span><span class='line'>    <span class="n">data1</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="s">&quot;Header1&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">data1_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">avg_data1</span> <span class="o">+=</span> <span class="n">data1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data2</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="s">&quot;Header2&quot;</span><span class="p">]</span> <span class="o">-</span> <span class="n">data1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">data2_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">avg_data2</span> <span class="o">+=</span> <span class="n">data2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data3</span> <span class="o">=</span> <span class="n">sample</span><span class="p">[</span><span class="s">&quot;Header3&quot;</span><span class="p">]</span> <span class="o">-</span> <span class="n">data2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">data3_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">data3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">avg_data3</span> <span class="o">+=</span> <span class="n">data3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">sample</span><span class="p">[</span><span class="s">&quot;Header3&quot;</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">:</span>
</span><span class='line'>      <span class="n">less_than_1000_count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">avg_data1</span> <span class="o">/=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data1_list</span><span class="p">);</span>
</span><span class='line'>  <span class="n">avg_data2</span> <span class="o">/=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data2_list</span><span class="p">);</span>
</span><span class='line'>  <span class="n">avg_data3</span> <span class="o">/=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data3_list</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">data1_np_array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data1_list</span><span class="p">);</span>
</span><span class='line'>  <span class="n">data2_np_array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data2_list</span><span class="p">);</span>
</span><span class='line'>  <span class="n">data3_np_array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">data3_list</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="n">total_count</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">width</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">));</span>
</span><span class='line'>  <span class="n">plt</span><span class="o">.</span><span class="n">subplots_adjust</span><span class="p">(</span><span class="n">hspace</span> <span class="o">=</span> <span class="mf">0.3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">&quot;Load Time&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data1_list</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&quot;Header1: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">avg_data1</span><span class="p">));</span>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data2_list</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">bottom</span> <span class="o">=</span> <span class="n">data1_np_array</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">&#39;blue&#39;</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&#39;Header2: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">avg_data2</span><span class="p">));</span>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">bar</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data3_list</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">bottom</span> <span class="o">=</span> <span class="n">data1_np_array</span> <span class="o">+</span> <span class="n">data2_np_array</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">&#39;yellow&#39;</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&#39;Header3: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">avg_data3</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">data3_list</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">&#39;purple&#39;</span><span class="p">,</span> <span class="n">label</span> <span class="o">=</span> <span class="s">&#39;Total: &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">avg_total_time</span><span class="p">)</span>  <span class="o">+</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">round</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">less_than_1000_count</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">total_time</span><span class="p">))))</span> <span class="o">+</span> <span class="s">&quot;%&lt;=1000&quot;</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">set_xticklabels</span><span class="p">(</span><span class="n">line_index</span><span class="p">,</span> <span class="n">rotation</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="s">&quot;small&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">&quot;sample&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">&quot;time&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fig</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span> <span class="o">=</span> <span class="s">&quot;upper right&quot;</span><span class="p">,</span> <span class="n">prop</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;size&quot;</span><span class="p">:</span> <span class="mi">8</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果如图：</p>

<p><img src="http://blog.lessfun.com/images/2017/05/numpy_example.png" alt="numpy_example" /></p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2017/05/11/use-python-to-handle-csv-file/'>http://blog.lessfun.com/blog/2017/05/11/use-python-to-handle-csv-file/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App 本地化的自动翻译脚本]]></title>
    <link href="http://blog.lessfun.com/blog/2016/12/26/ios-app-strings-translator/"/>
    <updated>2016-12-26T18:00:03+08:00</updated>
    <id>http://blog.lessfun.com/blog/2016/12/26/ios-app-strings-translator</id>
    <content type="html"><![CDATA[<p>写 App 的激情与动力，往往在于核心功能的实现，至于那些 UI 细节的微调、多国家的语言文件，岂是尔等大牛需要做的事？</p>

<p>但是，一款出色的产品，往往不只有出色的核心功能，它的产品细节、用户体验也是趋于完善近乎完美的。大牛的你，虽然不想干这些脏活累活，然而，牛在江湖身不由己，你有三个选择：</p>

<ol>
<li>咬咬牙，自己上。</li>
<li>招个临时工 or 实习生，让他干。</li>
<li>写个脚本，自动完成。</li>
</ol>


<p>现在要说的 App 本地化，就是一个典型的又粗又脏又累的活：</p>

<ol>
<li>没有任何技术含量。</li>
<li>需要大量重复劳动。</li>
<li>每个 App 都需要做一遍。</li>
</ol>


<p>身为一名程序员，看到上述三个烦死人的特征，除了累觉不爱之外，还有没有别的什么想法呢？</p>

<!--more-->


<p>利用脚本自动完成啊！脚本天生就是干这些事的。</p>

<p>脚本已经写好了：<a href="https://github.com/tinymind/AppStringsTranslator">AppStringsTranslator</a></p>

<h3>原理</h3>

<ol>
<li>扫描 App 的 <code>xx.strings</code> 文件，遍历每一行。</li>
<li>如果该行格式为 <code>"xx" = "xxx";</code>，则把等号左右的<code>key</code> 和 <code>value</code>提取出来，保存到 <code>keys</code> 和 <code>values</code> 两个数组中。</li>
<li>如果该行不是 key/value 格式，则把整行加到 <code>keys</code>，而往 <code>values</code> 里加一个空字符串。</li>
<li>利用百度翻译的 API，翻译 <code>values</code> 里的每个元素。</li>
<li>把 <code>keys</code> 和翻译结果按照同样的格式写入到新的 <code>xx_toLang.strings</code> 文件。</li>
</ol>


<p>第 3 步的目的是，保留原来的语言文件里的注释和空行。</p>

<h3>用法</h3>

<ol>
<li>修改 <code>AppStringsTranslator.py</code>，填上你自己的百度 <code>AppKey/SecretKey</code>，见<a href="http://api.fanyi.baidu.com/api/trans/product/desktop?req=developer">这里</a>。</li>
<li>在终端执行脚本，eg: <code>python AppStringsTranslator.py</code>。</li>
<li>输入语言文件名称，eg: <code>Localizable.strings</code>。</li>
<li>输入源文件的语言简写，eg: <code>zh</code>。</li>
<li>输入需要翻译成的语言列表，以空格区分。eg: <code>en cht jp kor</code>。</li>
<li>等待完成。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; LSiMac:AppStringsTranslator <span class="nv">$ </span>python AppStringsTranslator.py
</span><span class='line'>&gt;&gt; Enter a fileName: Localizable.strings
</span><span class='line'>&gt;&gt; Supports languages:
</span><span class='line'><span class="o">[</span><span class="s1">&#39;auto&#39;</span>, <span class="s1">&#39;zh&#39;</span>, <span class="s1">&#39;en&#39;</span>, <span class="s1">&#39;yue&#39;</span>, <span class="s1">&#39;wyw&#39;</span>, <span class="s1">&#39;jp&#39;</span>, <span class="s1">&#39;kor&#39;</span>, <span class="s1">&#39;fra&#39;</span>, <span class="s1">&#39;spa&#39;</span>, <span class="s1">&#39;th&#39;</span>, <span class="s1">&#39;ara&#39;</span>, <span class="s1">&#39;ru&#39;</span>, <span class="s1">&#39;pt&#39;</span>, <span class="s1">&#39;de&#39;</span>, <span class="s1">&#39;it&#39;</span>, <span class="s1">&#39;el&#39;</span>, <span class="s1">&#39;nl&#39;</span>, <span class="s1">&#39;pl&#39;</span>, <span class="s1">&#39;bul&#39;</span>, <span class="s1">&#39;est&#39;</span>, <span class="s1">&#39;dan&#39;</span>, <span class="s1">&#39;fin&#39;</span>, <span class="s1">&#39;cs&#39;</span>, <span class="s1">&#39;rom&#39;</span>, <span class="s1">&#39;slo&#39;</span>, <span class="s1">&#39;swe&#39;</span>, <span class="s1">&#39;hu&#39;</span>, <span class="s1">&#39;cht&#39;</span>, <span class="s1">&#39;vie&#39;</span><span class="o">]</span>
</span><span class='line'>&gt;&gt; Enter from language: zh
</span><span class='line'>&gt;&gt; Enter to language list, split by space: cht en jp kor
</span><span class='line'>&gt;&gt; Start
</span><span class='line'>Translating cht to fileName: Localizable_cht.strings
</span><span class='line'>Finished translating to cht
</span><span class='line'>Translating en to fileName: Localizable_en.strings
</span><span class='line'>Finished translating to en
</span><span class='line'>Translating jp to fileName: Localizable_jp.strings
</span><span class='line'>Finished translating to jp
</span><span class='line'>Translating kor to fileName: Localizable_kor.strings
</span><span class='line'>Finished translating to kor
</span><span class='line'>All <span class="k">done</span>!
</span></code></pre></td></tr></table></div></figure>


<h3>支持的语言</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>语言简写               名称
</span><span class='line'>auto                自动检测<span class="o">(</span>可以作为源语言，但不能是目标语言<span class="o">)</span>
</span><span class='line'>zh                  中文
</span><span class='line'>en                  英语
</span><span class='line'>yue                 粤语
</span><span class='line'>wyw                 文言文
</span><span class='line'>jp                  日语
</span><span class='line'>kor                 韩语
</span><span class='line'>fra                 法语
</span><span class='line'>spa                 西班牙语
</span><span class='line'>th                  泰语
</span><span class='line'>ara                 阿拉伯语
</span><span class='line'>ru                  俄语
</span><span class='line'>pt                  葡萄牙语
</span><span class='line'>de                  德语
</span><span class='line'>it                  意大利语
</span><span class='line'>el                  希腊语
</span><span class='line'>nl                  荷兰语
</span><span class='line'>pl                  波兰语
</span><span class='line'>bul                 保加利亚语
</span><span class='line'>est                 爱沙尼亚语
</span><span class='line'>dan                 丹麦语
</span><span class='line'>fin                 芬兰语
</span><span class='line'>cs                  捷克语
</span><span class='line'>rom                 罗马尼亚语
</span><span class='line'>slo                 斯洛文尼亚语
</span><span class='line'>swe                 瑞典语
</span><span class='line'>hu                  匈牙利语
</span><span class='line'>cht                 繁体中文
</span><span class='line'>vie                 越南语
</span></code></pre></td></tr></table></div></figure>


<h3>无法脚本化的情况</h3>

<p>有时候，我们会在语言文件里添加一些特殊的字符，比如 <code>%@ %d %lld</code> 之类的格式化占位符，这些字符是不需要被翻译的。但是利用脚本，是没有办法智能识别哪些字符需要保留，以及保留到哪里的，这种情况还是需要开发者自己去处理。</p>

<h3>参考和说明</h3>

<ol>
<li><a href="http://api.fanyi.baidu.com/api/trans/product/apidoc">百度翻译 API</a></li>
<li>百度翻译不是完全免费的，不过每个月有一定的免费调用次数，还是完全可以满足 App 开发这种小数据量的。</li>
<li>可以修改脚本，改变翻译后的文件存放方式。<blockquote class='post_original_block'>
         原文作者：
         <a href='http://blog.lessfun.com'>lslin</a><br/>
         原文链接：
         <a href='http://blog.lessfun.com/blog/2016/12/26/ios-app-strings-translator/'><a href="http://blog.lessfun.com/blog/2016/12/26/ios-app-strings-translator/">http://blog.lessfun.com/blog/2016/12/26/ios-app-strings-translator/</a></a><br/>
         版权声明：自由转载-非商用-非衍生-保持署名 |
         <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
         </blockquote></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为 Sublime Text 自定义 Log 语法高亮]]></title>
    <link href="http://blog.lessfun.com/blog/2016/10/28/make-a-custom-syntax-highlighting-for-sublime-text/"/>
    <updated>2016-10-28T15:53:44+08:00</updated>
    <id>http://blog.lessfun.com/blog/2016/10/28/make-a-custom-syntax-highlighting-for-sublime-text</id>
    <content type="html"><![CDATA[<p>近日，代码写得越来越少，大部分时间都用来查 Bug 了，而查 Bug 的大部分时间里，是在看崩溃报告和用户日志。</p>

<p>有过看 Log 经历的人都知道，Log 到看时方恨少，对着十多兆的日志文件，满屏幕的文本信息，却找不到自己想要的那个关键点的记录，这是极其让人崩溃的。于是，看代码和写代码的时候都会下意识地在关键路径都打上 Log，宁可错打一千，不可放过一条。几次下来， Log 文件越来越大，看 Log 越来越累……如果逼不得已非得要大海捞针，那就让捞针这个过程更方便一些吧，这时候，关键字过滤以及高亮的需求随之而来。</p>

<p>软件界的神器之所以能成为神器，除了其本身功能突出之外，很大部分原因是它支持各种定制，能方便地添加插件或扩展，比如 Vim，Alfred，Chrome，等等。Sublime Text 也毫不例外地支持插件和自定义。本文要说的就是如何为 Log 文本文件添加自定义的语法高亮。</p>

<!--more-->


<h2>1. 创建自定义语法高亮文件</h2>

<h3>1.1 安装 Package Control</h3>

<p><a href="https://packagecontrol.io/installation">Package Control</a> 是 Sublime Text 的插件管理器，其本身也是一个插件，通过 Package Control 能很方便地查找、安装、卸载插件。</p>

<h3>1.2 安装 PackageDev 插件</h3>

<p><a href="https://github.com/SublimeText/PackageDev">PackageDev</a> 是一款快速创建 Sublime Text 的语法定义、片段等扩展文件的插件。</p>

<h3>1.3 创建语法文件</h3>

<p>安装 PackageDev 后，通过<code>Tools | Packages | Package Development | New Syntax Definition</code> 菜单，创建一个新的语法文件。</p>

<p>这时候，会自动新建一个空模板：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># [PackageDev] target_format: plist, ext: tmLanguage</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Syntax Name</span>
</span><span class='line'><span class="l-Scalar-Plain">scopeName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">source.syntax_name</span>
</span><span class='line'><span class="l-Scalar-Plain">fileTypes</span><span class="p-Indicator">:</span> <span class="p-Indicator">[]</span>
</span><span class='line'><span class="l-Scalar-Plain">uuid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">516bc7ff-03be-4474-a398-b83e20204594</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">patterns</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.4 定义语法高亮规则</h3>

<p>包括设置语法名、后缀名、需要匹配的关键字、使用什么语法高亮关键字，等等。如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># [PackageDev] target_format: plist, ext: tmLanguage</span>
</span><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">MyLog</span>
</span><span class='line'><span class="l-Scalar-Plain">scopeName</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">text.mylog</span>
</span><span class='line'><span class="l-Scalar-Plain">fileTypes</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">mylog</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="l-Scalar-Plain">uuid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">516bc7ff-03be-4474-a398-b83e20204594</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">patterns</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">comment</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Keyword</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">keyword.other.mylog</span>
</span><span class='line'>  <span class="l-Scalar-Plain">match</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">\b(INFO|Info|WARN|Warn|ERROR|Error)\b</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">comment</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Number</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">constant.numeric.mylog</span>
</span><span class='line'>  <span class="l-Scalar-Plain">match</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">\b((\d*)|(0x[0-9a-zA-Z]*))\b</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">comment</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Funtion</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">support.function.mylog</span>
</span><span class='line'>  <span class="l-Scalar-Plain">match</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">([-+])(\[.*?\])</span>
</span><span class='line'>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">comment</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Crash Error</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">string.regexp.log</span>
</span><span class='line'>  <span class="l-Scalar-Plain">match</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">(\b(CRASH|Crash|crash|WARNING|Warning|warning|FAIL|Fail|fail)\b.*)</span>
</span><span class='line'><span class="nn">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>点击保存，在 <code>Packages/User/</code> 目录下创建一个 <code>MyLog</code> 文件夹，文件名改为 <code>MyLog.YAML-tmLanguage</code>，保存到 <code>MyLog</code> 文件中。</p>

<p>语法的定义可以参考<a href="http://docs.sublimetext.info/en/latest/reference/syntaxdefs.html">官方文档</a>。</p>

<p>匹配的关键字的 <code>name</code> 的定义，见<a href="https://manual.macromates.com/en/language_grammars#naming_conventions">这里</a>。</p>

<h3>1.5 保存为 tmLanguage 文件</h3>

<p>上面的 YAML 文件提高了可读性，但为了让 Sublime Text 能识别，还需要转换为 tmLanguage 文件。</p>

<p>编辑完并保存 YAML 后，点击 <code>Tools | Build System | Convert to</code> ，或者按 <code>Ctrl(CMD) + B</code> 把 YAML 文件转为 <code>tmLanguage</code>，这时应该会自动保存到 Sublime Text 的配置文件夹中 <code>Packages/User/MyLog/MyLog.tmLanguage</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple Computer//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>fileTypes<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;string&gt;</span>mylog<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>MyLog<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>patterns<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;array&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>comment<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>Keyword<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>match<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>\b(INFO|Info|WARN|Warn|ERROR|Error)\b<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>keyword.other.mylog<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>comment<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>Number<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>match<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>\b((\d*)|(0x[0-9a-zA-Z]*))\b<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>constant.numeric.mylog<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>comment<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>Funtion<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>match<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>([-+])(\[.*?\])<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>support.function.mylog<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>      <span class="nt">&lt;dict&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>comment<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>Crash Error<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>match<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>(\b(CRASH|Crash|crash|WARNING|Warning|warning|FAIL|Fail|fail)\b.*)<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>          <span class="nt">&lt;key&gt;</span>name<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>          <span class="nt">&lt;string&gt;</span>string.regexp.log<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/dict&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/array&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>scopeName<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>text.mylog<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>  <span class="nt">&lt;key&gt;</span>uuid<span class="nt">&lt;/key&gt;</span>
</span><span class='line'>  <span class="nt">&lt;string&gt;</span>516bc7ff-03be-4474-a398-b83e20204594<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>此后，使用 Sublime Text 打开一个后缀名 <code>.mylog</code> 的文件，或者打开 <code>Plain Text</code> 类型的文件然后设置 <code>Syntax</code> 为 <code>MyLog</code> 类型，就可以看到高亮的效果了。如图：</p>

<p><img src="http://blog.lessfun.com/images/2016/10/sublime_text_custom_syntax_highlighting.gif" alt="sublime text custom syntax highlighting" /></p>

<h2>2. 配合其他插件，效果更佳</h2>

<h3>2.1 Filter Lines</h3>

<p><a href="https://packagecontrol.io/packages/Filter%20Lines">Filter Lines</a> 插件能方便地过滤特定字符串到一个新的 Tab 中，支持全字匹配、正则匹配。相对于全文搜索而已，把匹配结果输出到一个全新的文件中，能更有助于查看关键信息。</p>

<h3>2.2 Log Hihhlight</h3>

<p><a href="https://packagecontrol.io/packages/Log%20Highlight">Log Highlight</a> 是专门处理 Log 高亮的插件，原理与自定义语法高亮不同。这个插件也可以自定义语法高亮，同时可定制性与功能也更强大，比如支持跳转、为警告或错误添加书签，等等，有兴趣可以使用一下。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2016/10/28/make-a-custom-syntax-highlighting-for-sublime-text/'>http://blog.lessfun.com/blog/2016/10/28/make-a-custom-syntax-highlighting-for-sublime-text/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 10 ReplayKit Live 与 Broadcast UI/Upload Extension]]></title>
    <link href="http://blog.lessfun.com/blog/2016/09/21/ios-10-replaykit-live-and-broadcast-extension/"/>
    <updated>2016-09-21T11:47:55+08:00</updated>
    <id>http://blog.lessfun.com/blog/2016/09/21/ios-10-replaykit-live-and-broadcast-extension</id>
    <content type="html"><![CDATA[<p>在 iOS 8 及以前，第三方 App 如果想要全局录屏，只能使用私有 API，详见<a href="http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background/">非越狱后台录屏</a>。</p>

<p>升级到 iOS 9 后，官方新增了 ReplayKit，并且禁用了录屏的私有 API。ReplayKit 并不算是完美的录屏方案，如果想要把梦幻西游的游戏过程录制下来，需要梦幻西游这个应用本身添加 ReplayKit 的支持，然后再把录制的视频分享出去。对于不支持 ReplayKit 的游戏，怎么录制？答案是，没有办法。试想，又有多少个游戏会内置 ReplayKit 呢？</p>

<p>iOS 10 在 iOS 9 的 ReplayKit 保存录屏视频的基础上，增加了视频流实时直播功能（streaming live），官方介绍见 <a href="http://devstreaming.apple.com/videos/wwdc/2016/601nsio90cd7ylwimk9/601/601_go_live_with_replaykit.pdf">Go Live with ReplayKit</a>。下面详细说说这个流程。</p>

<!--more-->


<h2>1. ReplayKit Live 概述</h2>

<p>从录制到直播，整体流程如下：</p>

<ol>
<li>被录制端需引入 ReplayKit，发起广播请求。</li>
<li>广播端需要实现 Broadcast UI 和 Broadcast Upload 两个 <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1">App Extension</a>，以便出现在被录制端的 App 列表。</li>
<li>被录制端选定广播端 App 后，开始直播。</li>
</ol>


<p>其中，<code>被录制端</code>可以是任意一个 App，如梦幻西游，<code>广播端</code>是支持 ReplayKit Live 的直播平台，如虎牙直播。</p>

<p><img src="http://blog.lessfun.com/images/2016/09/replaykit_workflow.png" alt="ReplayKit WorkFlow" /></p>

<h2>2. 被录制端（游戏或应用）的实现</h2>

<p>被录制端需要在原有功能的基础上，增加一个唤起广播的入口。代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;ReplayKit/ReplayKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">onLiveButtonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">RPBroadcastActivityViewController</span> <span class="nl">loadBroadcastActivityViewControllerWithHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">RPBroadcastActivityViewController</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">broadcastActivityViewController</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">broadcastAVC</span> <span class="o">=</span> <span class="n">broadcastActivityViewController</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">broadcastAVC</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">presentViewController:</span><span class="n">self</span><span class="p">.</span><span class="n">broadcastAVC</span> <span class="nl">animated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - RPBroadcastActivityViewControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">broadcastActivityViewController:</span><span class="p">(</span><span class="n">RPBroadcastActivityViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">broadcastActivityViewController</span> <span class="nf">didFinishWithBroadcastController:</span><span class="p">(</span><span class="n">nullable</span> <span class="n">RPBroadcastController</span> <span class="o">*</span><span class="p">)</span><span class="nv">broadcastController</span> <span class="nf">error:</span><span class="p">(</span><span class="n">nullable</span> <span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">broadcastAVC</span> <span class="nl">dismissViewControllerAnimated:</span><span class="n">YES</span> <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">broadcastController</span> <span class="o">=</span> <span class="n">broadcastController</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">broadcastController</span> <span class="nl">startBroadcastWithHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span> <span class="n">_Nullable</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">liveButton</span><span class="p">.</span><span class="n">selected</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;startBroadcastWithHandler error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如下图的右上角就是开始广播的入口按钮。</p>

<p><img src="http://blog.lessfun.com/images/2016/09/replaykit_demo_init.png" alt="ReplayKit Demo Init" /></p>

<p>如果手机内没有支持广播的 App，会弹框提示到 App Store 查找一个。</p>

<p><img src="http://blog.lessfun.com/images/2016/09/replaykit_demo_choose.png" alt="ReplayKit Demo Choose" /></p>

<p>如果已经安装支持广播的 App，则会列出，点击后会打开广播端的 Broadcast UI。</p>

<p><img src="http://blog.lessfun.com/images/2016/09/replaykit_demo_list.png" alt="ReplayKit Demo List" /></p>

<p>下面要说的就是怎么实现一个支持广播的 App。</p>

<h2>3. 广播端（直播平台）的实现</h2>

<p>很多直播 App 本身已经支持通过摄像头进行视频流上传、直播，新增对 ReplayKit Live 的支持，只需要创建两个扩展的 target，分别是 Broadcast UI Extension 和 Broadcast Upload Extension，在XCode 8 中内置了这两个模板。</p>

<h3>3.1 Broadcast UI</h3>

<p>Broadcast UI 负责广播前的一些初始化工作，比如，让用户填写直播平台的账号、密码、直播标题。从被录制端唤起广播请求并选定广播平台后，会显示 Broadcast UI 界面。</p>

<p>核心代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;ReplayKit/ReplayKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">BroadcastViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">onCancelButtonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">userDidCancelSetup</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nl">onOKButtonPressed:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">accountTextField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="o">||</span> <span class="n">self</span><span class="p">.</span><span class="n">passwordTextField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="o">||</span> <span class="n">self</span><span class="p">.</span><span class="n">channelIDTextField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">userDidFinishSetup</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - Private</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Called when the user has finished interacting with the view controller and a broadcast stream can start</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">userDidFinishSetup</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;userDidFinishSetup&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Broadcast url that will be returned to the application</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">broadcastURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;http://broadcastURL_example/stream1&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Service specific broadcast data example which will be supplied to the process extension during broadcast</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">setupInfo</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;account&quot;</span> <span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">accountTextField</span><span class="p">.</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>                                <span class="s">@&quot;password&quot;</span> <span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">passwordTextField</span><span class="p">.</span><span class="n">text</span><span class="p">,</span>
</span><span class='line'>                                <span class="s">@&quot;channelID&quot;</span> <span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">channelIDTextField</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">integerValue</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set broadcast settings</span>
</span><span class='line'>    <span class="n">RPBroadcastConfiguration</span> <span class="o">*</span><span class="n">broadcastConfig</span> <span class="o">=</span> <span class="p">[[</span><span class="n">RPBroadcastConfiguration</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">broadcastConfig</span><span class="p">.</span><span class="n">clipDuration</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">;</span> <span class="c1">// deliver movie clips every 5 seconds</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Tell ReplayKit that the extension is finished setting up and can begin broadcasting</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">extensionContext</span> <span class="nl">completeRequestWithBroadcastURL:</span><span class="n">broadcastURL</span> <span class="nl">broadcastConfiguration:</span><span class="n">broadcastConfig</span> <span class="nl">setupInfo:</span><span class="n">setupInfo</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">userDidCancelSetup</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Tell ReplayKit that the extension was cancelled by the user</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">extensionContext</span> <span class="nl">cancelRequestWithError:</span><span class="p">[</span><span class="n">NSError</span> <span class="nl">errorWithDomain:</span><span class="s">@&quot;YourAppDomain&quot;</span> <span class="nl">code:</span><span class="o">-</span><span class="mi">1</span>     <span class="nl">userInfo:</span><span class="nb">nil</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果：</p>

<p><img src="http://blog.lessfun.com/images/2016/09/replaykit_demo_broadcast_ui.png" alt="ReplayKit Demo List" /></p>

<p>如果用户点击 <code>OK</code>，则会回调到第二部分中的<code>RPBroadcastActivityViewControllerDelegate</code>，开始直播会调用 Broadcast Upload 扩展。</p>

<h3>3.2 Broadcast Upload</h3>

<p>第二部分调用<code>startBroadcastWithHandler</code>，会跑到<code>Broadcast Upload</code>，本扩展的作用是接收并处理 Broadcast UI 传过来的用户信息，以及处理 RPBroadcastController 传过来的音视频流数据，如编码、上传。</p>

<p>核心代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;ReplayKit/ReplayKit.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">SampleHandler</span> : <span class="nc">RPBroadcastSampleHandler</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//  To handle samples with a subclass of RPBroadcastSampleHandler set the following in the extension&#39;s Info.plist file:</span>
</span><span class='line'><span class="c1">//  - RPBroadcastProcessMode should be set to RPBroadcastProcessModeSampleBuffer</span>
</span><span class='line'><span class="c1">//  - NSExtensionPrincipalClass should be set to this class</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SampleHandler</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">broadcastStartedWithSetupInfo:</span><span class="p">(</span><span class="n">NSDictionary</span><span class="o">&lt;</span><span class="n">NSString</span> <span class="o">*</span><span class="p">,</span><span class="n">NSObject</span> <span class="o">*&gt;</span> <span class="o">*</span><span class="p">)</span><span class="nv">setupInfo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// User has requested to start the broadcast. Setup info from the UI extension will be supplied.</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;broadcastStartedWithSetupInfo: %@&quot;</span><span class="p">,</span> <span class="n">setupInfo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">ReplayKitUploader</span> <span class="n">sharedObject</span><span class="p">]</span> <span class="nl">setupWithInfo:</span><span class="n">setupInfo</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">broadcastPaused</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// User has requested to pause the broadcast. Samples will stop being delivered.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">broadcastResumed</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// User has requested to resume the broadcast. Samples delivery will resume.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">broadcastFinished</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// User has requested to finish the broadcast.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">processSampleBuffer:</span><span class="p">(</span><span class="n">CMSampleBufferRef</span><span class="p">)</span><span class="nv">sampleBuffer</span> <span class="nf">withType:</span><span class="p">(</span><span class="n">RPSampleBufferType</span><span class="p">)</span><span class="nv">sampleBufferType</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">ReplayKitUploader</span> <span class="n">sharedObject</span><span class="p">]</span> <span class="nl">handleSampleBuffer:</span><span class="n">sampleBuffer</span> <span class="nl">withType:</span><span class="n">sampleBufferType</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.3 注意事项</h3>

<p><code>ReplayKitUploader</code> 是自定义的一个类，使用了单例模式，负责广播服务的登录、编码、上传功能。使用单例，而不是直接在 SampleHandler 里面处理，是因为 SampleHandler 并不是 Broadcast Upload Extension 里的唯一一个实例，实际上，Upload Extension 会不断地创建很多个 SampleHandler 来处理 CMSampleBufferRef，而我们为了保存一些内部状态，必须使用一个固定的类实例来实现。</p>

<h2>4. App 与 Extension 的代码共用</h2>

<p>iOS 10 新增了很多种 Extension，包括本文提到的两种 Broadcast Extension。主 App 与 Extension 属于不同的两个进程，代码逻辑也是分离的，而实际情况中，主 App 与 Extension 往往会包含相同的逻辑，需要共用代码。</p>

<p>主 App 与 Extension 属于两个不同的 target，共用代码，有以下几种方式：</p>

<ul>
<li>一份代码创建两个副本，分别加到 App 和 Extension 两个 target 中。这种方法简单粗暴而有效，只是，如果需要改动逻辑，则需要改两份代码，想象一下，假如这种改动很频繁，世界上又有几个程序员能受得了？</li>
<li>抽离公共代码，放到独立的 framework，然后两个 target 都依赖该 framework，这是标准而方便的做法。</li>
<li>使用 CocoaPods，只需要在 Podfile 中分别写两个 target 所依赖的 pod 即可，最简洁。</li>
</ul>


<h2>5. 结论</h2>

<p>在 iOS 环境中，想要共享设备屏幕，无论是录播还是直播，都注定了没有直接方便的方案。ReplayKit Live 是目前最标准的做法，只是，使用 ReplayKit 有两个前提，应用本身支持 ReplayKit，直播平台支持 Broadcast Extension。这两个前提，后者比较容易实现，而前者，就需要靠各个应用开发商的自觉了。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2016/09/21/ios-10-replaykit-live-and-broadcast-extension/'>http://blog.lessfun.com/blog/2016/09/21/ios-10-replaykit-live-and-broadcast-extension/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更可靠和高精度的 iOS 定时器]]></title>
    <link href="http://blog.lessfun.com/blog/2016/08/05/reliable-timer-in-ios/"/>
    <updated>2016-08-05T18:23:26+08:00</updated>
    <id>http://blog.lessfun.com/blog/2016/08/05/reliable-timer-in-ios</id>
    <content type="html"><![CDATA[<p>定时器一般用于延迟一段时间执行特定的代码，必要的话按照指定的频率重复执行。iOS 中延时执行有多种方式，常用的有：</p>

<ul>
<li>NSTimer</li>
<li>NSObject 的 <code>(void)performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay;</code></li>
<li>CADisplayLink</li>
<li>GCD 的 <code>dispatch_after</code></li>
<li>GCD 的 <code>dispatch_source_t</code></li>
</ul>


<p>每种方法创建的定时器，其可靠性与最小精度都有不同。<code>可靠性</code>指是否严格按照设定的时间间隔按时执行，<code>最小精度</code>指支持的最小时间间隔是多少。</p>

<!--more-->


<h2>1. NSRunLoop</h2>

<p>谈到定时器，首先需要了解的一个概念是 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSRunLoop_Class/">NSRunLoop</a>。NSRunLoop 是消息处理的一种机制，类似于 Windows 中的<a href="http://winprog.org/tutorial/message_loop.html">消息循环</a>，有个更通用的叫法是 <a href="https://en.wikipedia.org/wiki/Event_loop">Event Loop</a>。</p>

<p>其原理很简单，启动一个循环，无限地重复<code>接受消息-&gt;等待消息-&gt;处理消息</code>这个过程，直到退出。伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="o">*</span><span class="n">msg</span> <span class="o">=</span> <span class="n">getMessage</span><span class="p">();</span>
</span><span class='line'>        <span class="n">processMessage</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">msg</span> <span class="o">!=</span> <span class="n">quit</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个线程内部都会有一个 RunLoop，启动 RunLoop 之后，就能够让线程在没有消息时休眠，在有消息时被唤醒并处理消息，避免资源长期被占用。</p>

<p>在 iOS 中，NSThead 和 NSRunLoop 是一一对应的，但创建线程的时候不会默认创建 NSRunLoop，实际上也不允许自己创建 NSRunLoop，在线程内第一次调用<code>[NSRunLoop currentRunLoop]</code>的时候才会自动创建。</p>

<h3>1.1 NSRunLoop 处理的输入源(input sources)：</h3>

<ul>
<li>鼠标、键盘事件。</li>
<li>NSPort 对象。</li>
<li>NSConnection 对象。</li>
</ul>


<p>NSRunLoop 也处理 NSTimer 事件，但 NSTimer 并不属于输入源的一种。</p>

<h3>1.2 苹果使用 NSRunLoop 实现的功能：</h3>

<ul>
<li>硬件操作，如触摸、按键、摇晃等。</li>
<li>手势操作。</li>
<li>界面刷新，如更新了 UI 的 frame，或手动调 setNeedsLayout/setNeedsDisplay。</li>
<li>定时器。包括 NSTimer、CADisplayLink、PerformSelecter、GCD。</li>
<li>网络请求。</li>
</ul>


<p><a href="http://blog.ibireme.com/2015/05/18/runloop/">深入了解 RunLoop</a>有更深入完整的介绍。</p>

<h2>2. NSTimer</h2>

<p>最常用，能满足对间隔要求不严格、对精确度不敏感的需求。</p>

<h3>2.1 使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startNSTimer</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval:</span><span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span> <span class="nl">target:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">onNSTimerTimeout:</span><span class="p">)</span> <span class="nl">userInfo:</span><span class="nb">nil</span> <span class="nl">repeats:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onNSTimerTimeout:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;onNSTimerTimeout&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.2 可靠性</h3>

<p>不可靠，其所在的 RunLoop 会定时检测是否可以触发 NSTimer 的事件，但由于 iOS 有多个 RunLoop 的运行模式，如果被切到另一个 run loop，NSTimer 就不会被触发。每个 RunLoop 的循环间隔也无法保证，当某个任务耗时比较久，RunLoop 的下一个消息处理就只能顺延，导致 NSTimer 的时间已经到达，但 Runloop 却无法及时触发 NSTimer，导致该时间点的回调被错过。</p>

<p>苹果官方文档：</p>

<blockquote><p>A timer is not a real-time mechanism; it fires only when one of the run loop modes to which the timer has been added is running and able to check if the timer’s firing time has passed.
If a timer’s firing time occurs during a long callout or while the run loop is in a mode that is not monitoring the timer, the timer does not fire until the next time the run loop checks the timer.</p></blockquote>

<h3>2.3 最小精度</h3>

<p>理论上最小精度为 0.1 毫秒。不过由于受 Runloop 的影响，会有 50 ~ 100 毫秒的误差，所以，实际精度可以认为是 0.1 秒。</p>

<p>苹果官方文档：</p>

<blockquote><p>Because of the various input sources a typical run loop manages, the effective resolution of the time interval for a timer is limited to on the order of 50-100 milliseconds.</p></blockquote>

<h3>2.4 实测结果</h3>

<p>间隔 0.1 秒，调用12次。其中倒数第二次调用前会执行一个比较耗时的运算任务。</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startNSTimer</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">setupConfig</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">runNSTimerIfNeeded</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;NSTimer start with interval: %.3f ms, start time: %@, total count: %d&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="nl">timeStringWithTime:</span><span class="n">self</span><span class="p">.</span><span class="n">startTime</span><span class="p">],</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">maxCount</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">runNSTimerIfNeeded</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="nl">scheduledTimerWithTimeInterval:</span><span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span>
</span><span class='line'>                                     <span class="nl">target:</span><span class="n">self</span>
</span><span class='line'>                                   <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">onNSTimerTimeout:</span><span class="p">)</span>
</span><span class='line'>                                   <span class="nl">userInfo:</span><span class="nb">nil</span>
</span><span class='line'>                                    <span class="nl">repeats:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">startTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onNSTimerTimeout:</span><span class="p">(</span><span class="n">NSTimer</span> <span class="o">*</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d, %@&quot;</span><span class="p">,</span> <span class="o">++</span> <span class="n">self</span><span class="p">.</span><span class="n">curCount</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">diffTimeStringFromStart</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="n">invalidate</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curCount</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">maxCount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">runNSTimerIfNeeded</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">runBusyTaskIfNeeded</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>2016-08-29 11:32:40.302 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> NSTimer start with interval: 100.000 ms, start <span class="nb">time</span>: 1472441560302.602 ms, total count: 12
</span><span class='line'>2016-08-29 11:32:40.403 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 1, interval: 101.045 ms, discrepancy: 1.045 ms
</span><span class='line'>2016-08-29 11:32:40.505 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 2, interval: 100.890 ms, discrepancy: 0.890 ms
</span><span class='line'>2016-08-29 11:32:40.606 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 3, interval: 101.087 ms, discrepancy: 1.087 ms
</span><span class='line'>2016-08-29 11:32:40.707 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 4, interval: 101.038 ms, discrepancy: 1.038 ms
</span><span class='line'>2016-08-29 11:32:40.809 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 5, interval: 101.061 ms, discrepancy: 1.061 ms
</span><span class='line'>2016-08-29 11:32:40.910 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 6, interval: 101.069 ms, discrepancy: 1.069 ms
</span><span class='line'>2016-08-29 11:32:41.012 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 7, interval: 101.031 ms, discrepancy: 1.031 ms
</span><span class='line'>2016-08-29 11:32:41.113 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 8, interval: 101.035 ms, discrepancy: 1.035 ms
</span><span class='line'>2016-08-29 11:32:41.214 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 9, interval: 100.890 ms, discrepancy: 0.890 ms
</span><span class='line'>2016-08-29 11:32:41.315 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 10, interval: 101.042 ms, discrepancy: 1.042 ms
</span><span class='line'>2016-08-29 11:32:41.315 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> start busy task
</span><span class='line'>2016-08-29 11:32:41.970 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> finish busy task
</span><span class='line'>2016-08-29 11:32:41.970 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 11, interval: 654.319 ms, discrepancy: 554.319 ms
</span><span class='line'>2016-08-29 11:32:42.071 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 12, interval: 100.906 ms, discrepancy: 0.906 ms
</span></code></pre></td></tr></table></div></figure>


<p>可以看到偏差在 1 ~ 2 毫秒左右。在第 10 次之后执行了一个较耗时的任务，导致第 11 次比预期延迟了 0.5 秒执行。后面的回调仍然按照预设的延时执行。</p>

<h2>3. performSelector:withObject:afterDelay:</h2>

<p>这是 NSObject 对 NSTimer 封装后提供的一个比较简单的延时方法，内部用的也是 NSTimer，所以，同上。</p>

<h2>4. CADisplayLink</h2>

<p>CADisplayLink 也可以用作定时器，其调用间隔与屏幕刷新频率一致，也就是每秒 60 帧，间隔 16.67 ms。与 NSTimer 类似，如果在两次屏幕刷新之间执行了一个比较耗时的任务，其中的某一帧就会被跳过，造成 UI 卡顿。</p>

<h3>4.1 使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">runCADisplayLinkTimer</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CADisplayLink</span> <span class="o">*</span><span class="n">displayLink</span> <span class="o">=</span> <span class="p">[</span><span class="n">CADisplayLink</span> <span class="nl">displayLinkWithTarget:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">onCADisplayLinkTimeout</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">displayLink</span><span class="p">.</span><span class="n">frameInterval</span> <span class="o">=</span> <span class="mf">0.0167</span><span class="p">;</span> <span class="c1">// S</span>
</span><span class='line'>    <span class="p">[</span><span class="n">displayLink</span> <span class="nl">addToRunLoop:</span><span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">forMode:</span><span class="n">NSRunLoopCommonModes</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">displayLink</span> <span class="o">=</span> <span class="n">displayLink</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onCADisplayLinkTimeout</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;onCADisplayLinkTimeout&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.2 可靠性</h3>

<p>如果执行的任务很耗时，也会导致回调被错过，所以并不十分可靠。但是，假如调用者能够确保任务能够在最小时间间隔内执行完成，CADisplayLink 就比较可靠，因为屏幕的刷新频率是固定的。</p>

<h3>4.3 最小精度</h3>

<p>受限于每秒 60 帧的屏幕刷新频率，注定 CADisplayLink 的最小精度为 16.67 毫秒。误差在 1 毫秒左右。</p>

<p>另外需要注意的是，虽然 CADisplayLink 有一个属性 <code>frameInterval</code> 是用于设置定时器的调用间隔，但是这个属性会在第一次回调之后才生效，对于第一次回调，总是会以 1/60 的间隔来执行的。这样会导致的结果是，比如你设置了每 1 秒执行一次某个方法，但是第一次执行的时候，却是在 16.7 毫秒之后，远远小于预设值。</p>

<h3>4.4 实测结果</h3>

<p>间隔 0.1 秒，调用12次。其中倒数第二次调用前会执行一个比较耗时的运算任务。</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startCADisplayLinkTimer</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">setupConfig</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">runCADisplayLinkTimer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;CADisplayLink start with interval: %.3f ms, start time: %@, total count: %d&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="nl">timeStringWithTime:</span><span class="n">self</span><span class="p">.</span><span class="n">startTime</span><span class="p">],</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">maxCount</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">runCADisplayLinkTimer</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CADisplayLink</span> <span class="o">*</span><span class="n">displayLink</span> <span class="o">=</span> <span class="p">[</span><span class="n">CADisplayLink</span> <span class="nl">displayLinkWithTarget:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">onCADisplayLinkTimeout</span><span class="p">)];</span>
</span><span class='line'>    <span class="n">NSInteger</span> <span class="n">frameInterval</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1000</span> <span class="o">/</span> <span class="mf">60.0</span><span class="p">));</span>
</span><span class='line'>    <span class="n">displayLink</span><span class="p">.</span><span class="n">frameInterval</span> <span class="o">=</span> <span class="n">frameInterval</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">displayLink</span> <span class="nl">addToRunLoop:</span><span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">currentRunLoop</span><span class="p">]</span> <span class="nl">forMode:</span><span class="n">NSRunLoopCommonModes</span><span class="p">];</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">displayLink</span> <span class="o">=</span> <span class="n">displayLink</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">startTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onCADisplayLinkTimeout</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d, %@&quot;</span><span class="p">,</span> <span class="o">++</span> <span class="n">self</span><span class="p">.</span><span class="n">curCount</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">diffTimeStringFromStart</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curCount</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">maxCount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">startTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">runBusyTaskIfNeeded</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">displayLink</span> <span class="n">invalidate</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">displayLink</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>2016-08-29 11:33:47.835 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> CADisplayLink start with interval: 100.000 ms, start <span class="nb">time</span>: 1472441627835.872 ms, total count: 12
</span><span class='line'>2016-08-29 11:33:47.845 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 1, interval: 10.061 ms, discrepancy: -89.939 ms
</span><span class='line'>2016-08-29 11:33:47.946 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 2, interval: 99.829 ms, discrepancy: -0.171 ms
</span><span class='line'>2016-08-29 11:33:48.046 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 3, interval: 99.573 ms, discrepancy: -0.427 ms
</span><span class='line'>2016-08-29 11:33:48.145 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 4, interval: 99.427 ms, discrepancy: -0.573 ms
</span><span class='line'>2016-08-29 11:33:48.246 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 5, interval: 99.801 ms, discrepancy: -0.199 ms
</span><span class='line'>2016-08-29 11:33:48.346 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 6, interval: 99.754 ms, discrepancy: -0.246 ms
</span><span class='line'>2016-08-29 11:33:48.446 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 7, interval: 99.791 ms, discrepancy: -0.209 ms
</span><span class='line'>2016-08-29 11:33:48.546 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 8, interval: 99.836 ms, discrepancy: -0.164 ms
</span><span class='line'>2016-08-29 11:33:48.646 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 9, interval: 99.840 ms, discrepancy: -0.160 ms
</span><span class='line'>2016-08-29 11:33:48.746 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 10, interval: 99.811 ms, discrepancy: -0.189 ms
</span><span class='line'>2016-08-29 11:33:48.746 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> start busy task
</span><span class='line'>2016-08-29 11:33:49.399 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> finish busy task
</span><span class='line'>2016-08-29 11:33:49.400 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 11, interval: 653.891 ms, discrepancy: 553.891 ms
</span><span class='line'>2016-08-29 11:33:49.412 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 12, interval: 12.566 ms, discrepancy: -87.434 ms
</span></code></pre></td></tr></table></div></figure>


<p>除了第一次回调，间隔误差比较大之外，别的回调误差在 0.1 ~ 0.5 毫秒之间，精度比 NSTimer 要高。第 11 次回调，受耗时任务影响，延时了 0.5 秒。值得注意的是，第 12 次，延时再次与第一次回调一样，变成了 1/60 秒左右。</p>

<p>换言之，CADisplayLink 在第一次回调以及在耗时任务之后的回调，精度不可控。</p>

<h2>5. GCD <code>dispatch_after</code></h2>

<p>dispatch_after 用起来十分简单，代码紧凑易读，而且可以很轻松地在别的线程分配延时任务，所以使用范围很广泛。</p>

<h3>5.1 使用方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="n">int64_t</span><span class="p">)(</span><span class="n">timeInterval</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">//handle timeout</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5.2 可靠性</h3>

<blockquote><p>Any fire of the timer may be delayed by the system in order to improve power consumption and system performance. The upper limit to the allowable delay may be configured with the &lsquo;leeway&rsquo; argument, the lower limit is under the control of the system.</p></blockquote>

<h3>5.3 最小精度</h3>

<p>延时参数的单位是纳秒。如果有延时，则无法保证。</p>

<h3>5.4 实测结果</h3>

<p>间隔 0.1 秒，调用12次。其中倒数第二次调用前会执行一个比较耗时的运算任务。</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startDispatchAfterTimer</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">setupConfig</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">runDispatchAfterTimerIfNeeded</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;DispatchAfterTimer start with interval: %.3f ms, start time: %@, total count: %d&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="nl">timeStringWithTime:</span><span class="n">self</span><span class="p">.</span><span class="n">startTime</span><span class="p">],</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">maxCount</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">runDispatchAfterTimerIfNeeded</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="n">int64_t</span><span class="p">)(</span><span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">onDispatchAfterTimeout</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">startTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onDispatchAfterTimeout</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d, %@&quot;</span><span class="p">,</span> <span class="o">++</span> <span class="n">self</span><span class="p">.</span><span class="n">curCount</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">diffTimeStringFromStart</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curCount</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">maxCount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">runDispatchAfterTimerIfNeeded</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">runBusyTaskIfNeeded</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>2016-08-29 11:34:09.652 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> DispatchAfterTimer start with interval: 100.000 ms, start <span class="nb">time</span>: 1472441649652.825 ms, total count: 12
</span><span class='line'>2016-08-29 11:34:09.756 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 1, interval: 103.876 ms, discrepancy: 3.876 ms
</span><span class='line'>2016-08-29 11:34:09.866 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 2, interval: 109.686 ms, discrepancy: 9.686 ms
</span><span class='line'>2016-08-29 11:34:09.976 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 3, interval: 109.772 ms, discrepancy: 9.772 ms
</span><span class='line'>2016-08-29 11:34:10.085 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 4, interval: 108.764 ms, discrepancy: 8.764 ms
</span><span class='line'>2016-08-29 11:34:10.195 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 5, interval: 109.057 ms, discrepancy: 9.057 ms
</span><span class='line'>2016-08-29 11:34:10.299 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 6, interval: 104.544 ms, discrepancy: 4.544 ms
</span><span class='line'>2016-08-29 11:34:10.408 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 7, interval: 108.753 ms, discrepancy: 8.753 ms
</span><span class='line'>2016-08-29 11:34:10.516 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 8, interval: 107.597 ms, discrepancy: 7.597 ms
</span><span class='line'>2016-08-29 11:34:10.626 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 9, interval: 109.933 ms, discrepancy: 9.933 ms
</span><span class='line'>2016-08-29 11:34:10.736 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 10, interval: 109.791 ms, discrepancy: 9.791 ms
</span><span class='line'>2016-08-29 11:34:10.736 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> start busy task
</span><span class='line'>2016-08-29 11:34:11.394 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> finish busy task
</span><span class='line'>2016-08-29 11:34:11.394 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 11, interval: 657.669 ms, discrepancy: 557.669 ms
</span><span class='line'>2016-08-29 11:34:11.496 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 12, interval: 102.005 ms, discrepancy: 2.005 ms
</span></code></pre></td></tr></table></div></figure>


<p>平均误差 9 毫秒。</p>

<h2>6. GCD <code>dispatch_source_t</code></h2>

<p>经测试，dispatch_source_t 的最小精度和可靠性都与 diapatch_after 差不多。</p>

<h3>6.1 实测结果</h3>

<p>间隔 0.1 秒，调用12次。其中倒数第二次调用前会执行一个比较耗时的运算任务。</p>

<p>代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startDispatchSourceTimer</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">setupConfig</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">runDispatchSourceTimerIfNeeded</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;DispatchSourceTimer start with interval: %.3f ms, start time: %@, total count: %d&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="nl">timeStringWithTime:</span><span class="n">self</span><span class="p">.</span><span class="n">startTime</span><span class="p">],</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">maxCount</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">runDispatchSourceTimerIfNeeded</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">sourceTimer</span> <span class="o">=</span> <span class="n">dispatch_source_create</span><span class="p">(</span><span class="n">DISPATCH_SOURCE_TYPE_TIMER</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_time_t</span> <span class="n">start</span> <span class="o">=</span> <span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">dispatch_source_set_timer</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sourceTimer</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="p">(</span><span class="n">int64_t</span><span class="p">)(</span><span class="n">self</span><span class="p">.</span><span class="n">timeInterval</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_source_set_event_handler</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sourceTimer</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">onDispatchSourceTimeout</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_resume</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sourceTimer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">startTime</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onDispatchSourceTimeout</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d, %@&quot;</span><span class="p">,</span> <span class="o">++</span> <span class="n">self</span><span class="p">.</span><span class="n">curCount</span><span class="p">,</span> <span class="p">[</span><span class="n">self</span> <span class="n">diffTimeStringFromStart</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dispatch_cancel</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">sourceTimer</span><span class="p">);</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curCount</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">maxCount</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">runDispatchAfterTimerIfNeeded</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="n">runBusyTaskIfNeeded</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>2016-08-29 11:34:24.088 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> DispatchSourceTimer start with interval: 100.000 ms, start <span class="nb">time</span>: 1472441664088.390 ms, total count: 12
</span><span class='line'>2016-08-29 11:34:24.089 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 1, interval: 1.429 ms, discrepancy: -98.571 ms
</span><span class='line'>2016-08-29 11:34:24.196 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 2, interval: 106.696 ms, discrepancy: 6.696 ms
</span><span class='line'>2016-08-29 11:34:24.306 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 3, interval: 109.500 ms, discrepancy: 9.500 ms
</span><span class='line'>2016-08-29 11:34:24.416 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 4, interval: 109.999 ms, discrepancy: 9.999 ms
</span><span class='line'>2016-08-29 11:34:24.526 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 5, interval: 109.744 ms, discrepancy: 9.744 ms
</span><span class='line'>2016-08-29 11:34:24.636 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 6, interval: 109.691 ms, discrepancy: 9.691 ms
</span><span class='line'>2016-08-29 11:34:24.746 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 7, interval: 109.767 ms, discrepancy: 9.767 ms
</span><span class='line'>2016-08-29 11:34:24.856 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 8, interval: 109.799 ms, discrepancy: 9.799 ms
</span><span class='line'>2016-08-29 11:34:24.966 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 9, interval: 109.820 ms, discrepancy: 9.820 ms
</span><span class='line'>2016-08-29 11:34:25.076 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 10, interval: 109.804 ms, discrepancy: 9.804 ms
</span><span class='line'>2016-08-29 11:34:25.076 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> start busy task
</span><span class='line'>2016-08-29 11:34:25.734 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> finish busy task
</span><span class='line'>2016-08-29 11:34:25.734 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 11, interval: 657.591 ms, discrepancy: 557.591 ms
</span><span class='line'>2016-08-29 11:34:25.835 TimerDemo<span class="o">[</span>37258:10736148<span class="o">]</span> 12, interval: 101.295 ms, discrepancy: 1.295 ms
</span></code></pre></td></tr></table></div></figure>


<p>从结果看，与 <code>diapatch_after</code> 区别不大。</p>

<h2>7. 更高精度的定时器</h2>

<p>上述的各种定时器，都受限于苹果为了保护电池和提高性能采用的策略，导致无法实时地执行回调。如果你的确需要使用更高精度的定时器，官方也提供了方法，见
<a href="https://developer.apple.com/library/ios/technotes/tn2169/_index.html">High Precision Timers in iOS / OS X</a></p>

<p>前面所述的定时器，使用方法各有不同，但其核心代码实际上是一样的。</p>

<blockquote><p>There are many API&rsquo;s in iOS and OS X that allow waiting for a specified period of time. They may be Objective C or C, and they take different kinds of arguments, but they all end up using the same code inside the kernel.</p></blockquote>

<p>而有别于普通定时器的<a href="https://developer.apple.com/library/ios/technotes/tn2169/_index.html#//apple_ref/doc/uid/DTS40013172-CH1-TNTAG5000">高精度定时器</a>，则是基于高优先级的线程调度类创建的定时器，在没有多线程冲突的情况下，这类定时器的请求会被优先处理。</p>

<h3>7.1 实现方法</h3>

<ul>
<li>把定时器所在的线程，移到高优先级的线程调度类。</li>
<li>使用更精确的计时器API，换言之，你想要 10 秒后执行，就绝对在 10 秒后执行，绝不提前，也不延迟。</li>
</ul>


<h3>7.2 如何使用</h3>

<ul>
<li><a href="https://developer.apple.com/library/ios/technotes/tn2169/_index.html#//apple_ref/doc/uid/DTS40013172-CH1-TNTAG6000">How do I get put into the real time scheduling class?</a></li>
<li><a href="https://developer.apple.com/library/ios/technotes/tn2169/_index.html#//apple_ref/doc/uid/DTS40013172-CH1-TNTAG8000">Which timing API(s) should I use?</a></li>
</ul>


<p>提高调度优先级：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;mach/mach.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;mach/mach_time.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;pthread.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">move_pthread_to_realtime_scheduling_class</span><span class="p">(</span><span class="n">pthread_t</span> <span class="n">pthread</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mach_timebase_info_data_t</span> <span class="n">timebase_info</span><span class="p">;</span>
</span><span class='line'>    <span class="n">mach_timebase_info</span><span class="p">(</span><span class="o">&amp;</span><span class="n">timebase_info</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">uint64_t</span> <span class="n">NANOS_PER_MSEC</span> <span class="o">=</span> <span class="mi">1000000ULL</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">clock2abs</span> <span class="o">=</span> <span class="p">((</span><span class="kt">double</span><span class="p">)</span><span class="n">timebase_info</span><span class="p">.</span><span class="n">denom</span> <span class="o">/</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="n">timebase_info</span><span class="p">.</span><span class="n">numer</span><span class="p">)</span> <span class="o">*</span> <span class="n">NANOS_PER_MSEC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">thread_time_constraint_policy_data_t</span> <span class="n">policy</span><span class="p">;</span>
</span><span class='line'>    <span class="n">policy</span><span class="p">.</span><span class="n">period</span>      <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">policy</span><span class="p">.</span><span class="n">computation</span> <span class="o">=</span> <span class="p">(</span><span class="n">uint32_t</span><span class="p">)(</span><span class="mi">5</span> <span class="o">*</span> <span class="n">clock2abs</span><span class="p">);</span> <span class="c1">// 5 ms of work</span>
</span><span class='line'>    <span class="n">policy</span><span class="p">.</span><span class="n">constraint</span>  <span class="o">=</span> <span class="p">(</span><span class="n">uint32_t</span><span class="p">)(</span><span class="mi">10</span> <span class="o">*</span> <span class="n">clock2abs</span><span class="p">);</span>
</span><span class='line'>    <span class="n">policy</span><span class="p">.</span><span class="n">preemptible</span> <span class="o">=</span> <span class="n">FALSE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">kr</span> <span class="o">=</span> <span class="n">thread_policy_set</span><span class="p">(</span><span class="n">pthread_mach_thread_np</span><span class="p">(</span><span class="n">pthread_self</span><span class="p">()),</span>
</span><span class='line'>                   <span class="n">THREAD_TIME_CONSTRAINT_POLICY</span><span class="p">,</span>
</span><span class='line'>                   <span class="p">(</span><span class="n">thread_policy_t</span><span class="p">)</span><span class="o">&amp;</span><span class="n">policy</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">THREAD_TIME_CONSTRAINT_POLICY_COUNT</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">kr</span> <span class="o">!=</span> <span class="n">KERN_SUCCESS</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">mach_error</span><span class="p">(</span><span class="s">&quot;thread_policy_set:&quot;</span><span class="p">,</span> <span class="n">kr</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>精确延时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;mach/mach.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;mach/mach_time.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">uint64_t</span> <span class="n">NANOS_PER_USEC</span> <span class="o">=</span> <span class="mi">1000ULL</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">uint64_t</span> <span class="n">NANOS_PER_MILLISEC</span> <span class="o">=</span> <span class="mi">1000ULL</span> <span class="o">*</span> <span class="n">NANOS_PER_USEC</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">uint64_t</span> <span class="n">NANOS_PER_SEC</span> <span class="o">=</span> <span class="mi">1000ULL</span> <span class="o">*</span> <span class="n">NANOS_PER_MILLISEC</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">mach_timebase_info_data_t</span> <span class="n">timebase_info</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">uint64_t</span> <span class="n">abs_to_nanos</span><span class="p">(</span><span class="n">uint64_t</span> <span class="n">abs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">abs</span> <span class="o">*</span> <span class="n">timebase_info</span><span class="p">.</span><span class="n">numer</span>  <span class="o">/</span> <span class="n">timebase_info</span><span class="p">.</span><span class="n">denom</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">uint64_t</span> <span class="n">nanos_to_abs</span><span class="p">(</span><span class="n">uint64_t</span> <span class="n">nanos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nanos</span> <span class="o">*</span> <span class="n">timebase_info</span><span class="p">.</span><span class="n">denom</span> <span class="o">/</span> <span class="n">timebase_info</span><span class="p">.</span><span class="n">numer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">example_mach_wait_until</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mach_timebase_info</span><span class="p">(</span><span class="o">&amp;</span><span class="n">timebase_info</span><span class="p">);</span>
</span><span class='line'>    <span class="n">uint64_t</span> <span class="n">time_to_wait</span> <span class="o">=</span> <span class="n">nanos_to_abs</span><span class="p">(</span><span class="mi">10ULL</span> <span class="o">*</span> <span class="n">NANOS_PER_SEC</span><span class="p">);</span>
</span><span class='line'>    <span class="n">uint64_t</span> <span class="n">now</span> <span class="o">=</span> <span class="n">mach_absolute_time</span><span class="p">();</span>
</span><span class='line'>    <span class="n">mach_wait_until</span><span class="p">(</span><span class="n">now</span> <span class="o">+</span> <span class="n">time_to_wait</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>7.3 最小精度</h3>

<p>小于 0.5 毫秒。<a href="http://atastypixel.com/blog/wp-content/uploads/2011/09/TPPreciseTimer.zip">这里</a>有一份实现的代码以及与普通定时器的对比。</p>

<h2>8. 参考</h2>

<ul>
<li><a href="http://blog.ibireme.com/2015/05/18/runloop/">深入了解 RunLoop</a></li>
<li><a href="https://developer.apple.com/library/ios/technotes/tn2169/_index.html">High Precision Timers in iOS / OS X</a></li>
<li><a href="http://atastypixel.com/blog/experiments-with-precise-timing-in-ios/">Experiments with precise timing in iOS</a><blockquote class='post_original_block'>
          原文作者：
          <a href='http://blog.lessfun.com'>lslin</a><br/>
          原文链接：
          <a href='http://blog.lessfun.com/blog/2016/08/05/reliable-timer-in-ios/'><a href="http://blog.lessfun.com/blog/2016/08/05/reliable-timer-in-ios/">http://blog.lessfun.com/blog/2016/08/05/reliable-timer-in-ios/</a></a><br/>
          版权声明：自由转载-非商用-非衍生-保持署名 |
          <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
          </blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Swift语言在iOS客户端生成七牛的上传Token]]></title>
    <link href="http://blog.lessfun.com/blog/2015/12/29/swift-create-qiniu-upload-token/"/>
    <updated>2015-12-29T14:14:01+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/12/29/swift-create-qiniu-upload-token</id>
    <content type="html"><![CDATA[<p>七牛SDK官方不推荐由客户端生成Token，所以在SDK的源码以及Demo中都没有提供生成上传Token的接口与示例。但是有时候的确需要在客户端生成Token，因为个人用户哪里有那么多服务器啊……本文提供了Swift语言版本在iOS客户端生成七牛上传Token的示例代码。</p>

<!--more-->


<h2>Token 的生成算法</h2>

<p>详见 <a href="http://developer.qiniu.com/docs/v6/api/reference/security/upload-token.html">官方说明</a>。概述如下：</p>

<ol>
<li>构造<a href="http://developer.qiniu.com/docs/v6/api/reference/security/put-policy.html">上传策略</a>，转为 JSON 字符串，进行 <a href="http://developer.qiniu.com/docs/v6/api/overview/appendix.html#urlsafe-base64">URL安全的Base64编码</a>，得到 <code>encodedPutPolicy</code>。</li>
<li>使用 <code>SecretKey</code> 对上一步生成的 <code>encodedPutPolicy</code> 计算 <a href="http://en.wikipedia.org/wiki/Hash-based_message_authentication_code">HMAC-SHA1</a> 签名，进行URL安全的Base64编码，得到 <code>encodedSign</code>。</li>
<li>将 <code>AccessKey</code>、<code>encodedSign</code> 和 <code>encodedPutPolicy</code> 用<code>:</code>连接起来，得到Token</li>
</ol>


<h2>Swift 示例代码</h2>

<h3>修改 Podfile 文件添加七牛依赖库</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> <span class="s1">&#39;https://github.com/CocoaPods/Specs.git&#39;</span>
</span><span class='line'>platform :ios, <span class="s1">&#39;8.0&#39;</span>
</span><span class='line'>use_frameworks!
</span><span class='line'>
</span><span class='line'>inhibit_all_warnings!
</span><span class='line'>
</span><span class='line'>pod <span class="s1">&#39;JSONKit-NoWarning&#39;</span>, <span class="s1">&#39;1.2&#39;</span>
</span><span class='line'>pod <span class="s1">&#39;AFNetworking&#39;</span>, <span class="s1">&#39;2.5.0&#39;</span>
</span><span class='line'>pod <span class="s1">&#39;Qiniu&#39;</span>, <span class="s1">&#39;~&gt; 7.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>在 .swift 文件上方，引入库，定义钥匙串</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">import</span> <span class="n">Qiniu</span>
</span><span class='line'><span class="n">import</span> <span class="n">JSONKit_NoWarning</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">kQiniuBucket</span> <span class="o">=</span> <span class="s">&quot;qiniubucket&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">kQiniuAccessKey</span> <span class="o">=</span> <span class="s">&quot;xxxxxxxxxxxxxxxxxxxxxx--xxxxxxxxxxxxxxxx&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">kQiniuSecretKey</span> <span class="o">=</span> <span class="s">&quot;xxxxxxxxxxxxxxxxxxxxxx--xxxxxxxxxxxxxxxx&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>定义辅助方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">hmacsha1WithString</span><span class="p">(</span><span class="nl">str:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">secretKey:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NSData</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">cKey</span>  <span class="o">=</span> <span class="n">secretKey</span><span class="p">.</span><span class="n">cStringUsingEncoding</span><span class="p">(</span><span class="n">NSASCIIStringEncoding</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">cData</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">cStringUsingEncoding</span><span class="p">(</span><span class="n">NSASCIIStringEncoding</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">CUnsignedChar</span><span class="p">](</span><span class="nl">count:</span> <span class="n">Int</span><span class="p">(</span><span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">),</span> <span class="nl">repeatedValue:</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">CCHmac</span><span class="p">(</span><span class="n">CCHmacAlgorithm</span><span class="p">(</span><span class="n">kCCHmacAlgSHA1</span><span class="p">),</span> <span class="n">cKey</span><span class="o">!</span><span class="p">,</span> <span class="n">Int</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">cKey</span><span class="o">!</span><span class="p">)),</span> <span class="n">cData</span><span class="o">!</span><span class="p">,</span> <span class="n">Int</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">cData</span><span class="o">!</span><span class="p">)),</span> <span class="o">&amp;</span><span class="n">result</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">hmacData:</span> <span class="n">NSData</span> <span class="o">=</span> <span class="n">NSData</span><span class="p">(</span><span class="nl">bytes:</span> <span class="n">result</span><span class="p">,</span> <span class="nl">length:</span> <span class="p">(</span><span class="n">Int</span><span class="p">(</span><span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">)))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">hmacData</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，<code>CCHmac</code> 使用的是 Objective C 的 <code>#import &lt;CommonCrypto/CommonCrypto.h&gt;</code>，在 Swift 中用需要自己添加桥接头文件。</p>

<h3>定义生成 Token 方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">createQiniuToken</span><span class="p">(</span><span class="nl">fileName:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span> <span class="n">oneHourLater</span> <span class="o">=</span> <span class="n">NSDate</span><span class="p">().</span><span class="n">timeIntervalSince1970</span> <span class="o">+</span> <span class="mi">3600</span>
</span><span class='line'>    <span class="c1">// 上传策略中，只有scope和deadline是必填的</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">scope</span> <span class="o">=</span> <span class="n">fileName</span><span class="p">.</span><span class="n">isEmpty</span> <span class="o">?</span> <span class="n">kQiniuBucket</span> <span class="o">:</span> <span class="n">kQiniuBucket</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">fileName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">putPolicy:</span> <span class="n">NSDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;scope&quot;</span><span class="o">:</span> <span class="n">scope</span><span class="p">,</span> <span class="s">&quot;deadline&quot;</span><span class="o">:</span> <span class="n">NSNumber</span><span class="p">(</span><span class="nl">unsignedLongLong:</span> <span class="n">UInt64</span><span class="p">(</span><span class="n">oneHourLater</span><span class="p">))]</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">encodedPutPolicy</span> <span class="o">=</span> <span class="n">QNUrlSafeBase64</span><span class="p">.</span><span class="n">encodeString</span><span class="p">(</span><span class="n">putPolicy</span><span class="p">.</span><span class="n">JSONString</span><span class="p">())</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">sign</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">hmacsha1WithString</span><span class="p">(</span><span class="n">encodedPutPolicy</span><span class="p">,</span> <span class="nl">secretKey:</span> <span class="n">kQiniuSecretKey</span><span class="p">)</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">encodedSign</span> <span class="o">=</span> <span class="n">QNUrlSafeBase64</span><span class="p">.</span><span class="n">encodeData</span><span class="p">(</span><span class="n">sign</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">kQiniuAccessKey</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">encodedSign</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">encodedPutPolicy</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>上传示例</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">uploadWithName</span><span class="p">(</span><span class="nl">fileName:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">content:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="nl">dict:</span> <span class="n">NSDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;content&quot;</span><span class="o">:</span> <span class="n">content</span><span class="p">]</span>
</span><span class='line'>    <span class="c1">// 如果覆盖已有的文件，则指定文件名。否则如果同名文件已存在，会上传失败</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">token</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">qiniuToken</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">replaceIfExists</span> <span class="o">?</span> <span class="n">fileName</span> <span class="o">:</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">uploader:</span> <span class="n">QNUploadManager</span> <span class="o">=</span> <span class="n">QNUploadManager</span><span class="p">()</span>
</span><span class='line'>    <span class="n">uploader</span><span class="p">.</span><span class="n">putData</span><span class="p">(</span><span class="n">dict</span><span class="p">.</span><span class="n">JSONData</span><span class="p">(),</span> <span class="nl">key:</span> <span class="n">fileName</span><span class="p">,</span> <span class="nl">token:</span> <span class="n">token</span><span class="p">,</span> <span class="nl">complete:</span> <span class="p">{</span> <span class="p">(</span><span class="nl">info:</span> <span class="n">QNResponseInfo</span><span class="o">!</span><span class="p">,</span> <span class="nl">key:</span> <span class="n">String</span><span class="o">!</span><span class="p">,</span> <span class="nl">resp:</span> <span class="p">[</span><span class="n">NSObject</span> <span class="o">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">!</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">info</span><span class="p">.</span><span class="n">ok</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;Success&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">NSLog</span><span class="p">(</span><span class="s">&quot;Error: &quot;</span> <span class="o">+</span> <span class="n">info</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="n">description</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span> <span class="nl">option:</span> <span class="nb">nil</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/12/29/swift-create-qiniu-upload-token/'>http://blog.lessfun.com/blog/2015/12/29/swift-create-qiniu-upload-token/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非越狱 iOS 在后台截屏、录制屏幕的相关实现]]></title>
    <link href="http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background/"/>
    <updated>2015-12-25T16:54:31+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>先简单介绍一下标题的含义。也许你看到<code>iOS</code>、<code>截屏</code>，觉得这有什么好长篇大论的，小菜一碟而已。可能你忽略了<code>后台</code>这个关键词。</p>

<p>这里的关键就在于怎么在 App 切换到后台之后，仍然能够持续截取用户屏幕内容。解决了这点，剩下的就是把图片合成视频，有必要的话再加入声音。</p>

<p>另外，需要说明的是，实现后台截屏只能使用私有 API，而苹果是不允许这类 App 上架的，就算你用了一些技巧（比如动态加载私有 API 以绕过 App Store 的审核）而上架，假以时日苹果也会发现并且下架处理。<a href="http://stackoverflow.com/questions/11090184/how-does-the-ios-app-display-recorder-record-the-screen-without-using-private-ap">Display Recorder</a> 就是这么做并且被下架的，所以现在它发到越狱市场了。</p>

<h2>作用</h2>

<p>在 iOS 上录制全局屏幕，保存成一个视频，这么一个小众需求到底有什么作用？虽然一般用户都不会用到，不过它还是有点用的：</p>

<ul>
<li>录制 App 使用的视频教程（而不是图片+文字、图片+文字、图片+文字）；</li>
<li>如果 App 有个在某些用户机器上必现的 Bug，可以让他把操作记录下来，发给开发者（这样码农们就没办法再推脱：“在我这里是好的！肯定是你的打开方式不对！”）；</li>
<li>如果你是游戏大神，玩得一手好手游，还可以把你在游戏中的神操作保存下来供日后回味（或者分享出去让小白们膜拜）。</li>
</ul>


<!--more-->


<h2>实现</h2>

<p>iOS 的系统封闭，API 变化无常，所以并没有一个可以全版本 iOS 系统通用的后台截屏方法。下面所列的方法都因系统版本而异，前提都是非越狱。</p>

<h3>1. _UICreateScreenUIImage (&lt; iOS 6)</h3>

<p><a href="http://iphonedevwiki.net/index.php/UIImage#UICreateScreenUIImage">_UICreateScreenUIImage</a> 是 UIImage 的一个私有方法，在<strong> iOS 6</strong>以前可以用于后台调用截屏，方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">OBJC_EXTERN</span> <span class="n">UIImage</span> <span class="o">*</span><span class="nf">_UICreateScreenUIImage</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">takeScreenshot</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">screenImage</span> <span class="o">=</span> <span class="n">_UICreateScreenUIImage</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，在 iOS 6 以后，这个方法不允许在 App 切到后台的时候调用了，会在调试控制台输出不能调用的错误提示。</p>

<h3>2. CARenderServerRenderDisplay (&lt; iOS 7)</h3>

<p><a href="https://github.com/coolstar/RecordMyScreen">RecordMyScreen</a> 用的就是这个方法，不过实测在 iOS 7以上，只能截到黑色的空白图片。网上说 RecordMyScreen 就是 Display Recorder 的开源版本。</p>

<p>其中涉及到后台截屏的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">IOSurfaceLock</span><span class="p">(</span><span class="n">_surface</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Take currently displayed image from the LCD</span>
</span><span class='line'><span class="n">CARenderServerRenderDisplay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">CFSTR</span><span class="p">(</span><span class="s">&quot;LCD&quot;</span><span class="p">),</span> <span class="n">_surface</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Unlock the surface</span>
</span><span class='line'><span class="n">IOSurfaceUnlock</span><span class="p">(</span><span class="n">_surface</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Make a raw memory copy of the surface</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">baseAddr</span> <span class="o">=</span> <span class="n">IOSurfaceGetBaseAddress</span><span class="p">(</span><span class="n">_surface</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">totalBytes</span> <span class="o">=</span> <span class="n">_bytesPerRow</span> <span class="o">*</span> <span class="n">_height</span><span class="p">;</span>
</span><span class='line'><span class="n">NSMutableData</span> <span class="o">*</span><span class="n">rawDataObj</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableData</span> <span class="nl">dataWithBytes:</span><span class="n">baseAddr</span> <span class="nl">length:</span><span class="n">totalBytes</span><span class="p">];</span>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，经过测试，在iOS 7和iOS 8上，这个方法没办法正确截屏，只能得到黑色的图片。而且，虽说 RecordMyScreen 是一个开源项目，但实际上它并不是一份完整可用的代码，开源到中途，作者发现有人在窃取他的项目源码，于是停止了开源。虽然如此，该项目中对于音视频的编码、合成部分的处理都是很值得参考的。</p>

<h3>3. createScreenIOSurface(&lt; iOS 7?)</h3>

<p><a href="https://github.com/kishikawakatsumi/ScreenRecorder">ScreenRecorder</a> 用了这个方法，但是实际上这个项目没办法在后台运行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">UIWindow</span> <span class="nl">(ScreenRecorder)</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="nf">createScreenIOSurface</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">screenShot</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CFTypeRef</span> <span class="n">surface</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIWindow</span> <span class="n">createScreenIOSurface</span><span class="p">];</span>
</span><span class='line'>    <span class="n">backingData</span> <span class="o">=</span> <span class="n">surface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">pixelBufferAttributes</span> <span class="o">=</span> <span class="err">@</span><span class="p">{(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kCVPixelBufferPixelFormatTypeKey</span> <span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="n">kCVPixelFormatType_32BGRA</span><span class="p">)};</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">CVPixelBufferCreateWithIOSurface</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">surface</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)(</span><span class="n">pixelBufferAttributes</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 终极方法 IOSurface (&lt; iOS 9)</h3>

<p>好吧，前面提到的几种方法在 iOS 7 以上版本都没啥卵用。现在说的这个方法是可以在 iOS 7 和 iOS 8 上使用的，只是 iOS 9 禁用了该方法。</p>

<p>与 RecordMyScreen 类似，还是基于 IOSurface 私有库，只是调用的方法不太一样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">screenshot</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">IOMobileFramebufferConnection</span> <span class="n">connect</span><span class="p">;</span>
</span><span class='line'>    <span class="n">kern_return_t</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="n">CoreSurfaceBufferRef</span> <span class="n">screenSurface</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">io_service_t</span> <span class="n">framebufferService</span> <span class="o">=</span> <span class="n">IOServiceGetMatchingService</span><span class="p">(</span><span class="n">kIOMasterPortDefault</span><span class="p">,</span> <span class="n">IOServiceMatching</span><span class="p">(</span><span class="s">&quot;AppleH1CLCD&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">framebufferService</span><span class="p">)</span>
</span><span class='line'>        <span class="n">framebufferService</span> <span class="o">=</span> <span class="n">IOServiceGetMatchingService</span><span class="p">(</span><span class="n">kIOMasterPortDefault</span><span class="p">,</span> <span class="n">IOServiceMatching</span><span class="p">(</span><span class="s">&quot;AppleM2CLCD&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">framebufferService</span><span class="p">)</span>
</span><span class='line'>        <span class="n">framebufferService</span> <span class="o">=</span> <span class="n">IOServiceGetMatchingService</span><span class="p">(</span><span class="n">kIOMasterPortDefault</span><span class="p">,</span> <span class="n">IOServiceMatching</span><span class="p">(</span><span class="s">&quot;AppleCLCD&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">IOMobileFramebufferOpen</span><span class="p">(</span><span class="n">framebufferService</span><span class="p">,</span> <span class="n">mach_task_self</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">connect</span><span class="p">);</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">IOMobileFramebufferGetLayerDefaultSurface</span><span class="p">(</span><span class="n">connect</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">screenSurface</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uint32_t</span> <span class="n">aseed</span><span class="p">;</span>
</span><span class='line'>    <span class="n">IOSurfaceLock</span><span class="p">((</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">,</span> <span class="mh">0x00000001</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">aseed</span><span class="p">);</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">width</span> <span class="o">=</span> <span class="n">IOSurfaceGetWidth</span><span class="p">((</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">height</span> <span class="o">=</span> <span class="n">IOSurfaceGetHeight</span><span class="p">((</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFMutableDictionaryRef</span> <span class="n">dict</span><span class="p">;</span>
</span><span class='line'><span class="n">size_t</span> <span class="n">pitch</span> <span class="o">=</span> <span class="n">width</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">width</span><span class="o">*</span><span class="n">height</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">bPE</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">pixelFormat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;A&#39;</span><span class="p">,</span><span class="sc">&#39;R&#39;</span><span class="p">,</span><span class="sc">&#39;G&#39;</span><span class="p">,</span><span class="sc">&#39;B&#39;</span><span class="p">};</span>
</span><span class='line'>    <span class="n">dict</span> <span class="o">=</span> <span class="n">CFDictionaryCreateMutable</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kCFTypeDictionaryKeyCallBacks</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kCFTypeDictionaryValueCallBacks</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceIsGlobal</span><span class="p">,</span> <span class="n">kCFBooleanTrue</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceBytesPerRow</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pitch</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceBytesPerElement</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">bPE</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceWidth</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">width</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceHeight</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfacePixelFormat</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="n">pixelFormat</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceAllocSize</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IOSurfaceRef</span> <span class="n">destSurf</span> <span class="o">=</span> <span class="n">IOSurfaceCreate</span><span class="p">(</span><span class="n">dict</span><span class="p">);</span>
</span><span class='line'>    <span class="n">IOSurfaceAcceleratorRef</span> <span class="n">outAcc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">IOSurfaceAcceleratorCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">outAcc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IOSurfaceAcceleratorTransferSurface</span><span class="p">(</span><span class="n">outAcc</span><span class="p">,</span> <span class="p">(</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">,</span> <span class="n">destSurf</span><span class="p">,</span> <span class="n">dict</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">IOSurfaceUnlock</span><span class="p">((</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">,</span> <span class="n">kIOSurfaceLockReadOnly</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">aseed</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">outAcc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGDataProviderRef</span> <span class="n">provider</span> <span class="o">=</span>  <span class="n">CGDataProviderCreateWithData</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span>  <span class="n">IOSurfaceGetBaseAddress</span><span class="p">(</span><span class="n">destSurf</span><span class="p">),</span> <span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span> <span class="o">*</span> <span class="mi">4</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="n">cgImage</span> <span class="o">=</span> <span class="n">CGImageCreate</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'><span class="mi">8</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="n">IOSurfaceGetBytesPerRow</span><span class="p">(</span><span class="n">destSurf</span><span class="p">),</span>
</span><span class='line'> <span class="n">CGColorSpaceCreateDeviceRGB</span><span class="p">(),</span> <span class="n">kCGImageAlphaNoneSkipFirst</span> <span class="o">|</span><span class="n">kCGBitmapByteOrder32Little</span><span class="p">,</span> <span class="n">provider</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">YES</span><span class="p">,</span> <span class="n">kCGRenderingIntentDefault</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">cgImage</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>见：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/21870667/iomobileframebuffergetlayerdefaultsurface-does-not-work-on-ios7-retina">IOMobileFramebufferGetLayerDefaultSurface does not work on ios7 retina</a></li>
<li><a href="http://stackoverflow.com/questions/32239969/iomobileframebuffergetlayerdefaultsurface-not-working-on-ios-9">IOMobileFramebufferGetLayerDefaultSurface not working on iOS 9</a></li>
</ul>


<h2>合成</h2>

<p>在 App 后台得到截图之后怎么处理成视频呢？其实在 RecordMyScreen 中有完整的代码可以参考，只是它里面截屏的方法需要替换为本文提到的<code>第四种</code>实现，不赘述。</p>

<h2>注意</h2>

<ol>
<li>需要修改 App 的 plist 文件，使其能在后台运行。</li>
<li>需要打开设备的 Access Touch 功能，否则对于 OpenGL 实现的游戏 App，会黑屏。</li>
<li>iPad Retina 屏幕像素过大，处理起来很吃力，需要减小生成的图片大小。</li>
</ol>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background/'>http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用LSLog XCode插件来过滤Log及修改Log的文本颜色]]></title>
    <link href="http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console/"/>
    <updated>2015-12-18T18:34:16+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console</id>
    <content type="html"><![CDATA[<p><img src="https://github.com/tinymind/LSLog-XCode/raw/master/LSLog-XCode.gif" alt="LSLog-XCode" /></p>

<!--more-->


<h2>1. 功能</h2>

<p>LSLog-XCode 是一款 XCode 插件，用于过滤 XCode 调试控制台输出的 Log，支持正则表达式，可自定义前缀字符串以区分不同等级的Log，并修改对应的文字颜色。</p>

<p>LSLog-XCode 内置支持 <a href="https://github.com/robbiehanson/XcodeColors">XCodeColors</a> 插件。如果你没有安装 XCodeColors，LSLog-XCode 会采用类似 XCodeColors 的语法，高亮显示调试器打印的 Log。</p>

<h3>1.1 默认配置</h3>

<p>不同 Log 等级对应的前缀字符串及默认文字颜色：</p>

<ul>
<li>Error: <code>&lt;ERROR&gt;</code>, RGB(214, 57, 30)</li>
<li>Warn: <code>&lt;WARNING&gt;</code>, RGB(204, 121, 32)</li>
<li>Info: <code>&lt;INFO&gt;</code>, RGB(32, 32, 32)</li>
<li>Verbose: <code>&lt;VERBOSE&gt;</code>, RGB(0, 0, 255)</li>
</ul>


<h2>2. 安装</h2>

<ul>
<li>通过 <a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a> 安装。</li>
<li>下载工程文件 <a href="https://github.com/tinymind/LSLog-XCode">LSLog-XCode</a>，编译运行，然后<strong>重启XCode</strong>。</li>
</ul>


<h2>3. 卸载</h2>

<p>LSLog-XCode.xcplugin 被保存在 <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code>，如果要卸载，只需删除这个文件：<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/LSLog-XCode.xcplugin</code>。</p>

<h2>4. 感谢</h2>

<ul>
<li><a href="https://github.com/yuhua-chen/MCLog">MCLog</a></li>
<li><a href="https://github.com/robbiehanson/XcodeColors">XCodeColors</a><blockquote class='post_original_block'>
          原文作者：
          <a href='http://blog.lessfun.com'>lslin</a><br/>
          原文链接：
          <a href='http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console/'><a href="http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console/">http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console/</a></a><br/>
          版权声明：自由转载-非商用-非衍生-保持署名 |
          <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
          </blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIViewController Push & Pop 的那些坑]]></title>
    <link href="http://blog.lessfun.com/blog/2015/09/09/uiviewcontroller-push-pop-trap/"/>
    <updated>2015-09-09T18:37:32+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/09/09/uiviewcontroller-push-pop-trap</id>
    <content type="html"><![CDATA[<p>iOS开发中，UIViewController是最常用的一个类，在Push和Pop的过程中也会经常出现一些UI卡死、App闪退的问题，本文总结了开发中遇到的一些坑。</p>

<p>大部分视图控制器切换导致的问题，根本原因都是使用了动画，因为执行动画需要时间，在动画未完成的时候又进行另一个切换动画，容易产生异常，假如在 Push 和 Pop 的过程不使用动画，世界会清静很多。所以本文只讨论使用了动画的视图切换。也就是使用以下方式的 Push 和 Pop：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">controller</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>1. 连续 Push</h2>

<p>连续两次 Push 不同的 ViewController 是没问题的，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onPush:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">vc1</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">vc2</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，如果不小心连续 Push 了同一个 ViewController，并且 animated 为 YES，则会 Crash：<code>Pushing the same view controller instance more than once is not supported</code>。</p>

<p>这种情况很有可能发生，特别是界面上触发切换的入口不止一处，并且各个入口的点击没有互斥的话，用两根手指同时点击屏幕就会同时触发两个入口的切换了。多点触碰导致的同时 Push，基本上是防不胜防，当界面元素很复杂的时候，特别容易出现这个问题，而指望从用户交互的角度上避免这个问题是不可能的，测试美眉以暴力测试、胡乱点击而著称，防得了用户防不住测试。</p>

<p>所以我们需要从根本上解决这个问题：当一个 Push 动画还没完成的时候，不允许再 Push 别的 ViewController。这样处理是没有问题的，因为连续带动画地 Push 多个 ViewController 肯定不是开发和产品的意愿，就算有这种需求，也可以通过禁用动画的方式来解决。</p>

<h3>1.1 解决方案</h3>

<p>继承 UINavigationController 并重载 pushViewController 方法。</p>

<ol>
<li>如果是动画 Push，并且属性 <code>isSwitching == YES</code>，则忽略这次 Push。</li>
<li>否则，设置 <code>isSwitching = YES</code> 再继续切换。</li>
<li>等到动画切换完毕，需要再把 <code>isSwitching</code> 改为 NO。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MYNavigationController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">UINavigationControllerDelegate</span><span class="p">,</span> <span class="n">UIGestureRecognizerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">isSwitching</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MYNavigationController</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 重载 push 方法</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pushViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">animated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span> <span class="c1">// 1. 如果是动画，并且正在切换，直接忽略</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>       <span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span> <span class="c1">// 2. 否则修改状态</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">pushViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UINavigationControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span> <span class="nf">didShowViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span> <span class="c1">// 3. 还原状态</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 连续 Pop</h2>

<p>连续 Pop ，可能会导致两种情况。</p>

<h3>2.1 self 被释放</h3>

<p>例如，下面的代码，执行到第二句的时候，self 已经被释放了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span> <span class="c1">// self 被 release</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span> <span class="c1">// 继续访问 self 导致异常</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.2 界面异常、崩溃</h3>

<p>假如你避开了上面那种调用，换成了这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">AppDelegate</span> <span class="n">sharedObject</span><span class="p">].</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">AppDelegate</span> <span class="n">sharedObject</span><span class="p">].</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于访问的是全局的 AppDelegate，自然避免了调用者被释放的问题，但是，连续两次动画 Pop，在iOS 7.X 系统会导致界面混乱、卡死、莫名其妙的崩溃（iOS 8 貌似不存在类似的问题）。比如，下面这个崩溃的堆栈：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">{</span><span class="s">&quot;bundleID&quot;</span><span class="o">:</span><span class="s">&quot;com.enterprise.kiwi&quot;</span><span class="p">,</span><span class="s">&quot;app_name&quot;</span><span class="o">:</span><span class="s">&quot;kiwi&quot;</span><span class="p">,</span><span class="s">&quot;bug_type&quot;</span><span class="o">:</span><span class="s">&quot;109&quot;</span><span class="p">,</span><span class="s">&quot;name&quot;</span><span class="o">:</span><span class="s">&quot;kiwi&quot;</span><span class="p">,</span><span class="s">&quot;os_version&quot;</span><span class="o">:</span><span class="s">&quot;iPhone OS 7.1.1 (11D201)&quot;</span><span class="p">,</span><span class="s">&quot;version&quot;</span><span class="o">:</span><span class="s">&quot;1190 (3.1.0)&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">Incident</span> <span class="nl">Identifier:</span> <span class="n">FE85E864</span><span class="o">-</span><span class="mi">393</span><span class="n">C</span><span class="o">-</span><span class="mi">417</span><span class="n">D</span><span class="o">-</span><span class="mi">9</span><span class="n">EA0</span><span class="o">-</span><span class="n">B4324BEEDA2F</span>
</span><span class='line'><span class="n">CrashReporter</span> <span class="nl">Key:</span>   <span class="n">a54805586b9487c324ff5f42f4ac93dabbe9f23e</span>
</span><span class='line'><span class="n">Hardware</span> <span class="nl">Model:</span>      <span class="n">iPhone6</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'><span class="nl">Process:</span>             <span class="n">kiwi</span> <span class="p">[</span><span class="mi">1074</span><span class="p">]</span>
</span><span class='line'><span class="nl">Path:</span>                <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">D81CE836</span><span class="o">-</span><span class="mf">3F</span><span class="mi">88</span><span class="o">-</span><span class="mi">481</span><span class="n">C</span><span class="o">-</span><span class="n">AA5A</span><span class="o">-</span><span class="mi">21</span><span class="n">DA530234E0</span><span class="o">/</span><span class="n">kiwi</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">kiwi</span>
</span><span class='line'><span class="nl">Identifier:</span>          <span class="n">com</span><span class="p">.</span><span class="n">yy</span><span class="p">.</span><span class="n">enterprise</span><span class="p">.</span><span class="n">kiwi</span>
</span><span class='line'><span class="nl">Version:</span>             <span class="mi">1190</span> <span class="p">(</span><span class="mf">3.1.0</span><span class="p">)</span>
</span><span class='line'><span class="n">Code</span> <span class="nl">Type:</span>           <span class="n">ARM</span><span class="o">-</span><span class="mi">64</span> <span class="p">(</span><span class="n">Native</span><span class="p">)</span>
</span><span class='line'><span class="n">Parent</span> <span class="nl">Process:</span>      <span class="n">launchd</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">Date</span><span class="o">/</span><span class="nl">Time:</span>           <span class="mi">2015</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">08</span> <span class="mi">15</span><span class="o">:</span><span class="mi">44</span><span class="o">:</span><span class="mf">57.327</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'><span class="n">OS</span> <span class="nl">Version:</span>          <span class="n">iOS</span> <span class="mf">7.1.1</span> <span class="p">(</span><span class="mi">11</span><span class="n">D201</span><span class="p">)</span>
</span><span class='line'><span class="n">Report</span> <span class="nl">Version:</span>      <span class="mi">104</span>
</span><span class='line'>
</span><span class='line'><span class="n">Exception</span> <span class="nl">Type:</span>  <span class="n">EXC_CRASH</span> <span class="p">(</span><span class="n">SIGSEGV</span><span class="p">)</span>
</span><span class='line'><span class="n">Exception</span> <span class="nl">Codes:</span> <span class="mh">0x0000000000000000</span><span class="p">,</span> <span class="mh">0x0000000000000000</span>
</span><span class='line'><span class="n">Triggered</span> <span class="n">by</span> <span class="nl">Thread:</span>  <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">Thread</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'><span class="mi">0</span>   <span class="n">libobjc</span><span class="p">.</span><span class="n">A</span><span class="p">.</span><span class="n">dylib</span>                <span class="mh">0x00000001993781dc</span> <span class="n">objc_msgSend</span> <span class="o">+</span> <span class="mi">28</span>
</span><span class='line'><span class="mi">1</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018feacf14</span> <span class="o">-</span><span class="p">[</span><span class="n">UIResponder</span><span class="p">(</span><span class="n">Internal</span><span class="p">)</span> <span class="n">_canBecomeFirstResponder</span><span class="p">]</span> <span class="o">+</span> <span class="mi">20</span>
</span><span class='line'><span class="mi">2</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018feacba0</span> <span class="o">-</span><span class="p">[</span><span class="n">UIResponder</span> <span class="n">becomeFirstResponder</span><span class="p">]</span> <span class="o">+</span> <span class="mi">240</span>
</span><span class='line'><span class="mi">3</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018feacfa0</span> <span class="o">-</span><span class="p">[</span><span class="n">UIView</span><span class="p">(</span><span class="n">Hierarchy</span><span class="p">)</span> <span class="n">becomeFirstResponder</span><span class="p">]</span> <span class="o">+</span> <span class="mi">120</span>
</span><span class='line'><span class="mi">4</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018ff320f8</span> <span class="o">-</span><span class="p">[</span><span class="n">UITextField</span> <span class="n">becomeFirstResponder</span><span class="p">]</span> <span class="o">+</span> <span class="mi">64</span>
</span><span class='line'><span class="mi">5</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018ffe4800</span> <span class="o">-</span><span class="p">[</span><span class="n">UITextInteractionAssistant</span><span class="p">(</span><span class="n">UITextInteractionAssistant_Internal</span><span class="p">)</span> <span class="n">setFirstResponderIfNecessary</span><span class="p">]</span> <span class="o">+</span> <span class="mi">208</span>
</span><span class='line'><span class="mi">6</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018ffe3f84</span> <span class="o">-</span><span class="p">[</span><span class="n">UITextInteractionAssistant</span><span class="p">(</span><span class="n">UITextInteractionAssistant_Internal</span><span class="p">)</span> <span class="nl">oneFingerTap:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1792</span>
</span><span class='line'><span class="mi">7</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018ffcac60</span> <span class="n">_UIGestureRecognizerSendActions</span> <span class="o">+</span> <span class="mi">212</span>
</span><span class='line'><span class="mi">8</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018fe5929c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIGestureRecognizer</span> <span class="nl">_updateGestureWithEvent:buttonEvent:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">376</span>
</span><span class='line'><span class="mi">9</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000019025803c</span> <span class="n">___UIGestureRecognizerUpdate_block_invoke</span> <span class="o">+</span> <span class="mi">56</span>
</span><span class='line'><span class="mi">10</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe1a258</span> <span class="n">_UIGestureRecognizerRemoveObjectsFromArrayAndApplyBlocks</span> <span class="o">+</span> <span class="mi">284</span>
</span><span class='line'><span class="mi">11</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe18b34</span> <span class="n">_UIGestureRecognizerUpdate</span> <span class="o">+</span> <span class="mi">208</span>
</span><span class='line'><span class="mi">12</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe57b1c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIWindow</span> <span class="nl">_sendGesturesForEvent:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1008</span>
</span><span class='line'><span class="mi">13</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe5722c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIWindow</span> <span class="nl">sendEvent:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">824</span>
</span><span class='line'><span class="mi">14</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe28b64</span> <span class="o">-</span><span class="p">[</span><span class="n">UIApplication</span> <span class="nl">sendEvent:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">252</span>
</span><span class='line'><span class="mi">15</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe26c54</span> <span class="n">_UIApplicationHandleEventQueue</span> <span class="o">+</span> <span class="mi">8496</span>
</span><span class='line'><span class="mi">16</span>  <span class="n">CoreFoundation</span>                 <span class="mh">0x000000018ce1f640</span> <span class="n">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__</span> <span class="o">+</span> <span class="mi">20</span>
</span><span class='line'><span class="mi">17</span>  <span class="n">CoreFoundation</span>                 <span class="mh">0x000000018ce1e99c</span> <span class="n">__CFRunLoopDoSources0</span> <span class="o">+</span> <span class="mi">252</span>
</span><span class='line'><span class="mi">18</span>  <span class="n">CoreFoundation</span>                 <span class="mh">0x000000018ce1cc34</span> <span class="n">__CFRunLoopRun</span> <span class="o">+</span> <span class="mi">628</span>
</span><span class='line'><span class="mi">19</span>  <span class="n">CoreFoundation</span>                 <span class="mh">0x000000018cd5dc1c</span> <span class="n">CFRunLoopRunSpecific</span> <span class="o">+</span> <span class="mi">448</span>
</span><span class='line'><span class="mi">20</span>  <span class="n">GraphicsServices</span>               <span class="mh">0x0000000192a45c08</span> <span class="n">GSEventRunModal</span> <span class="o">+</span> <span class="mi">164</span>
</span><span class='line'><span class="mi">21</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe8efd8</span> <span class="n">UIApplicationMain</span> <span class="o">+</span> <span class="mi">1152</span>
</span><span class='line'><span class="mi">22</span>  <span class="n">kiwi</span>                           <span class="mh">0x000000010026a2b8</span> <span class="n">main</span> <span class="p">(</span><span class="n">main</span><span class="p">.</span><span class="nl">mm:</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'><span class="mi">23</span>  <span class="n">libdyld</span><span class="p">.</span><span class="n">dylib</span>                    <span class="mh">0x000000019995ba9c</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">Thread</span> <span class="mi">1</span> <span class="nl">Crashed:</span>
</span><span class='line'><span class="mi">0</span>   <span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span>           <span class="mh">0x0000000199a3daa8</span> <span class="n">kevent64</span> <span class="o">+</span> <span class="mi">8</span>
</span><span class='line'><span class="mi">1</span>   <span class="n">libdispatch</span><span class="p">.</span><span class="n">dylib</span>                <span class="mh">0x0000000199941998</span> <span class="n">_dispatch_mgr_thread</span> <span class="o">+</span> <span class="mi">48</span>
</span></code></pre></td></tr></table></div></figure>


<p>从崩溃记录完全看不出原因，十分坑爹。</p>

<h3>2.3 解决方案</h3>

<ul>
<li>方案一：第一次 Pop 不使用动画。</li>
<li>方案二：统一管理 Pop 的调用，如果当前正在 Pop，则下一次 Pop 先入栈；等到 Pop 执行完再执行下一次 Pop。</li>
</ul>


<h2>3. Push 的过程中立即 Pop</h2>

<p>Push 的过程中调用 Pop，会导致界面卡死，表现为：不响应任何点击、手势操作，但是不会崩溃。这也是在 iOS7 中出现的问题，iOS 8 之后不存在。</p>

<h3>3.1 解决方案</h3>

<p>同 1.1，重载 Pop 方法：</p>

<ol>
<li>Pop 的时候先判断是否在切换中；</li>
<li>如果正在切换，则 Pop 的命令先保存到队列；</li>
<li>切换动画执行完毕，判断是否需要处理 Pop 的队列。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - UINavigationController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">popToViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">super</span> <span class="nl">popToViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">enqueuePopViewController:</span><span class="n">viewController</span> <span class="nl">animate:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">popViewControllerAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">super</span> <span class="nl">popViewControllerAnimated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">enqueuePopViewController:</span><span class="nb">nil</span> <span class="nl">animate:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UINavigationControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span> <span class="nf">didShowViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 显示完毕之后判断是否需要Pop</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PopVCInfo</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span> <span class="nl">removeObjectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popToViewController:</span><span class="n">info</span><span class="p">.</span><span class="n">controller</span> <span class="nl">animated:</span><span class="n">info</span><span class="p">.</span><span class="n">animate</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">info</span><span class="p">.</span><span class="n">animate</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. Push 的过程中手势滑动返回</h2>

<p>手势滑动返回本质上调用的还是 Pop，所以，同上。</p>

<p>不过，还可以更根本地禁止用户进行这样的操作，也就是在切换过程中禁止滑动返回手势。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - UINavigationController</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Hijack the push method to disable the gesture</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pushViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">pushViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UINavigationControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span> <span class="nf">didShowViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 显示完毕之后判断是否需要Pop</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PopVCInfo</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span> <span class="nl">removeObjectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popToViewController:</span><span class="n">info</span><span class="p">.</span><span class="n">controller</span> <span class="nl">animated:</span><span class="n">info</span><span class="p">.</span><span class="n">animate</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">info</span><span class="p">.</span><span class="n">animate</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/09/09/uiviewcontroller-push-pop-trap/'>http://blog.lessfun.com/blog/2015/09/09/uiviewcontroller-push-pop-trap/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查找XCode工程中没被使用的图片资源]]></title>
    <link href="http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project/"/>
    <updated>2015-09-02T13:27:29+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project</id>
    <content type="html"><![CDATA[<p><img src="https://github.com/tinymind/LSUnusedResources/raw/master/LSUnusedResourcesExample.gif" alt="LSUnusedResources" /></p>

<h2>1. 需求的引入</h2>

<p>一个项目开发得越久，添加的功能模块也就越多，相应地，也会慢慢引入大量图片等资源。但是，在移除一些不再使用的模块的时候，开发者往往会把该模块所对应的图片资源一起删除，因为源码和资源是分离的。长久以来，项目中就会存在大量没被使用的资源文件。</p>

<p>在某个时机，也就是需求完成得差不多，Bug 增加得不够多，Crash 上涨得不够快的时候，码农们终于有了一点闲暇时间，打算清理一下资源文件，减少 App 安装包的大小。这是一件体力活，方法无非是，一个一个地复制资源文件名，然后在 XCode 中全局查找该字符串，如果结果为 0，那么这个资源很可能就没有被使用。为什么说很可能？因为在代码中，有可能通过字符串拼接的方式使用了这个资源，而这种情况是没办法通过字符串匹配查找出来的。</p>

<p>道理我们都懂，但是，操作起来也实在是太繁琐了，码农们不可能会乐意这样干的。于是，我们需要这么一款工具：能够迅速找出工程中所有没被使用的资源文件。</p>

<!--more-->


<h2>2. 已有的方案</h2>

<p>果不其然，在我打算写这么一个工具的时候，在网上已经有了两种方案。</p>

<h3>2.1 方案1：<a href="http://stackoverflow.com/a/6113449/3737409">万能的脚本</a></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">PROJ</span><span class="o">=</span><span class="sb">`</span>find . -name <span class="s1">&#39;*.xib&#39;</span> -o -name <span class="s1">&#39;*.[mh]&#39;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>png in <span class="sb">`</span>find . -name <span class="s1">&#39;*.png&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">name</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$png</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> ! grep -qhs <span class="s2">&quot;$name&quot;</span> <span class="s2">&quot;$PROJ&quot;</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;$png is not referenced&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>缺点</strong>：不够智能，不够通用，速度太慢，结果不正确。</p>

<h3>2.2 方案2：<a href="http://jeffhodnett.github.io/Unused/">脚本界面化</a></h3>

<p><a href="http://jeffhodnett.github.io/Unused/">Unused</a> 对脚本的调用做了封装，通过界面可以配置一定的信息，然后比较清晰的输入结果。</p>

<p><strong>缺点</strong>：实际上，Unused 的内部还是调用了方案 1 的脚本，所以方案 1 的缺点也就是方案 2 的缺点。</p>

<h2>3. LSUnusedResources 做的改进</h2>

<h3>3.1 提高匹配速度</h3>

<p>LSUnusedResources 很大程度上受 Unused 的影响，比如界面、交互，以及部分代码。但是，本工具在核心代码上做了优化，使其在搜索的速度、结果的正确上都有了很大的提高。</p>

<p>核心步骤，简述如下：</p>

<ul>
<li>查找：选定的目录下的所有资源文件。这一步与上述方案1区别不大，都是调用 <code>find</code> 命令查找指定后缀名的文件。</li>
<li>匹配：与上述方案不同，我不是对每个资源文件名都做一次全文搜索匹配，因为加入项目的资源太多，这里会导致性能快速下降。而我只是针对源码、Xib、Storyboard 和 plist 等文件，先全文搜索其中可能是引用了资源的字符串，然后用资源名和字符串做匹配。</li>
</ul>


<h3>3.2 优化匹配结果</h3>

<p>Unused 会把大量实际上有使用的资源，当做未使用的资源输出。LSUnusedResources 则不会出现这样的问题，并且使得结果更加优化。</p>

<p>举例说明：<br/>
你在工程中添加了下面资源:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>icon_tag_0.png
</span><span class='line'>icon_tag_1.png
</span><span class='line'>icon_tag_2.png
</span><span class='line'>icon_tag_3.png
</span></code></pre></td></tr></table></div></figure>


<p>然后用字符串拼接的方式在代码中引用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSInteger</span> <span class="n">index</span> <span class="o">=</span> <span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;icon_tag_%d&quot;</span><span class="p">,</span> <span class="n">index</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>icon_tag_x.png</code> 是不应该被当做未使用的资源的，只是以一种比较隐晦的方式间接引用了，所以不应该出现在结果列表中。</p>

<h2>4. 使用方法</h2>

<ol>
<li>点击 <code>Browse..</code> 选择一个文件夹；</li>
<li>点击 <code>Search</code> 开始搜索；</li>
<li>等待片刻即可看到结果；</li>
<li>选中某些行，然后点击 <code>Delete</code> 可以直接删除资源。</li>
</ol>


<h2>5. 下载安装</h2>

<ul>
<li>下载: <a href="https://github.com/tinymind/LSUnusedResources/raw/master/Release/LSUnusedResources.app.zip">LSUnusedResources.app.zip</a></li>
<li>或者使用 XCode 编译运行<a href="https://github.com/tinymind/LSUnusedResources/">项目代码</a>。</li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project/'>http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[密码计算器，保护您iPhone里的隐私文件]]></title>
    <link href="http://blog.lessfun.com/blog/2015/04/07/passcalc-protect-your-privacy-in-iphone/"/>
    <updated>2015-04-07T16:48:09+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/04/07/passcalc-protect-your-privacy-in-iphone</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://blog.lessfun.com/images/app/passcalc/passcalc_appicon.png" width="120" height="120" title="PassCalc App" alt="PassCalc App"></p>

<p>密码计算器是iPhone上的一款私密文件管理器，通过在计算器上输入密码来访问您的私人文件，可以完美地保护您的照片、视频、日记、联系人等私人隐私文件。</p>

<p>当前版本：1.0.1<br/>
更新时间：2015.05.06</p>

<h2>iPhone 屏幕截图</h2>

<div style="margin-top:30px;font-size:16px;line-height:20px;background:rgb(78,81,85);border-radius:4px;padding:4px;">
<div style="margin: 0 14px; max-height: 640px; min-height: 320px; overflow-x: auto; overflow-y: hidden; padding-bottom: 16px; white-space: nowrap;"><img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_1.png" alt="1"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_2.png" alt="2"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_3.png" alt="3"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_4.png" alt="4"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_5.png" alt="5"></div>
</div>


<h2>下载</h2>

<p><a href="https://itunes.apple.com/cn/app/id980936769?mt=8"><img src="http://blog.lessfun.com/images/app/appstore_available.png" alt="从AppStore下载" /></a></p>

<!-- more -->


<h2>应用介绍</h2>

<p>密码计算器是iPhone上的一款私密文件管理器。那么多年以来，你一定保存了一些私密的照片、视频、笔记或联系人在手机里，并且不想被你身边的人看到。密码计算器可以完美地实现你的需求，保护你的隐私。表面上这是一款计算器，但是可以输入密码来访问你的私人文件。</p>

<h3>安全性</h3>

<ul>
<li>使用RSA，AES加密技术来存储照片、笔记、视频和联系人。</li>
<li>即使手机被盗，被破解，别人也无法打开加密的文件，妈妈再也不用担心你的艳照门啦。</li>
</ul>


<h3>文件管理器</h3>

<ul>
<li>使用WiFi、USB与电脑进行文件上传、下载。</li>
<li>从相机或相册导入照片、视频。</li>
<li>通过邮件、微信来分享文字、图片，支持发送Gif动态表情。</li>
<li>支持视频格式：mov，m4v，mp4，mpv，3gp。</li>
<li>支持图片格式：jpg，png，gif，bmp。</li>
<li>支持笔记扩展名：txt，text，md，markdown，markd，markdn，mdown，mkd，mkdn。</li>
</ul>


<h3>私密笔记</h3>

<ul>
<li>语法高亮。</li>
<li>通过电子邮件、微信分享。</li>
</ul>


<h3>私密文档</h3>

<ul>
<li>支持的文档类型：doc, ppt, xls, docx, pptx, xlsx, key, numbers, pages, pdf, rtf；</li>
<li>可导入、导出、分享文档。</li>
</ul>


<h3>私密联系人</h3>

<ul>
<li>无限制添加联系人。</li>
<li>给联系人添加备注。</li>
<li>快速拨号，发送短信，发送电子邮件。</li>
</ul>


<h3>浏览器</h3>

<ul>
<li>全功能浏览器，无障碍地访问你想看的网站，并且不留下蛛丝马迹。</li>
<li>保存你常用的书签，方便你下次再次访问。</li>
<li>一键下载网页上的所有图像，保存到图像可以在相册中找到。</li>
<li>离线浏览网页，保存完整网页内容为PDF。</li>
</ul>


<h3>更多</h3>

<ul>
<li>功能完善的数学计算器。</li>
<li>应用程序切换到后台时，自动显示计算器界面。</li>
</ul>


<h3>1.0.1更新信息</h3>

<ul>
<li>新增文档类型，支持：doc, ppt, xls, docx, pptx, xlsx, key, numbers, pages, pdf, rtf；</li>
<li>离线浏览网页，保存完整网页内容为PDF；</li>
<li>调用第三方App打开文件；</li>
<li>处理来自第三方的文件；</li>
<li>支持 iOS 8 Today Extension；</li>
<li>Bug 修复。</li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/04/07/passcalc-protect-your-privacy-in-iphone/'>http://blog.lessfun.com/blog/2015/04/07/passcalc-protect-your-privacy-in-iphone/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView性能优化，提升列表滚动的流畅性]]></title>
    <link href="http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve/"/>
    <updated>2015-04-01T12:13:46+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve</id>
    <content type="html"><![CDATA[<p>UITableView是iOS开发中最常用也很实用并且最容易出现性能问题的的一个控件，本文列出了一些性能优化点，用于提高列表滚动的流畅性。</p>

<!--more-->


<h2>1. 重用</h2>

<p>当TableView需要显示一个Cell时，会先从已创建的Cell中找一个可以重用的，然后展现到屏幕。一般情况下，可以被重用的Cell都滚到了屏幕区域外。如果慢慢地拖动TableView，就可以看到Cell不断地被重用（通过断点可以看到Cell的init或awakeFromNib没有被调用）。但是如果快速滚动，还是可能会看到Cell被创建。</p>

<h3>1.1 已经在StoryBoard的TableView中定义Cell的ProtoType</h3>

<p>则指定其ReuseIdentify，在delegate返回Cell的时候，调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="p">[</span><span class="n">tableView</span> <span class="n">dequeueReusableCellWithIdentifier</span><span class="o">:</span><span class="n">kCellID</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.2 Cell是从单独的xib加载</h3>

<p>则需要先注册：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="p">[</span><span class="n">tableView</span> <span class="n">registerNib</span><span class="o">:</span><span class="p">[</span><span class="n">UINib</span> <span class="n">nibWithNibName</span><span class="o">:</span><span class="n">kCellID</span> <span class="n">bundle</span><span class="o">:</span><span class="n">nil</span><span class="p">]</span> <span class="n">forCellReuseIdentifier</span><span class="o">:</span><span class="n">kCellID</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.3 Cell的ProtoType个数尽可能少，因为Cell的种类越多，TableView创建的Cell个数就越多，并且是成倍增长。</h3>

<h2>2. 缓存</h2>

<p>缓存基本上可以解决大部分性能问题。TableView需要知道Cell的高度，才能对Cell进行布局；需要知道所有的Cell的高度，才能知道TableView本身的高度，所以，每次调用reloadData，都需要计算所有Cell的高度。我们要尽量减小高度计算的复杂度。</p>

<h3>2.1 缓存Cell的高度</h3>

<h4>2.1.1 高度固定、类型单一的Cell</h4>

<p>在创建TableView的时候，直接设置其rowHeight属性。</p>

<h4>2.1.2 对于高度固定、类型多样的Cell</h4>

<p>实现代理方法，根据Cell的类型返回不同的高度：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">tableView</span><span class="o">:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="n">heightForRowAtIndexPath</span><span class="o">:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.1.3 对于高度不固定的Cell</h4>

<p><img src="http://blog.lessfun.com/images/2015/04/tableview_dynamic_cell.png" alt="dynamic uitableviewcell" /></p>

<p>由于需要动态计算高度，所以运算量必然会增大，但是还是存在优化的空间。常见的优化方式是，把cellHeight作为data的一个属性缓存起来，对于每一个data对应的每一个cell，就只需要计算一次高度。示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">ContentInfo</span> <span class="o">:</span> <span class="n">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">DetailInfo</span> <span class="o">*</span><span class="n">detail</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">cellHeight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">calcHeight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">tableView</span><span class="o">:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="n">heightForRowAtIndexPath</span><span class="o">:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ContentInfo</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="n">_dataSource</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">cellHeight</span> <span class="o">&lt;=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">info</span><span class="p">.</span><span class="n">cellHeight</span> <span class="o">=</span> <span class="p">[</span><span class="n">info</span> <span class="n">calcHeight</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span><span class="p">.</span><span class="n">cellHeight</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这样的方式，还是把运算量放到了TableView的代理方法内，其实也可以在创建ContentInfo本身的时候，就调用它的calcHeight方法，在代理方法里就可以可以直接返回info.cellHeight了。但也要结合实际情况进行取舍，因为有时候，有了数据源，但不一定需要展示TableView，提前计算高度反而会浪费时间。</p>

<h3>2.2 缓存Cell的资源</h3>

<p>比如每一个Cell都需要用到的UIImage，UIFont，NSDateFormatter或者任何在绘制时需要的对象，推荐使用类层级的初始化方法中执行分配，并将其存储为静态变量。</p>

<h2>3. 创建</h2>

<h3>3.1 去掉AutoLayout</h3>

<p>如果发现通过StoryBoard+xib+AutoLayout创建Cell时性能满足不了需求，可以考虑去掉AutoLayout。</p>

<h3>3.2 代码创建Cell</h3>

<p>如果不用AutoLayout还是有问题，可以考虑通过代码创建Cell的Views。</p>

<h3>3.3 自绘</h3>

<p>如果使用代码创建还是解决不了问题，那就只能靠自绘了，重载Cell的drawRect方法即可。</p>

<h2>4. 渲染</h2>

<h3>4.1 减少子View的个数和层级</h3>

<p>子View的层级越深，渲染到屏幕上所需要的计算量就越大。</p>

<h3>4.2 减少子View的透明图层</h3>

<p>对于不透明的View，设置opaque为YES，这样在绘制该View时，就不需要考虑被View覆盖的其他内容。</p>

<h3>4.3 避免CAlayer特效。</h3>

<p>给Cell中View加阴影会引起性能问题，如下面代码会导致滚动时有明显的卡顿：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowColor</span> <span class="o">=</span> <span class="n">color</span><span class="p">.</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowOffset</span> <span class="o">=</span> <span class="n">offset</span><span class="p">;</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowOpacity</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowRadius</span> <span class="o">=</span> <span class="n">radius</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve/'>http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkText - iOS 上支持语法高亮、HTML预览、文件导出的Markdown文本编辑器]]></title>
    <link href="http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios/"/>
    <updated>2014-12-10T21:29:06+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://blog.lessfun.com/images/app/marktext/marktext_appicon.png" width="120" height="120" title="MarkText App" alt="A Markdown Text Editor"></p>

<p>MarkText是iPhone上的Markdown文本编辑器。支持iCloud同步，实时语法高亮、带CSS的HTML预览、文件导出为HTML/PNG/PDF, 分享到Evernote，Dropbox或Email。</p>

<p>当前版本：1.0.3<br/>
更新时间：2015.05.06</p>

<h2>iPhone 屏幕截图</h2>

<div style="margin-top:30px;font-size:16px;line-height:20px;background:rgb(78,81,85);border-radius:4px;padding:4px;">
<div style="margin: 0 14px; max-height: 640px; min-height: 320px; overflow-x: auto; overflow-y: hidden; padding-bottom: 16px; white-space: nowrap;">
  <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_1.png" alt="1">
  <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_2.png" alt="2">
  <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_3.png" alt="3">
  <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_4.png" alt="4">
</div>
</div>


<h2>下载</h2>

<p><a href="https://itunes.apple.com/cn/app/marktext-markdown-text-editor/id948768793?mt=8"><img src="http://blog.lessfun.com/images/app/appstore_available.png" alt="从AppStore下载" /></a></p>

<h2>应用介绍</h2>

<!--more-->


<p>MarkText是iPhone与iPad上的一款Markdown文本编辑器，支持iCloud同步，实时语法高亮，能转换为HTML、PNG或PDF文件。通过Email发送格式化的markdown内容，或者调用第三方App打开转换后的文件。</p>

<h3>导入 &amp; 导出</h3>

<p>通过iTunes导入markdown文本文件，或通过MarkText创建，编辑时支持实时语法高亮显示。编辑完成之后，可以通过iTunes导出到电脑，或者转换为HTML、PNG、PDF文件并发送到Evernote、Dropbox、Email等第三方App。</p>

<h3>光标增强</h3>

<p>辅助工具条可以让你很方便地点击按钮插入Tabs、标题、列表、代码块，或者超链接。左右滑动工具条可以迅速移动光标；双指选择可以快速选择文本。</p>

<h3>HTML预览</h3>

<p>HTML预览支持CSS样式，语法高亮支持的特性：常规Markdown、MultiMarkdown、脚注、图片、表格和代码块。</p>

<h3>iCloud同步：</h3>

<p>通过iCloud，在所有设备自动同步存储所有文件。</p>

<h2>版本1.0.3 新特性</h2>

<ul>
<li>支持通过邮件发送HTML内容；</li>
<li>修复：HTML预览的加粗、斜体；</li>
<li>修复：关闭iCloud同步后无法新建文档；</li>
<li>修复：iOS 8下可能出现的光标抖动；</li>
<li>修复：在空行无法点击快捷输入。</li>
</ul>


<h2>主要功能</h2>

<ul>
<li>创建、编辑markdown格式的文本；</li>
<li>实时语法高亮；</li>
<li>带CSS样式的HTML预览；</li>
<li>修改主题配色；</li>
<li>通过iTunes导入、导出文件；</li>
<li>转换为HTML、PNG或PDF格式；</li>
<li>分享到Evernote、Dropbox或Email等App；</li>
<li>光标增强：滑动输入工具栏，快速移动光标；</li>
<li>支持的文件后缀：md、mmd、markdown、markdn、mdown、mkdn、markd、txt、text；</li>
<li>全文搜索；</li>
<li>字数统计;</li>
<li>支持正则的查找替换;</li>
<li>iCloud同步。</li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios/'>http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年在Apple Store申请iOS个人开发者账号详细流程]]></title>
    <link href="http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014/"/>
    <updated>2014-12-03T19:20:56+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014</id>
    <content type="html"><![CDATA[<p><img src="http://blog.lessfun.com/images/2014/12/idp_intro.png" alt="idp intro" /></p>

<!--more-->


<p>想要在AppStore上发布个人App从来都不是一件简单的事，光是申请开发者账号就可以折腾好久了。这是加入个人开发者计划，申请iOS开发者账号的最新教程，2014年版，供参考。什么时候，苹果才能为开发者考虑一下，减少各种繁琐的流程呢？</p>

<h2>前期准备</h2>

<ul>
<li>需要有一张支持美元支付的信用卡。</li>
</ul>


<h2>注册Apple ID</h2>

<ol>
<li><p>访问<a href="https://developer.apple.com/cn/programs/ios/">https://developer.apple.com/cn/programs/ios/</a> ，点击<code>立即注册</code>。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_register.png" alt="apple register" /></p></li>
<li><p>按照提示，选择注册类型：公司或个人。这里以「个人」为例，点击继续。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_register_continue.png" alt="register continue" /></p></li>
<li><p>注册或创建Apple ID。如果已有，可以继续使用。我选了新建。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_create_apple_id.png" alt="create apple id" /></p></li>
<li><p>按照要求填写接口。需要注意的地方：FirstName 和 LastName 要是自己的名字拼音，由于涉及到审核、支付、收款等操作，不要乱填。另外，中英文的姓名顺序一直都可以把人绕晕，总之，我在 FirstName 填了名字拼音，在 LastName 填姓氏拼音。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_fill_apple_id.png" alt="fill apple id" /></p></li>
<li><p>设置安全问题答案，找回密码需要。</p></li>
<li>验证邮箱，之后就可以使用新的AppleID了，如果在上面填错了资料，可以登录修改，比如姓名。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_verify_email.png" alt="verify email" /></li>
</ol>


<h2>填写开发者信息</h2>

<ol>
<li><p>在协议这里打钩，点击<code>Agree</code>。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_develop_agreement.png" alt="develop agreement" /></p></li>
<li><p>完善个人的一些信息。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_self_info.png" alt="self info" /></p></li>
<li><p>至此，Apple ID创建完成。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_register_finished.png" alt="register finished" /></p></li>
</ol>


<h2>加入开发者计划</h2>

<ol>
<li><p>这时候已有新的Apple ID，再次打开<a href="https://developer.apple.com/programs/ios">https://developer.apple.com/programs/ios</a> ，正式加入$99/年的个人开发者计划。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_enroll_now.png" alt="enroll now" /></p></li>
<li><p>选择刚刚创建的Apple ID：<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_select_apple_id.png" alt="select apple id" /></p></li>
<li><p>提示选择注册类型，个人或公司。这里选择个人。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_select_individual.png" alt="select individual" /></p></li>
<li><p>输入账单地址等信息，这里需要与信用卡账单显示的地址完全一致，中英文各输入一遍，注意输入手机号时，区号填<code>86</code>。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_credit_card_address.png" alt="credit card address" /></p></li>
<li><p>选择开发者计划类型。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_select_program.png" alt="select program" /></p></li>
<li><p>Review，检查没问题后，提交。</p></li>
<li>继续同意协议。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_program_license.png" alt="program license" /></li>
</ol>


<h2>提交订单、付款</h2>

<ol>
<li><p>终于到了付款这一步骤了，点击<code>Buy now</code>。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_buy_now.png" alt="buy now" /></p></li>
<li><p>再次要求登录Apple ID。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_login_again.png" alt="login again" /></p></li>
<li><p>输入信用卡信息进行付款。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_credit_card_info.png" alt="credit card info" /></p></li>
<li><p>提交订单。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_commit_order.png" alt="commit order" /></p></li>
<li><p>付款完成提示，等待苹果发送激活的邮件吧。</p></li>
</ol>


<p><img src="http://blog.lessfun.com/images/2014/12/idp_order_tips.png" alt="order tips" /></p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014/'>http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf]]></title>
    <link href="http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/"/>
    <updated>2014-11-22T15:59:18+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block</id>
    <content type="html"><![CDATA[<p>Objective C 的 <code>Block</code> 是一个很实用的语法，特别是与GCD结合使用，可以很方便地实现并发、异步任务。但是，如果使用不当，Block 也会引起一些循环引用问题(<code>retain cycle</code>)—— Block 会 retain ‘self’，而 ‘self‘ 又 retain 了 Block。因为在 ObjC 中，直接调用一个实例变量，会被编译器处理成 &lsquo;self->theVar&#8217;，&#8217;self&rsquo; 是一个 strong 类型的变量，引用计数会加 1，于是，self retains queue， queue retains block，block retains self。</p>

<!--more-->


<h3>解决 retain circle</h3>

<p>Apple 官方的建议是，传进 Block 之前，把 &lsquo;self&rsquo; 转换成 weak automatic 的变量，这样在 Block 中就不会出现对 self 的强引用。如果在 Block 执行完成之前，self 被释放了，weakSelf 也会变为 nil。</p>

<p>示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">__typeof__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>clang 的文档表示，在 doSomething 内，weakSelf 不会被释放。但，下面的情况除外：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">__typeof__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doOtherThing</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 doSomething 中，weakSelf 不会变成 nil，不过在 doSomething 执行完成，调用第二个方法 doOtherThing 的时候，weakSelf 有可能被释放，于是，strongSelf 就派上用场了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">__typeof__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">__strong</span> <span class="n">__typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">weakSelf</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">strongSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">strongSelf</span> <span class="n">doOtherThing</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__strong</code> 确保在 Block 内，strongSelf 不会被释放。</p>

<h3>总结</h3>

<ul>
<li>在 Block 内如果需要访问 self 的方法、变量，建议使用 weakSelf。</li>
<li>如果在 Block 内需要多次 访问 self，则需要使用 strongSelf。</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="http://dhoerl.wordpress.com/2013/04/23/i-finally-figured-out-weakself-and-strongself/">I finally figured out weakSelf and strongSelf</a></li>
<li><a href="http://stackoverflow.com/questions/21113963/is-the-weakself-strongself-dance-really-necessary-when-referencing-self-inside-a?rq=1">Is the weakSelf/strongSelf dance really necessary when referencing self inside a non-retained completion called from a UIViewController?</a></li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/'>http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 6.1 iPhone Simulator 8.1 Keyboard Issue：键盘无法显示，设置inputAccessoryView崩溃]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue/"/>
    <updated>2014-10-24T14:42:51+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue</id>
    <content type="html"><![CDATA[<p>随着iPhone 6 &amp; Plus的发布，苹果也陆续更新了XCode和开发模拟器，目前最新的Xcode版本是6.1，内置的Simulator的iOS版本是8.1。也许你兴致冲冲迫不及待地一下子升级到了最新版的开发环境，那么可能会遇到一些键盘上的问题：无法弹出键盘，或者弹出键盘后会莫名其妙地崩溃。</p>

<p>当然，不能怪你，你的项目在iOS7.1上是运行地好好的。只能怪苹果没有推出一个完美无Bug的开发工具。</p>

<!--more-->


<h2>1. 在XCode 6，iOS 8.1模拟器无法弹出键盘</h2>

<p>解决方法很简单，在Simulator的系统菜单中，取消勾选：</p>

<p><code>Hardware</code> &ndash;> <code>Keyboard</code> &ndash;> <code>Connect Hardware Keyboard</code>。</p>

<p>取消选中之后，键盘可以正常弹出，但是，无法使用硬件的键盘输入了，自己慢慢用鼠标点击模拟器里的键盘吧……</p>

<h2>2. 弹出键盘后会莫名其妙地崩溃</h2>

<p>也许你键盘能正常显示了，但是一显示就崩溃，在堆栈中有这样的字样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="o">***</span> <span class="n">First</span> <span class="n">throw</span> <span class="n">call</span> <span class="nl">stack:</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>      <span class="mi">0</span>   <span class="n">CoreFoundation</span>                      <span class="mh">0x02101df6</span> <span class="n">__exceptionPreprocess</span> <span class="o">+</span> <span class="mi">182</span>
</span><span class='line'>      <span class="mi">1</span>   <span class="n">libobjc</span><span class="p">.</span><span class="n">A</span><span class="p">.</span><span class="n">dylib</span>                     <span class="mh">0x01d8ba97</span> <span class="n">objc_exception_throw</span> <span class="o">+</span> <span class="mi">44</span>
</span><span class='line'>      <span class="mi">2</span>   <span class="n">CoreFoundation</span>                      <span class="mh">0x02101d1d</span> <span class="o">+</span><span class="p">[</span><span class="n">NSException</span> <span class="nl">raise:format:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">141</span>
</span><span class='line'>      <span class="mi">3</span>   <span class="n">UIKit</span>                               <span class="mh">0x008cff9c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIViewController</span> <span class="nl">_addChildViewController:performHierarchyCheck:notifyWillMove:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">210</span>
</span><span class='line'>      <span class="mi">4</span>   <span class="n">UIKit</span>                               <span class="mh">0x00f4b44d</span> <span class="o">-</span><span class="p">[</span><span class="n">UIInputWindowController</span> <span class="nl">changeToInputViewSet:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">576</span>
</span><span class='line'>      <span class="mi">5</span>   <span class="n">UIKit</span>                               <span class="mh">0x00f4c1be</span> <span class="n">__43</span><span class="o">-</span><span class="p">[</span><span class="n">UIInputWindowController</span> <span class="nl">setInputViewSet:</span><span class="p">]</span><span class="n">_block_invoke</span> <span class="o">+</span> <span class="mi">103</span>
</span><span class='line'>      <span class="mi">6</span>   <span class="n">UIKit</span>                               <span class="mh">0x007f73bf</span> <span class="o">+</span><span class="p">[</span><span class="n">UIView</span><span class="p">(</span><span class="n">Animation</span><span class="p">)</span> <span class="nl">performWithoutAnimation:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">82</span>
</span><span class='line'>      <span class="mi">7</span>   <span class="n">UIKit</span>                               <span class="mh">0x00f4bf9c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIInputWindowController</span> <span class="nl">setInputViewSet:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">374</span>
</span><span class='line'>      <span class="mi">8</span>   <span class="n">UIKit</span>                               <span class="mh">0x00ce9101</span> <span class="n">__64</span><span class="o">-</span><span class="p">[</span><span class="n">UIPeripheralHost</span><span class="p">(</span><span class="n">UIKitInternal</span><span class="p">)</span> <span class="nl">setInputViews:animationStyle:</span><span class="p">]</span><span class="n">_block_invoke1459</span> <span class="o">+</span> <span class="mi">43</span>
</span><span class='line'>      <span class="mi">9</span>   <span class="n">UIKit</span>                               <span class="mh">0x00f473af</span> <span class="o">-</span><span class="p">[</span><span class="n">UIInputWindowController</span> <span class="nl">performOperations:withAnimationStyle:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">56</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上崩溃也只在XCode 6，iOS 8出现，在iOS 7一切正常。</p>

<p>原因可能是你设置了<code>UITextField</code>或<code>UITextView</code>的<code>inputView</code>或<code>inputAccessoryView</code>为customView，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="c1">//在Xib或Storyboard中创建了一个自定义View</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UIView</span> <span class="o">*</span><span class="n">switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">inputAccessoryView</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码在iOS 8中是必定Crash的，因为<code>UITextView.inputAccessoryView</code>不能是其他View的子View。而上面的<code>switchKeyboardBar</code>先被添加到了当前<code>UIViewController</code>的<code>View</code>中，再被设置到<code>inputAccessoryView</code>，就会导致崩溃。</p>

<h3>2.1 解决方法</h3>

<p>不从Xib创建自定义View，而是在代码中手动创建，并且不添加到别的View中。</p>

<p>如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="c1">//注意这里没有 IBOutlet</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIView</span> <span class="o">*</span><span class="n">switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="n">switchKeyboardBar</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_switchKeyboardBar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">_switchKeyboardBar</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">CGRectGetWidth</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">),</span> <span class="mi">40</span><span class="p">)];</span>
</span><span class='line'>  
</span><span class='line'>          <span class="c1">//add other subviews</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">inputAccessoryView</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue/'>http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS AutoLayout与AutoSizing：自动布局，想说爱你真的好难]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing/"/>
    <updated>2014-10-17T14:31:20+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing</id>
    <content type="html"><![CDATA[<p>在iPhone Retina发布之前，还没有AutoLayout，因为屏幕只有一种尺寸。<br/>
当iPhone Retina发布之后，我没有用上AutoLayout，因为屏幕尺寸是用点来表示，布局写起来没什么不同。<br/>
当iPhone 5发布之后，屏幕尺寸终于加长了，但是由于有AutoSizing，所以我还是可以不用AutoLayout。<br/>
现在，iPhone 6和6 Plus发布了，屏幕又大了，我不得不开始考虑是否要使用AutoLayout。</p>

<!--more-->


<h2>1. Autolayout 与 Autosizing的区别</h2>

<p>虽然自iOS6之后，苹果推荐我们使用Autolayout布局，并且在Xib和Storyboard中默认帮我们打开了这个选项，但是在开发过程中，我们偏向于使用<code>Autosizing</code>，并且手动取消掉<code>Autolayout</code>，原因在于，Autolayout太繁琐复杂，而Autosizing简单并且能满足大部分的需求。</p>

<h3>Autosizing适用的情况</h3>

<p>当父视图被拉伸的时候，子视图能够适配父视图的新大小。其原理是，子视图有一个masks，用于指定与父视图上下左右边缘的距离，以及自身宽高的关系。</p>

<p>比如，指定子视图的右边缘紧跟着父视图的右边缘，那么父视图变大之后，子视图还是贴在父视图的右边。</p>

<p>这在大部分简单布局情况下非常有效。</p>

<h3>Autosizing的不足</h3>

<p>使用Autosizing，有一个前提，就是子视图的Frame是固定的，至少宽高是固定的，或者跟随着父视图的Frame变化。但是，如果希望多个子视图与父视图的边距固定，大小自动调整，Autosizing就爱莫能助了。</p>

<p>原因在于：<strong>Autosizing无法智能计算多个子View各自的Frame</strong>。</p>

<p>比如，我们希望在竖屏下布局是这样：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/StrutsProblem-portrait-design-423x500.png" alt="autosizing portrait" /></p>

<p>并且在横屏下布局是这样：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/StrutsProblem-landscape-looks-good-480x289.png" alt="autosizing landscape" /></p>

<p>除了手写代码调整Frame，单独用Autosizing是无法做到的。这时候就需要借助强大的Autolayout了。</p>

<h3>Autolayout的优点</h3>

<p>Autolayout使用约束来决定每个View的坐标、大小，约束可以针对SuperView，也可以针对其他任意一个SubView。</p>

<p>使用自动布局，你可以表达出视图与视图之间的关系，而不是明确地指定每个视图的Frame。通过约束，视图会自动计算它们应该呆在哪个位置，只要约束足够多，它们也能自动计算自己的大小。</p>

<p>只要指定了约束，无论屏幕大小怎么变化，它们都能自适应，这就是Autolayout的优点：妈妈再也不用担心你手写布局代码啦！也不用担心你为了适配各种屏幕大小而加班了。</p>

<h3>Autolayout的缺点</h3>

<p>Autolayout唯一的缺点就在于：过于复杂，较难上手。</p>

<h3>使用Autolayout，还是Autosizing？</h3>

<p>取决于项目需求。如果Autosizing完全能满足开发需求，那么就没必要使用复杂的Autolayout。但是，如果你已经被适配各种屏幕大小折腾得不成人形了，那么就要早日投入到Autolayout的怀抱了。</p>

<h2>Autolayout的使用</h2>

<p>首先要改变自己对布局的思考方式。你应该忘掉Frame，需要考虑的是subView A与subView B的上下左右的关系，以及与superView的关系。</p>

<h3>借助XCode</h3>

<p>在Xcode5之后，苹果已经尽力让开发者能更方便地使用Autolayout了。<br/>
通过<code>Xcode</code>&ndash;><code>Editor</code>&ndash;><code>Pin/Align</code>菜单为视图添加约束即可。</p>

<p>在XCode中除了通过菜单，还可以通过可视化的方式添加约束：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/Pin-green-view.png" alt="autolayout add constraint" /></p>

<p>如果你添加的约束不足以表达某个View的位置大小，XCode还会以黄色的辅助线发出警告，十分好用。</p>

<h3>手写约束Constraint</h3>

<p>XCode虽然强大，但是有时候我们也许希望借助代码来写Constraint。</p>

<p>加入你希望一个子view跟随父view的大小，但是与边距有10个点的距离：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIView</span> <span class="o">*</span><span class="n">superview</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIView</span> <span class="o">*</span><span class="n">view1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">view1</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="n">view1</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">greenColor</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">superview</span> <span class="nl">addSubview:</span><span class="n">view1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIEdgeInsets</span> <span class="n">padding</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">superview</span> <span class="nl">addConstraints:</span><span class="err">@</span><span class="p">[</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//view1 constraints</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSLayoutConstraint</span> <span class="nl">constraintWithItem:</span><span class="n">view1</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeTop</span>
</span><span class='line'>                                 <span class="nl">relatedBy:</span><span class="n">NSLayoutRelationEqual</span>
</span><span class='line'>                                    <span class="nl">toItem:</span><span class="n">superview</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeTop</span>
</span><span class='line'>                                <span class="nl">multiplier:</span><span class="mf">1.0</span>
</span><span class='line'>                                  <span class="nl">constant:</span><span class="n">padding</span><span class="p">.</span><span class="n">top</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSLayoutConstraint</span> <span class="nl">constraintWithItem:</span><span class="n">view1</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeLeft</span>
</span><span class='line'>                                 <span class="nl">relatedBy:</span><span class="n">NSLayoutRelationEqual</span>
</span><span class='line'>                                    <span class="nl">toItem:</span><span class="n">superview</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeLeft</span>
</span><span class='line'>                                <span class="nl">multiplier:</span><span class="mf">1.0</span>
</span><span class='line'>                                  <span class="nl">constant:</span><span class="n">padding</span><span class="p">.</span><span class="n">left</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSLayoutConstraint</span> <span class="nl">constraintWithItem:</span><span class="n">view1</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeBottom</span>
</span><span class='line'>                                 <span class="nl">relatedBy:</span><span class="n">NSLayoutRelationEqual</span>
</span><span class='line'>                                    <span class="nl">toItem:</span><span class="n">superview</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeBottom</span>
</span><span class='line'>                                <span class="nl">multiplier:</span><span class="mf">1.0</span>
</span><span class='line'>                                  <span class="nl">constant:</span><span class="o">-</span><span class="n">padding</span><span class="p">.</span><span class="n">bottom</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSLayoutConstraint</span> <span class="nl">constraintWithItem:</span><span class="n">view1</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeRight</span>
</span><span class='line'>                                 <span class="nl">relatedBy:</span><span class="n">NSLayoutRelationEqual</span>
</span><span class='line'>                                    <span class="nl">toItem:</span><span class="n">superview</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeRight</span>
</span><span class='line'>                                <span class="nl">multiplier:</span><span class="mi">1</span>
</span><span class='line'>                                  <span class="nl">constant:</span><span class="o">-</span><span class="n">padding</span><span class="p">.</span><span class="n">right</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'> <span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个约束都是这样的长长一串代码，设想一下需要添加6个约束的话……</p>

<p>幸好有了这个开源库：<a href="https://github.com/Masonry/Masonry">Masonry</a>。</p>

<p>使用这个库，代码添加约束就可以简介如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">view1</span> <span class="nl">mas_makeConstraints:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">edges</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">superview</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">insets</span><span class="p">(</span><span class="n">padding</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更新约束</h3>

<p>比如，我们自己实现了一个图文混排的TextView，添加到Xib时我们还不知道其高度，需要在代码中计算，那么就需要在代码里更新约束，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSLayoutConstraint</span> <span class="o">*</span><span class="n">richTextHeightConstraint</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">relayout</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">richTextHeightConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">richTextView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">needsUpdateConstraints</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>关键还是实践</h2>

<p>多说无益，贵在实践。只要有意识地去使用了一次，自然就会了。</p>

<h3>参考链接</h3>

<ul>
<li><a href="http://www.raywenderlich.com/50317/beginning-auto-layout-tutorial-in-ios-7-part-1">Beginning Auto Layout Tutorial in iOS 7: Part 1</a></li>
<li><a href="http://www.raywenderlich.com/50319/beginning-auto-layout-tutorial-in-ios-7-part-2">Beginning Auto Layout Tutorial in iOS 7: Part 2</a></li>
<li><a href="http://www.cocoachina.com/industry/20131203/7462.html">开始iOS 7中自动布局教程 一</a></li>
<li><a href="http://www.cnblogs.com/zer0Black/p/3977288.html">开始iOS 7中自动布局教程 二</a></li>
<li><a href="http://segmentfault.com/blog/ilikewhite/1190000000646452">从此爱上iOS Autolayout</a></li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing/'>http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmartSVN一直是Local Refreshing状态，却无法Update/Commit/Check Out]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/17/smartsvn-keep-local-refreshing-issue/"/>
    <updated>2014-10-17T11:00:22+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/17/smartsvn-keep-local-refreshing-issue</id>
    <content type="html"><![CDATA[<p><img src="http://www.wandisco.com/sites/all/themes/wandisco/assets/i/prod-detail/screens/smartsvn.png" alt="smart svn" /></p>

<!--more-->


<h3>Mac下最好的SVN客户端</h3>

<p>在Windows下，最好用的SVN客户端是TortoiseSVN，但是没有跨平台版本。在Mac OS X，也有好几个SVN客户端，比如：Versions，CornerStone，SmartSVN，其中，最好用的是SmartSVN。</p>

<p>SmartSVN有两个版本，专业版和基础版。专业版可以免费试用30天，如果不注册，自动切换为基础版。最重要的是，基础版已经涵盖了大部分的功能特性，实乃业界良心。</p>

<h3>SmartSVN 7.5.5的问题</h3>

<p>话说我一直以来在Mac系统都用着SmartSVN 7.5.5版，顺心顺手，直到昨晚，update的时候一直是<code>Local Refreshing</code>状态，数据也是有出没进，如下图：</p>

<p><img src="http://blog.lessfun.com/images/2014/10/lessfun_smart_svn_keep_local_refreshing.jpg" alt="smart svn slow local refresh" /></p>

<p><code>Out</code>的数据一直在增加，如果放任不管，甚至可以达到几百M。于是我意识到出问题了，但是用命令行的svn来操作却一切正常。怀疑是SmartSVN的<code>Log Cache</code>太大，于是删除了<code>Log Cache</code>文件，位置在<code>~/Library/Preferences/SmartSVN</code>下，问题依旧。</p>

<h3>解决Keep Local Refreshing的方法</h3>

<p>无奈，只好使出重装大法。下载、安装了SmartSVN 8.6版本后，直接弹出了下面的提示：</p>

<p><img src="http://blog.lessfun.com/images/2014/10/lessfun_smart_svn_update_tips.jpg" alt="smart svn slow local refresh" /></p>

<p>实在是后知后觉啊，既然你那么Smart，就不能在出问题的时候直接弹提示吗？非得等到人家摸索并安装了最新版后才弹这个。</p>

<p>好消息是，安装8.6版本后，问题解决。</p>

<h3>更新：</h3>

<p>SmartSVN更新不了，问题不在于客户端本身，而是svn server端禁用了SSLv3引起的，为了避免这个问题： <a href="https://poodle.io/">https://poodle.io/</a></p>

<p>至于为什么更新为SmartSVN 8.6之后，问题解决，是因为8.6版本内置的是svn1.8，在SSLv3无法连接的时候，可能自动切换为tlsv模式。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/10/17/smartsvn-keep-local-refreshing-issue/'>http://blog.lessfun.com/blog/2014/10/17/smartsvn-keep-local-refreshing-issue/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS通过宏定义快速调整View的Frame]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/15/ios-adjust-view-frame-quickly-with-macro/"/>
    <updated>2014-10-15T18:45:03+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/15/ios-adjust-view-frame-quickly-with-macro</id>
    <content type="html"><![CDATA[<p>在iOS开发中，经常需要在运行时动态修改View Frame，比如，theView的X坐标右移2个点，Y坐标下移2个点，常用的方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">CGRect</span> <span class="n">newFrame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">theView</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">newFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">newFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">theView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">newFrame</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>逻辑很简单，就是代码繁琐了点，设想一下，假如有5个以上的子View需要调整位置与大小……</p>

<!--more-->


<h3>解决方法</h3>

<p>也很简单，就是封装为通用的宏，或者方法(有些人比较反感C语言样式的宏定义)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">CGRectAdjust</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">w1</span><span class="p">,</span> <span class="n">h1</span><span class="p">)</span>    <span class="n">CGRectMake</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">x1</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">y1</span><span class="p">,</span>  <span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="n">w1</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="n">h1</span><span class="p">)</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">CGRectSetSize</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>    <span class="n">CGRectMake</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">CGRectSetOrigin</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>    <span class="n">CGRectMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">ViewAdjustFrame</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">w1</span><span class="p">,</span> <span class="n">h1</span><span class="p">)</span>   <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectAdjust</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">w1</span><span class="p">,</span> <span class="n">h1</span><span class="p">)</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">ViewSetSize</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>   <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectSetSize</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">ViewSetOrigin</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>   <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectSetOrigin</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，就可以这样调整UIView的Frame了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="c1">//大小不变，位置往右下方移动2个点</span>
</span><span class='line'>    <span class="n">ViewAdjustFrame</span><span class="p">(</span><span class="n">theView</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/10/15/ios-adjust-view-frame-quickly-with-macro/'>http://blog.lessfun.com/blog/2014/10/15/ios-adjust-view-frame-quickly-with-macro/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App适配iOS8遇到的兼容问题：键盘方向与StatusBar方向不一致，阻止锁屏失效，OpenGL崩溃]]></title>
    <link href="http://blog.lessfun.com/blog/2014/09/24/ios8-issue-keyboard-orientation-and-idletimerdisabled-not-working/"/>
    <updated>2014-09-24T13:59:29+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/09/24/ios8-issue-keyboard-orientation-and-idletimerdisabled-not-working</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://blog.lessfun.com/images/2014/09/lessfun_ios8_adapt.png" title="ios8 adapt" alt="ios8 adapt">
苹果正式发布iOS8系统，到现在安装覆盖率已达48%，而iOS7的安装率是49%。所以，各位开发者又有得忙了，把所有的App都升级并适配到iOS8系统可不是一件轻松的事。</p>

<p>下面罗列一下我在适配iOS8过程中遇到的兼容问题——而同样的代码在iOS6/7是完全没问题的。</p>

<!--more-->


<h2>1. 键盘弹出方向与StatusBar方向不一致</h2>

<p>在App中，第一个ViewController是只支持竖屏方向(Portrait)的，切换到第二个页面，默认也是Portrait，但用户可以点击按钮切换为横屏(Landscape)。</p>

<p>所以，我把App-Info.plist只选中了<code>Portrait</code>一项，并且在<code>Root ViewController</code>重载了以下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="n">shouldAutorotate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">supportedInterfaceOrientations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIInterfaceOrientationMaskPortrait</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="n">preferredInterfaceOrientationForPresentation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIInterfaceOrientationPortrait</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在需要切换到横屏的时候，调用以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">onFullScreenButtonTouchUpInside</span><span class="o">:</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">adjustViewFrameToFullScreen</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">setStatusBarOrientation</span><span class="o">:</span><span class="n">UIInterfaceOrientationLandscapeRight</span> <span class="n">animated</span><span class="o">:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于在iOS6、7中，键盘方向是跟随状态栏方向的，所以一切表现正常，横屏下，无论设备方向怎样，键盘都是横着弹出。</p>

<p>但是，在iOS8中，键盘却随着设备方向弹出了。换言之，<strong>即使Interface Orientation为Landscape，但Device Orientation为Portrait，键盘就会以Portrait的方向弹出</strong>。<br/>
如下图：</p>

<p><img class="center" src="http://blog.lessfun.com/images/2014/09/lessfun_ios8_adapt_keyboard.png" title="ios8 adapt keyboard" alt="ios8 adapt keyboard"></p>

<h3>1.1 解决方法</h3>

<p>我想要的是键盘不管设备方向，只关注状态栏方向，也就是StatusBarOrientation。由于iOS8新出不久，在网上没找到解决方案。后来我一同事发现手动更改设备方向可以解决这一问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">onFullScreenButtonTouchUpInside</span><span class="o">:</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">adjustViewFrameToFullScreen</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">setStatusBarOrientation</span><span class="o">:</span><span class="n">UIInterfaceOrientationLandscapeRight</span> <span class="n">animated</span><span class="o">:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//改设备方向</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">IsIOS8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">setValue</span><span class="o">:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="n">numberWithInteger</span><span class="o">:</span><span class="n">UIDeviceOrientationLandscapeLeft</span><span class="p">]</span> <span class="n">forKey</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;orientation&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 禁用屏幕自动锁定失效</h2>

<p>本来，防止屏幕锁定只需一句代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">setIdleTimerDisabled</span><span class="o">:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，在iOS8中，偶尔会失效。测试人员发现了这个问题是在弹出键盘点击发送后必现，而原因不明。因为键盘出现与隐藏，理论上不应该影响这个<code>idleTimerDisabled</code>的属性。暂且认为是iOS8的Bug吧。</p>

<h3>2.1 解决方法</h3>

<p>在键盘收起的时候，重设<code>IdleTimerDisabled</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">onKeyboardDidHide</span><span class="o">:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">notification</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">IsIOS8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">setIdleTimerDisabled</span><span class="o">:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. OpenGL ES渲染时崩溃</h2>

<p>在iOS中使用OpenGL ES渲染，切换到后台时需要停止渲染，否则会引起崩溃。见这里：<a href="https://developer.apple.com/library/ios/qa/qa1766/_index.html">How to fix OpenGL ES application crashes when moving to the background</a></p>

<p>但是在iOS8中，即使不是切换到后台，而是通过<code>NavigationController</code>切换到另一个ViewController再切回来，也会引起崩溃，崩溃点在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="p">[</span><span class="n">EAGLContext</span> <span class="n">presentRenderbuffer</span><span class="o">:</span><span class="n">GL_RENDERBUFFER</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>猜测可能是，在iOS 8中，如果OpenGL的视图如果切换到不可见的ViewController，也需要停止绘制，否则也会引起在后台渲染OpenGL类似的崩溃。</p>

<h3>3.1 解决方法</h3>

<p>在ViewWillDisapper的时候停止渲染。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewWillDisappear</span><span class="o">:</span><span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="n">animated</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">super</span> <span class="n">viewWillDisappear</span><span class="o">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">_videoView</span> <span class="o">&amp;&amp;</span> <span class="n">IsIOS8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">_videoView</span> <span class="n">pauseVideo</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewWillAppear</span><span class="o">:</span><span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="n">animated</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">super</span> <span class="n">viewWillAppear</span><span class="o">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">_videoView</span> <span class="o">&amp;&amp;</span> <span class="n">IsIOS8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">_videoView</span> <span class="n">resumeVideo</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>iOS的兼容真是个蛋疼的问题。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/09/24/ios8-issue-keyboard-orientation-and-idletimerdisabled-not-working/'>http://blog.lessfun.com/blog/2014/09/24/ios8-issue-keyboard-orientation-and-idletimerdisabled-not-working/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
</feed>
