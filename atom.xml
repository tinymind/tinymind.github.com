<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[浮生猎趣]]></title>
  <link href="http://blog.lessfun.com/atom.xml" rel="self"/>
  <link href="http://blog.lessfun.com/"/>
  <updated>2015-12-25T18:39:22+08:00</updated>
  <id>http://blog.lessfun.com/</id>
  <author>
    <name><![CDATA[lslin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[非越狱 iOS 在后台截屏、录制屏幕的相关实现]]></title>
    <link href="http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background/"/>
    <updated>2015-12-25T16:54:31+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background</id>
    <content type="html"><![CDATA[<h2>需求</h2>

<p>先简单介绍一下标题的含义。也许你看到<code>iOS</code>、<code>截屏</code>，觉得这有什么好长篇大论的，小菜一碟而已。可能你忽略了<code>后台</code>这个关键词。</p>

<p>这里的关键就在于怎么在 App 切换到后台之后，仍然能够持续截取用户屏幕内容。解决了这点，剩下的就是把图片合成视频，有必要的话再加入声音。</p>

<p>另外，需要说明的是，实现后台截屏只能使用私有 API，而苹果是不允许这类 App 上架的，就算你用了一些技巧（比如动态加载私有 API 以绕过 App Store 的审核）而上架，假以时日苹果也会发现并且下架处理。<a href="http://stackoverflow.com/questions/11090184/how-does-the-ios-app-display-recorder-record-the-screen-without-using-private-ap">Display Recorder</a> 就是这么做并且被下架的，所以现在它发到越狱市场了。</p>

<h2>作用</h2>

<p>在 iOS 上录制全局屏幕，保存成一个视频，这么一个小众需求到底有什么作用？虽然一般用户都不会用到，不过它还是有点用的：</p>

<ul>
<li>录制 App 使用的视频教程（而不是图片+文字、图片+文字、图片+文字）；</li>
<li>如果 App 有个在某些用户机器上必现的 Bug，可以让他把操作记录下来，发给开发者（这样码农们就没办法再推脱：“在我这里是好的！肯定是你的打开方式不对！”）；</li>
<li>如果你是游戏大神，玩得一手好手游，还可以把你在游戏中的神操作保存下来供日后回味（或者分享出去让小白们膜拜）。</li>
</ul>


<!--more-->


<h2>实现</h2>

<p>iOS 的系统封闭，API 变化无常，所以并没有一个可以全版本 iOS 系统通用的后台截屏方法。下面所列的方法都因系统版本而异，前提都是非越狱。</p>

<h3>1. _UICreateScreenUIImage (&lt; iOS 6)</h3>

<p><a href="http://iphonedevwiki.net/index.php/UIImage#UICreateScreenUIImage">_UICreateScreenUIImage</a> 是 UIImage 的一个私有方法，在<strong> iOS 6</strong>以前可以用于后台调用截屏，方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">OBJC_EXTERN</span> <span class="n">UIImage</span> <span class="o">*</span><span class="nf">_UICreateScreenUIImage</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">takeScreenshot</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">screenImage</span> <span class="o">=</span> <span class="n">_UICreateScreenUIImage</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，在 iOS 6 以后，这个方法不允许在 App 切到后台的时候调用了，会在调试控制台输出不能调用的错误提示。</p>

<h3>2. CARenderServerRenderDisplay (&lt; iOS 7)</h3>

<p><a href="https://github.com/coolstar/RecordMyScreen">RecordMyScreen</a> 用的就是这个方法，不过实测在 iOS 7以上，只能截到黑色的空白图片。网上说 RecordMyScreen 就是 Display Recorder 的开源版本。</p>

<p>其中涉及到后台截屏的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">IOSurfaceLock</span><span class="p">(</span><span class="n">_surface</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Take currently displayed image from the LCD</span>
</span><span class='line'><span class="n">CARenderServerRenderDisplay</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">CFSTR</span><span class="p">(</span><span class="s">&quot;LCD&quot;</span><span class="p">),</span> <span class="n">_surface</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Unlock the surface</span>
</span><span class='line'><span class="n">IOSurfaceUnlock</span><span class="p">(</span><span class="n">_surface</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Make a raw memory copy of the surface</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">baseAddr</span> <span class="o">=</span> <span class="n">IOSurfaceGetBaseAddress</span><span class="p">(</span><span class="n">_surface</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">totalBytes</span> <span class="o">=</span> <span class="n">_bytesPerRow</span> <span class="o">*</span> <span class="n">_height</span><span class="p">;</span>
</span><span class='line'><span class="n">NSMutableData</span> <span class="o">*</span><span class="n">rawDataObj</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableData</span> <span class="nl">dataWithBytes:</span><span class="n">baseAddr</span> <span class="nl">length:</span><span class="n">totalBytes</span><span class="p">];</span>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，经过测试，在iOS 7和iOS 8上，这个方法没办法正确截屏，只能得到黑色的图片。而且，虽说 RecordMyScreen 是一个开源项目，但实际上它并不是一份完整可用的代码，开源到中途，作者发现有人在窃取他的项目源码，于是停止了开源。虽然如此，该项目中对于音视频的编码、合成部分的处理都是很值得参考的。</p>

<h3>3. createScreenIOSurface(&lt; iOS 7?)</h3>

<p><a href="https://github.com/kishikawakatsumi/ScreenRecorder">ScreenRecorder</a> 用了这个方法，但是实际上这个项目没办法在后台运行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">UIWindow</span> <span class="nl">(ScreenRecorder)</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">CFTypeRef</span><span class="p">)</span><span class="nf">createScreenIOSurface</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">screenShot</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CFTypeRef</span> <span class="n">surface</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIWindow</span> <span class="n">createScreenIOSurface</span><span class="p">];</span>
</span><span class='line'>    <span class="n">backingData</span> <span class="o">=</span> <span class="n">surface</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">pixelBufferAttributes</span> <span class="o">=</span> <span class="err">@</span><span class="p">{(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kCVPixelBufferPixelFormatTypeKey</span> <span class="o">:</span> <span class="err">@</span><span class="p">(</span><span class="n">kCVPixelFormatType_32BGRA</span><span class="p">)};</span>
</span><span class='line'>    <span class="n">status</span> <span class="o">=</span> <span class="n">CVPixelBufferCreateWithIOSurface</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">surface</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFDictionaryRef</span><span class="p">)(</span><span class="n">pixelBufferAttributes</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 终极方法 IOSurface (&lt; iOS 9)</h3>

<p>好吧，前面提到的几种方法在 iOS 7 以上版本都没啥卵用。现在说的这个方法是可以在 iOS 7 和 iOS 8 上使用的，只是 iOS 9 禁用了该方法。</p>

<p>与 RecordMyScreen 类似，还是基于 IOSurface 私有库，只是调用的方法不太一样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">screenshot</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">IOMobileFramebufferConnection</span> <span class="n">connect</span><span class="p">;</span>
</span><span class='line'>    <span class="n">kern_return_t</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="n">CoreSurfaceBufferRef</span> <span class="n">screenSurface</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">io_service_t</span> <span class="n">framebufferService</span> <span class="o">=</span> <span class="n">IOServiceGetMatchingService</span><span class="p">(</span><span class="n">kIOMasterPortDefault</span><span class="p">,</span> <span class="n">IOServiceMatching</span><span class="p">(</span><span class="s">&quot;AppleH1CLCD&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">framebufferService</span><span class="p">)</span>
</span><span class='line'>        <span class="n">framebufferService</span> <span class="o">=</span> <span class="n">IOServiceGetMatchingService</span><span class="p">(</span><span class="n">kIOMasterPortDefault</span><span class="p">,</span> <span class="n">IOServiceMatching</span><span class="p">(</span><span class="s">&quot;AppleM2CLCD&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">framebufferService</span><span class="p">)</span>
</span><span class='line'>        <span class="n">framebufferService</span> <span class="o">=</span> <span class="n">IOServiceGetMatchingService</span><span class="p">(</span><span class="n">kIOMasterPortDefault</span><span class="p">,</span> <span class="n">IOServiceMatching</span><span class="p">(</span><span class="s">&quot;AppleCLCD&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">IOMobileFramebufferOpen</span><span class="p">(</span><span class="n">framebufferService</span><span class="p">,</span> <span class="n">mach_task_self</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">connect</span><span class="p">);</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="n">IOMobileFramebufferGetLayerDefaultSurface</span><span class="p">(</span><span class="n">connect</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">screenSurface</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">uint32_t</span> <span class="n">aseed</span><span class="p">;</span>
</span><span class='line'>    <span class="n">IOSurfaceLock</span><span class="p">((</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">,</span> <span class="mh">0x00000001</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">aseed</span><span class="p">);</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">width</span> <span class="o">=</span> <span class="n">IOSurfaceGetWidth</span><span class="p">((</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">height</span> <span class="o">=</span> <span class="n">IOSurfaceGetHeight</span><span class="p">((</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFMutableDictionaryRef</span> <span class="n">dict</span><span class="p">;</span>
</span><span class='line'><span class="n">size_t</span> <span class="n">pitch</span> <span class="o">=</span> <span class="n">width</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="n">width</span><span class="o">*</span><span class="n">height</span><span class="o">*</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">bPE</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">pixelFormat</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;A&#39;</span><span class="p">,</span><span class="sc">&#39;R&#39;</span><span class="p">,</span><span class="sc">&#39;G&#39;</span><span class="p">,</span><span class="sc">&#39;B&#39;</span><span class="p">};</span>
</span><span class='line'>    <span class="n">dict</span> <span class="o">=</span> <span class="n">CFDictionaryCreateMutable</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kCFTypeDictionaryKeyCallBacks</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kCFTypeDictionaryValueCallBacks</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceIsGlobal</span><span class="p">,</span> <span class="n">kCFBooleanTrue</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceBytesPerRow</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pitch</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceBytesPerElement</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">bPE</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceWidth</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">width</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceHeight</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">height</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfacePixelFormat</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="n">pixelFormat</span><span class="p">));</span>
</span><span class='line'>    <span class="n">CFDictionarySetValue</span><span class="p">(</span><span class="n">dict</span><span class="p">,</span> <span class="n">kIOSurfaceAllocSize</span><span class="p">,</span> <span class="n">CFNumberCreate</span><span class="p">(</span><span class="n">kCFAllocatorDefault</span><span class="p">,</span> <span class="n">kCFNumberSInt32Type</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IOSurfaceRef</span> <span class="n">destSurf</span> <span class="o">=</span> <span class="n">IOSurfaceCreate</span><span class="p">(</span><span class="n">dict</span><span class="p">);</span>
</span><span class='line'>    <span class="n">IOSurfaceAcceleratorRef</span> <span class="n">outAcc</span><span class="p">;</span>
</span><span class='line'>    <span class="n">IOSurfaceAcceleratorCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">outAcc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">IOSurfaceAcceleratorTransferSurface</span><span class="p">(</span><span class="n">outAcc</span><span class="p">,</span> <span class="p">(</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">,</span> <span class="n">destSurf</span><span class="p">,</span> <span class="n">dict</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="n">IOSurfaceUnlock</span><span class="p">((</span><span class="n">IOSurfaceRef</span><span class="p">)</span><span class="n">screenSurface</span><span class="p">,</span> <span class="n">kIOSurfaceLockReadOnly</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">aseed</span><span class="p">);</span>
</span><span class='line'><span class="n">CFRelease</span><span class="p">(</span><span class="n">outAcc</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGDataProviderRef</span> <span class="n">provider</span> <span class="o">=</span>  <span class="n">CGDataProviderCreateWithData</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span>  <span class="n">IOSurfaceGetBaseAddress</span><span class="p">(</span><span class="n">destSurf</span><span class="p">),</span> <span class="p">(</span><span class="n">width</span> <span class="o">*</span> <span class="n">height</span> <span class="o">*</span> <span class="mi">4</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="n">cgImage</span> <span class="o">=</span> <span class="n">CGImageCreate</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span>
</span><span class='line'><span class="mi">8</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="n">IOSurfaceGetBytesPerRow</span><span class="p">(</span><span class="n">destSurf</span><span class="p">),</span>
</span><span class='line'> <span class="n">CGColorSpaceCreateDeviceRGB</span><span class="p">(),</span> <span class="n">kCGImageAlphaNoneSkipFirst</span> <span class="o">|</span><span class="n">kCGBitmapByteOrder32Little</span><span class="p">,</span> <span class="n">provider</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">YES</span><span class="p">,</span> <span class="n">kCGRenderingIntentDefault</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">cgImage</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">image</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>见：</p>

<ul>
<li><a href="http://stackoverflow.com/questions/21870667/iomobileframebuffergetlayerdefaultsurface-does-not-work-on-ios7-retina">IOMobileFramebufferGetLayerDefaultSurface does not work on ios7 retina</a></li>
<li><a href="http://stackoverflow.com/questions/32239969/iomobileframebuffergetlayerdefaultsurface-not-working-on-ios-9">IOMobileFramebufferGetLayerDefaultSurface not working on iOS 9</a></li>
</ul>


<h2>合成</h2>

<p>在 App 后台得到截图之后怎么处理成视频呢？其实在 RecordMyScreen 中有完整的代码可以参考，只是它里面截屏的方法需要替换为本文提到的<code>第四种</code>实现，不赘述。</p>

<h2>注意</h2>

<ol>
<li>需要修改 App 的 plist 文件，使其能在后台运行。</li>
<li>需要打开设备的 Access Touch 功能，否则对于 OpenGL 实现的游戏 App，会黑屏。</li>
<li>iPad Retina 屏幕像素过大，处理起来很吃力，需要减小生成的图片大小。</li>
</ol>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background/'>http://blog.lessfun.com/blog/2015/12/25/ios-record-screen-in-background/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用LSLog XCode插件来过滤Log及修改Log的文本颜色]]></title>
    <link href="http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console/"/>
    <updated>2015-12-18T18:34:16+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console</id>
    <content type="html"><![CDATA[<p><img src="https://github.com/tinymind/LSLog-XCode/raw/master/LSLog-XCode.gif" alt="LSLog-XCode" /></p>

<!--more-->


<h2>1. 功能</h2>

<p>LSLog-XCode 是一款 XCode 插件，用于过滤 XCode 调试控制台输出的 Log，支持正则表达式，可自定义前缀字符串以区分不同等级的Log，并修改对应的文字颜色。</p>

<p>LSLog-XCode 内置支持 <a href="https://github.com/robbiehanson/XcodeColors">XCodeColors</a> 插件。如果你没有安装 XCodeColors，LSLog-XCode 会采用类似 XCodeColors 的语法，高亮显示调试器打印的 Log。</p>

<h3>1.1 默认配置</h3>

<p>不同 Log 等级对应的前缀字符串及默认文字颜色：</p>

<ul>
<li>Error: <code>&lt;ERROR&gt;</code>, RGB(214, 57, 30)</li>
<li>Warn: <code>&lt;WARNING&gt;</code>, RGB(204, 121, 32)</li>
<li>Info: <code>&lt;INFO&gt;</code>, RGB(32, 32, 32)</li>
<li>Verbose: <code>&lt;VERBOSE&gt;</code>, RGB(0, 0, 255)</li>
</ul>


<h2>2. 安装</h2>

<ul>
<li>通过 <a href="https://github.com/alcatraz/Alcatraz">Alcatraz</a> 安装。</li>
<li>下载工程文件 <a href="https://github.com/tinymind/LSLog-XCode">LSLog-XCode</a>，编译运行，然后<strong>重启XCode</strong>。</li>
</ul>


<h2>3. 卸载</h2>

<p>LSLog-XCode.xcplugin 被保存在 <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code>，如果要卸载，只需删除这个文件：<code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/LSLog-XCode.xcplugin</code>。</p>

<h2>4. 感谢</h2>

<ul>
<li><a href="https://github.com/yuhua-chen/MCLog">MCLog</a></li>
<li><a href="https://github.com/robbiehanson/XcodeColors">XCodeColors</a><blockquote class='post_original_block'>
          原文作者：
          <a href='http://blog.lessfun.com'>lslin</a><br/>
          原文链接：
          <a href='http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console/'><a href="http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console/">http://blog.lessfun.com/blog/2015/12/18/lslog-xcode-plugin-to-filter-and-colorize-debugging-console/</a></a><br/>
          版权声明：自由转载-非商用-非衍生-保持署名 |
          <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
          </blockquote></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIViewController Push & Pop 的那些坑]]></title>
    <link href="http://blog.lessfun.com/blog/2015/09/09/uiviewcontroller-push-pop-trap/"/>
    <updated>2015-09-09T18:37:32+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/09/09/uiviewcontroller-push-pop-trap</id>
    <content type="html"><![CDATA[<p>iOS开发中，UIViewController是最常用的一个类，在Push和Pop的过程中也会经常出现一些UI卡死、App闪退的问题，本文总结了开发中遇到的一些坑。</p>

<p>大部分视图控制器切换导致的问题，根本原因都是使用了动画，因为执行动画需要时间，在动画未完成的时候又进行另一个切换动画，容易产生异常，假如在 Push 和 Pop 的过程不使用动画，世界会清静很多。所以本文只讨论使用了动画的视图切换。也就是使用以下方式的 Push 和 Pop：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">controller</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h2>1. 连续 Push</h2>

<p>连续两次 Push 不同的 ViewController 是没问题的，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">onPush:</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">vc1</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">vc2</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，如果不小心连续 Push 了同一个 ViewController，并且 animated 为 YES，则会 Crash：<code>Pushing the same view controller instance more than once is not supported</code>。</p>

<p>这种情况很有可能发生，特别是界面上触发切换的入口不止一处，并且各个入口的点击没有互斥的话，用两根手指同时点击屏幕就会同时触发两个入口的切换了。多点触碰导致的同时 Push，基本上是防不胜防，当界面元素很复杂的时候，特别容易出现这个问题，而指望从用户交互的角度上避免这个问题是不可能的，测试美眉以暴力测试、胡乱点击而著称，防得了用户防不住测试。</p>

<p>所以我们需要从根本上解决这个问题：当一个 Push 动画还没完成的时候，不允许再 Push 别的 ViewController。这样处理是没有问题的，因为连续带动画地 Push 多个 ViewController 肯定不是开发和产品的意愿，就算有这种需求，也可以通过禁用动画的方式来解决。</p>

<h3>1.1 解决方案</h3>

<p>继承 UINavigationController 并重载 pushViewController 方法。</p>

<ol>
<li>如果是动画 Push，并且属性 <code>isSwitching == YES</code>，则忽略这次 Push。</li>
<li>否则，设置 <code>isSwitching = YES</code> 再继续切换。</li>
<li>等到动画切换完毕，需要再把 <code>isSwitching</code> 改为 NO。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MYNavigationController</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">UINavigationControllerDelegate</span><span class="p">,</span> <span class="n">UIGestureRecognizerDelegate</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">isSwitching</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MYNavigationController</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 重载 push 方法</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pushViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">animated</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span><span class="p">;</span> <span class="c1">// 1. 如果是动画，并且正在切换，直接忽略</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>       <span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span> <span class="c1">// 2. 否则修改状态</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">pushViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UINavigationControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span> <span class="nf">didShowViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span> <span class="c1">// 3. 还原状态</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 连续 Pop</h2>

<p>连续 Pop ，可能会导致两种情况。</p>

<h3>2.1 self 被释放</h3>

<p>例如，下面的代码，执行到第二句的时候，self 已经被释放了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span> <span class="c1">// self 被 release</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span> <span class="c1">// 继续访问 self 导致异常</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.2 界面异常、崩溃</h3>

<p>假如你避开了上面那种调用，换成了这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[</span><span class="n">AppDelegate</span> <span class="n">sharedObject</span><span class="p">].</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">AppDelegate</span> <span class="n">sharedObject</span><span class="p">].</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于访问的是全局的 AppDelegate，自然避免了调用者被释放的问题，但是，连续两次动画 Pop，在iOS 7.X 系统会导致界面混乱、卡死、莫名其妙的崩溃（iOS 8 貌似不存在类似的问题）。比如，下面这个崩溃的堆栈：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">{</span><span class="s">&quot;bundleID&quot;</span><span class="o">:</span><span class="s">&quot;com.enterprise.kiwi&quot;</span><span class="p">,</span><span class="s">&quot;app_name&quot;</span><span class="o">:</span><span class="s">&quot;kiwi&quot;</span><span class="p">,</span><span class="s">&quot;bug_type&quot;</span><span class="o">:</span><span class="s">&quot;109&quot;</span><span class="p">,</span><span class="s">&quot;name&quot;</span><span class="o">:</span><span class="s">&quot;kiwi&quot;</span><span class="p">,</span><span class="s">&quot;os_version&quot;</span><span class="o">:</span><span class="s">&quot;iPhone OS 7.1.1 (11D201)&quot;</span><span class="p">,</span><span class="s">&quot;version&quot;</span><span class="o">:</span><span class="s">&quot;1190 (3.1.0)&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">Incident</span> <span class="nl">Identifier:</span> <span class="n">FE85E864</span><span class="o">-</span><span class="mi">393</span><span class="n">C</span><span class="o">-</span><span class="mi">417</span><span class="n">D</span><span class="o">-</span><span class="mi">9</span><span class="n">EA0</span><span class="o">-</span><span class="n">B4324BEEDA2F</span>
</span><span class='line'><span class="n">CrashReporter</span> <span class="nl">Key:</span>   <span class="n">a54805586b9487c324ff5f42f4ac93dabbe9f23e</span>
</span><span class='line'><span class="n">Hardware</span> <span class="nl">Model:</span>      <span class="n">iPhone6</span><span class="p">,</span><span class="mi">1</span>
</span><span class='line'><span class="nl">Process:</span>             <span class="n">kiwi</span> <span class="p">[</span><span class="mi">1074</span><span class="p">]</span>
</span><span class='line'><span class="nl">Path:</span>                <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">mobile</span><span class="o">/</span><span class="n">Applications</span><span class="o">/</span><span class="n">D81CE836</span><span class="o">-</span><span class="mf">3F</span><span class="mi">88</span><span class="o">-</span><span class="mi">481</span><span class="n">C</span><span class="o">-</span><span class="n">AA5A</span><span class="o">-</span><span class="mi">21</span><span class="n">DA530234E0</span><span class="o">/</span><span class="n">kiwi</span><span class="p">.</span><span class="n">app</span><span class="o">/</span><span class="n">kiwi</span>
</span><span class='line'><span class="nl">Identifier:</span>          <span class="n">com</span><span class="p">.</span><span class="n">yy</span><span class="p">.</span><span class="n">enterprise</span><span class="p">.</span><span class="n">kiwi</span>
</span><span class='line'><span class="nl">Version:</span>             <span class="mi">1190</span> <span class="p">(</span><span class="mf">3.1.0</span><span class="p">)</span>
</span><span class='line'><span class="n">Code</span> <span class="nl">Type:</span>           <span class="n">ARM</span><span class="o">-</span><span class="mi">64</span> <span class="p">(</span><span class="n">Native</span><span class="p">)</span>
</span><span class='line'><span class="n">Parent</span> <span class="nl">Process:</span>      <span class="n">launchd</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">Date</span><span class="o">/</span><span class="nl">Time:</span>           <span class="mi">2015</span><span class="o">-</span><span class="mi">09</span><span class="o">-</span><span class="mi">08</span> <span class="mi">15</span><span class="o">:</span><span class="mi">44</span><span class="o">:</span><span class="mf">57.327</span> <span class="o">+</span><span class="mi">0800</span>
</span><span class='line'><span class="n">OS</span> <span class="nl">Version:</span>          <span class="n">iOS</span> <span class="mf">7.1.1</span> <span class="p">(</span><span class="mi">11</span><span class="n">D201</span><span class="p">)</span>
</span><span class='line'><span class="n">Report</span> <span class="nl">Version:</span>      <span class="mi">104</span>
</span><span class='line'>
</span><span class='line'><span class="n">Exception</span> <span class="nl">Type:</span>  <span class="n">EXC_CRASH</span> <span class="p">(</span><span class="n">SIGSEGV</span><span class="p">)</span>
</span><span class='line'><span class="n">Exception</span> <span class="nl">Codes:</span> <span class="mh">0x0000000000000000</span><span class="p">,</span> <span class="mh">0x0000000000000000</span>
</span><span class='line'><span class="n">Triggered</span> <span class="n">by</span> <span class="nl">Thread:</span>  <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">Thread</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'><span class="mi">0</span>   <span class="n">libobjc</span><span class="p">.</span><span class="n">A</span><span class="p">.</span><span class="n">dylib</span>                <span class="mh">0x00000001993781dc</span> <span class="n">objc_msgSend</span> <span class="o">+</span> <span class="mi">28</span>
</span><span class='line'><span class="mi">1</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018feacf14</span> <span class="o">-</span><span class="p">[</span><span class="n">UIResponder</span><span class="p">(</span><span class="n">Internal</span><span class="p">)</span> <span class="n">_canBecomeFirstResponder</span><span class="p">]</span> <span class="o">+</span> <span class="mi">20</span>
</span><span class='line'><span class="mi">2</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018feacba0</span> <span class="o">-</span><span class="p">[</span><span class="n">UIResponder</span> <span class="n">becomeFirstResponder</span><span class="p">]</span> <span class="o">+</span> <span class="mi">240</span>
</span><span class='line'><span class="mi">3</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018feacfa0</span> <span class="o">-</span><span class="p">[</span><span class="n">UIView</span><span class="p">(</span><span class="n">Hierarchy</span><span class="p">)</span> <span class="n">becomeFirstResponder</span><span class="p">]</span> <span class="o">+</span> <span class="mi">120</span>
</span><span class='line'><span class="mi">4</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018ff320f8</span> <span class="o">-</span><span class="p">[</span><span class="n">UITextField</span> <span class="n">becomeFirstResponder</span><span class="p">]</span> <span class="o">+</span> <span class="mi">64</span>
</span><span class='line'><span class="mi">5</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018ffe4800</span> <span class="o">-</span><span class="p">[</span><span class="n">UITextInteractionAssistant</span><span class="p">(</span><span class="n">UITextInteractionAssistant_Internal</span><span class="p">)</span> <span class="n">setFirstResponderIfNecessary</span><span class="p">]</span> <span class="o">+</span> <span class="mi">208</span>
</span><span class='line'><span class="mi">6</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018ffe3f84</span> <span class="o">-</span><span class="p">[</span><span class="n">UITextInteractionAssistant</span><span class="p">(</span><span class="n">UITextInteractionAssistant_Internal</span><span class="p">)</span> <span class="nl">oneFingerTap:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1792</span>
</span><span class='line'><span class="mi">7</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018ffcac60</span> <span class="n">_UIGestureRecognizerSendActions</span> <span class="o">+</span> <span class="mi">212</span>
</span><span class='line'><span class="mi">8</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000018fe5929c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIGestureRecognizer</span> <span class="nl">_updateGestureWithEvent:buttonEvent:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">376</span>
</span><span class='line'><span class="mi">9</span>   <span class="n">UIKit</span>                          <span class="mh">0x000000019025803c</span> <span class="n">___UIGestureRecognizerUpdate_block_invoke</span> <span class="o">+</span> <span class="mi">56</span>
</span><span class='line'><span class="mi">10</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe1a258</span> <span class="n">_UIGestureRecognizerRemoveObjectsFromArrayAndApplyBlocks</span> <span class="o">+</span> <span class="mi">284</span>
</span><span class='line'><span class="mi">11</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe18b34</span> <span class="n">_UIGestureRecognizerUpdate</span> <span class="o">+</span> <span class="mi">208</span>
</span><span class='line'><span class="mi">12</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe57b1c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIWindow</span> <span class="nl">_sendGesturesForEvent:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1008</span>
</span><span class='line'><span class="mi">13</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe5722c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIWindow</span> <span class="nl">sendEvent:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">824</span>
</span><span class='line'><span class="mi">14</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe28b64</span> <span class="o">-</span><span class="p">[</span><span class="n">UIApplication</span> <span class="nl">sendEvent:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">252</span>
</span><span class='line'><span class="mi">15</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe26c54</span> <span class="n">_UIApplicationHandleEventQueue</span> <span class="o">+</span> <span class="mi">8496</span>
</span><span class='line'><span class="mi">16</span>  <span class="n">CoreFoundation</span>                 <span class="mh">0x000000018ce1f640</span> <span class="n">__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__</span> <span class="o">+</span> <span class="mi">20</span>
</span><span class='line'><span class="mi">17</span>  <span class="n">CoreFoundation</span>                 <span class="mh">0x000000018ce1e99c</span> <span class="n">__CFRunLoopDoSources0</span> <span class="o">+</span> <span class="mi">252</span>
</span><span class='line'><span class="mi">18</span>  <span class="n">CoreFoundation</span>                 <span class="mh">0x000000018ce1cc34</span> <span class="n">__CFRunLoopRun</span> <span class="o">+</span> <span class="mi">628</span>
</span><span class='line'><span class="mi">19</span>  <span class="n">CoreFoundation</span>                 <span class="mh">0x000000018cd5dc1c</span> <span class="n">CFRunLoopRunSpecific</span> <span class="o">+</span> <span class="mi">448</span>
</span><span class='line'><span class="mi">20</span>  <span class="n">GraphicsServices</span>               <span class="mh">0x0000000192a45c08</span> <span class="n">GSEventRunModal</span> <span class="o">+</span> <span class="mi">164</span>
</span><span class='line'><span class="mi">21</span>  <span class="n">UIKit</span>                          <span class="mh">0x000000018fe8efd8</span> <span class="n">UIApplicationMain</span> <span class="o">+</span> <span class="mi">1152</span>
</span><span class='line'><span class="mi">22</span>  <span class="n">kiwi</span>                           <span class="mh">0x000000010026a2b8</span> <span class="n">main</span> <span class="p">(</span><span class="n">main</span><span class="p">.</span><span class="nl">mm:</span><span class="mi">26</span><span class="p">)</span>
</span><span class='line'><span class="mi">23</span>  <span class="n">libdyld</span><span class="p">.</span><span class="n">dylib</span>                    <span class="mh">0x000000019995ba9c</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">Thread</span> <span class="mi">1</span> <span class="nl">Crashed:</span>
</span><span class='line'><span class="mi">0</span>   <span class="n">libsystem_kernel</span><span class="p">.</span><span class="n">dylib</span>           <span class="mh">0x0000000199a3daa8</span> <span class="n">kevent64</span> <span class="o">+</span> <span class="mi">8</span>
</span><span class='line'><span class="mi">1</span>   <span class="n">libdispatch</span><span class="p">.</span><span class="n">dylib</span>                <span class="mh">0x0000000199941998</span> <span class="n">_dispatch_mgr_thread</span> <span class="o">+</span> <span class="mi">48</span>
</span></code></pre></td></tr></table></div></figure>


<p>从崩溃记录完全看不出原因，十分坑爹。</p>

<h3>2.3 解决方案</h3>

<ul>
<li>方案一：第一次 Pop 不使用动画。</li>
<li>方案二：统一管理 Pop 的调用，如果当前正在 Pop，则下一次 Pop 先入栈；等到 Pop 执行完再执行下一次 Pop。</li>
</ul>


<h2>3. Push 的过程中立即 Pop</h2>

<p>Push 的过程中调用 Pop，会导致界面卡死，表现为：不响应任何点击、手势操作，但是不会崩溃。这也是在 iOS7 中出现的问题，iOS 8 之后不存在。</p>

<h3>3.1 解决方案</h3>

<p>同 1.1，重载 Pop 方法：</p>

<ol>
<li>Pop 的时候先判断是否在切换中；</li>
<li>如果正在切换，则 Pop 的命令先保存到队列；</li>
<li>切换动画执行完毕，判断是否需要处理 Pop 的队列。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - UINavigationController</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">popToViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">super</span> <span class="nl">popToViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">enqueuePopViewController:</span><span class="n">viewController</span> <span class="nl">animate:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nf">popViewControllerAnimated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">super</span> <span class="nl">popViewControllerAnimated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">enqueuePopViewController:</span><span class="nb">nil</span> <span class="nl">animate:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UINavigationControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span> <span class="nf">didShowViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 显示完毕之后判断是否需要Pop</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PopVCInfo</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span> <span class="nl">removeObjectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popToViewController:</span><span class="n">info</span><span class="p">.</span><span class="n">controller</span> <span class="nl">animated:</span><span class="n">info</span><span class="p">.</span><span class="n">animate</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">info</span><span class="p">.</span><span class="n">animate</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>4. Push 的过程中手势滑动返回</h2>

<p>手势滑动返回本质上调用的还是 Pop，所以，同上。</p>

<p>不过，还可以更根本地禁止用户进行这样的操作，也就是在切换过程中禁止滑动返回手势。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#pragma mark - UINavigationController</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Hijack the push method to disable the gesture</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">pushViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">super</span> <span class="nl">pushViewController:</span><span class="n">viewController</span> <span class="nl">animated:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - UINavigationControllerDelegate</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">navigationController:</span><span class="p">(</span><span class="n">UINavigationController</span> <span class="o">*</span><span class="p">)</span><span class="nv">navigationController</span> <span class="nf">didShowViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">viewController</span> <span class="nf">animated:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">isSwitching</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">interactivePopGestureRecognizer</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 显示完毕之后判断是否需要Pop</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span><span class="p">.</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">PopVCInfo</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">popVCAnimateQueue</span> <span class="nl">removeObjectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popToViewController:</span><span class="n">info</span><span class="p">.</span><span class="n">controller</span> <span class="nl">animated:</span><span class="n">info</span><span class="p">.</span><span class="n">animate</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">popViewControllerAnimated:</span><span class="n">info</span><span class="p">.</span><span class="n">animate</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/09/09/uiviewcontroller-push-pop-trap/'>http://blog.lessfun.com/blog/2015/09/09/uiviewcontroller-push-pop-trap/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[查找XCode工程中没被使用的图片资源]]></title>
    <link href="http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project/"/>
    <updated>2015-09-02T13:27:29+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project</id>
    <content type="html"><![CDATA[<p><img src="https://github.com/tinymind/LSUnusedResources/raw/master/LSUnusedResourcesExample.gif" alt="LSUnusedResources" /></p>

<h2>1. 需求的引入</h2>

<p>一个项目开发得越久，添加的功能模块也就越多，相应地，也会慢慢引入大量图片等资源。但是，在移除一些不再使用的模块的时候，开发者往往会把该模块所对应的图片资源一起删除，因为源码和资源是分离的。长久以来，项目中就会存在大量没被使用的资源文件。</p>

<p>在某个时机，也就是需求完成得差不多，Bug 增加得不够多，Crash 上涨得不够快的时候，码农们终于有了一点闲暇时间，打算清理一下资源文件，减少 App 安装包的大小。这是一件体力活，方法无非是，一个一个地复制资源文件名，然后在 XCode 中全局查找该字符串，如果结果为 0，那么这个资源很可能就没有被使用。为什么说很可能？因为在代码中，有可能通过字符串拼接的方式使用了这个资源，而这种情况是没办法通过字符串匹配查找出来的。</p>

<p>道理我们都懂，但是，操作起来也实在是太繁琐了，码农们不可能会乐意这样干的。于是，我们需要这么一款工具：能够迅速找出工程中所有没被使用的资源文件。</p>

<!--more-->


<h2>2. 已有的方案</h2>

<p>果不其然，在我打算写这么一个工具的时候，在网上已经有了两种方案。</p>

<h3>2.1 方案1：<a href="http://stackoverflow.com/a/6113449/3737409">万能的脚本</a></h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">PROJ</span><span class="o">=</span><span class="sb">`</span>find . -name <span class="s1">&#39;*.xib&#39;</span> -o -name <span class="s1">&#39;*.[mh]&#39;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>png in <span class="sb">`</span>find . -name <span class="s1">&#39;*.png&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">name</span><span class="o">=</span><span class="sb">`</span>basename <span class="nv">$png</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> ! grep -qhs <span class="s2">&quot;$name&quot;</span> <span class="s2">&quot;$PROJ&quot;</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;$png is not referenced&quot;</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>缺点</strong>：不够智能，不够通用，速度太慢，结果不正确。</p>

<h3>2.2 方案2：<a href="http://jeffhodnett.github.io/Unused/">脚本界面化</a></h3>

<p><a href="http://jeffhodnett.github.io/Unused/">Unused</a> 对脚本的调用做了封装，通过界面可以配置一定的信息，然后比较清晰的输入结果。</p>

<p><strong>缺点</strong>：实际上，Unused 的内部还是调用了方案 1 的脚本，所以方案 1 的缺点也就是方案 2 的缺点。</p>

<h2>3. LSUnusedResources 做的改进</h2>

<h3>3.1 提高匹配速度</h3>

<p>LSUnusedResources 很大程度上受 Unused 的影响，比如界面、交互，以及部分代码。但是，本工具在核心代码上做了优化，使其在搜索的速度、结果的正确上都有了很大的提高。</p>

<p>核心步骤，简述如下：</p>

<ul>
<li>查找：选定的目录下的所有资源文件。这一步与上述方案1区别不大，都是调用 <code>find</code> 命令查找指定后缀名的文件。</li>
<li>匹配：与上述方案不同，我不是对每个资源文件名都做一次全文搜索匹配，因为加入项目的资源太多，这里会导致性能快速下降。而我只是针对源码、Xib、Storyboard 和 plist 等文件，先全文搜索其中可能是引用了资源的字符串，然后用资源名和字符串做匹配。</li>
</ul>


<h3>3.2 优化匹配结果</h3>

<p>Unused 会把大量实际上有使用的资源，当做未使用的资源输出。LSUnusedResources 则不会出现这样的问题，并且使得结果更加优化。</p>

<p>举例说明：<br/>
你在工程中添加了下面资源:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>icon_tag_0.png
</span><span class='line'>icon_tag_1.png
</span><span class='line'>icon_tag_2.png
</span><span class='line'>icon_tag_3.png
</span></code></pre></td></tr></table></div></figure>


<p>然后用字符串拼接的方式在代码中引用:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSInteger</span> <span class="n">index</span> <span class="o">=</span> <span class="n">random</span><span class="p">()</span> <span class="o">%</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;icon_tag_%d&quot;</span><span class="p">,</span> <span class="n">index</span><span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>icon_tag_x.png</code> 是不应该被当做未使用的资源的，只是以一种比较隐晦的方式间接引用了，所以不应该出现在结果列表中。</p>

<h2>4. 使用方法</h2>

<ol>
<li>点击 <code>Browse..</code> 选择一个文件夹；</li>
<li>点击 <code>Search</code> 开始搜索；</li>
<li>等待片刻即可看到结果；</li>
<li>选中某些行，然后点击 <code>Delete</code> 可以直接删除资源。</li>
</ol>


<h2>5. 下载安装</h2>

<ul>
<li>下载: <a href="https://github.com/tinymind/LSUnusedResources/raw/master/Release/LSUnusedResources.app.zip">LSUnusedResources.app.zip</a></li>
<li>或者使用 XCode 编译运行<a href="https://github.com/tinymind/LSUnusedResources/">项目代码</a>。</li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project/'>http://blog.lessfun.com/blog/2015/09/02/find-unused-resources-in-xcode-project/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[密码计算器，保护您iPhone里的隐私文件]]></title>
    <link href="http://blog.lessfun.com/blog/2015/04/07/passcalc-protect-your-privacy-in-iphone/"/>
    <updated>2015-04-07T16:48:09+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/04/07/passcalc-protect-your-privacy-in-iphone</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://blog.lessfun.com/images/app/passcalc/passcalc_appicon.png" width="120" height="120" title="PassCalc App" alt="PassCalc App"></p>

<p>密码计算器是iPhone上的一款私密文件管理器，通过在计算器上输入密码来访问您的私人文件，可以完美地保护您的照片、视频、日记、联系人等私人隐私文件。</p>

<p>当前版本：1.0.1<br/>
更新时间：2015.05.06</p>

<h2>iPhone 屏幕截图</h2>

<div style="margin-top:30px;font-size:16px;line-height:20px;background:rgb(78,81,85);border-radius:4px;padding:4px;">
<div style="margin: 0 14px; max-height: 640px; min-height: 320px; overflow-x: auto; overflow-y: hidden; padding-bottom: 16px; white-space: nowrap;"><img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_1.png" alt="1"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_2.png" alt="2"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_3.png" alt="3"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_4.png" alt="4"> <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/passcalc/passcalc_screenshot_5.png" alt="5"></div>
</div>


<h2>下载</h2>

<p><a href="https://itunes.apple.com/cn/app/id980936769?mt=8"><img src="http://blog.lessfun.com/images/app/appstore_available.png" alt="从AppStore下载" /></a></p>

<!-- more -->


<h2>应用介绍</h2>

<p>密码计算器是iPhone上的一款私密文件管理器。那么多年以来，你一定保存了一些私密的照片、视频、笔记或联系人在手机里，并且不想被你身边的人看到。密码计算器可以完美地实现你的需求，保护你的隐私。表面上这是一款计算器，但是可以输入密码来访问你的私人文件。</p>

<h3>安全性</h3>

<ul>
<li>使用RSA，AES加密技术来存储照片、笔记、视频和联系人。</li>
<li>即使手机被盗，被破解，别人也无法打开加密的文件，妈妈再也不用担心你的艳照门啦。</li>
</ul>


<h3>文件管理器</h3>

<ul>
<li>使用WiFi、USB与电脑进行文件上传、下载。</li>
<li>从相机或相册导入照片、视频。</li>
<li>通过邮件、微信来分享文字、图片，支持发送Gif动态表情。</li>
<li>支持视频格式：mov，m4v，mp4，mpv，3gp。</li>
<li>支持图片格式：jpg，png，gif，bmp。</li>
<li>支持笔记扩展名：txt，text，md，markdown，markd，markdn，mdown，mkd，mkdn。</li>
</ul>


<h3>私密笔记</h3>

<ul>
<li>语法高亮。</li>
<li>通过电子邮件、微信分享。</li>
</ul>


<h3>私密文档</h3>

<ul>
<li>支持的文档类型：doc, ppt, xls, docx, pptx, xlsx, key, numbers, pages, pdf, rtf；</li>
<li>可导入、导出、分享文档。</li>
</ul>


<h3>私密联系人</h3>

<ul>
<li>无限制添加联系人。</li>
<li>给联系人添加备注。</li>
<li>快速拨号，发送短信，发送电子邮件。</li>
</ul>


<h3>浏览器</h3>

<ul>
<li>全功能浏览器，无障碍地访问你想看的网站，并且不留下蛛丝马迹。</li>
<li>保存你常用的书签，方便你下次再次访问。</li>
<li>一键下载网页上的所有图像，保存到图像可以在相册中找到。</li>
<li>离线浏览网页，保存完整网页内容为PDF。</li>
</ul>


<h3>更多</h3>

<ul>
<li>功能完善的数学计算器。</li>
<li>应用程序切换到后台时，自动显示计算器界面。</li>
</ul>


<h3>1.0.1更新信息</h3>

<ul>
<li>新增文档类型，支持：doc, ppt, xls, docx, pptx, xlsx, key, numbers, pages, pdf, rtf；</li>
<li>离线浏览网页，保存完整网页内容为PDF；</li>
<li>调用第三方App打开文件；</li>
<li>处理来自第三方的文件；</li>
<li>支持 iOS 8 Today Extension；</li>
<li>Bug 修复。</li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/04/07/passcalc-protect-your-privacy-in-iphone/'>http://blog.lessfun.com/blog/2015/04/07/passcalc-protect-your-privacy-in-iphone/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView性能优化，提升列表滚动的流畅性]]></title>
    <link href="http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve/"/>
    <updated>2015-04-01T12:13:46+08:00</updated>
    <id>http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve</id>
    <content type="html"><![CDATA[<p>UITableView是iOS开发中最常用也很实用并且最容易出现性能问题的的一个控件，本文列出了一些性能优化点，用于提高列表滚动的流畅性。</p>

<!--more-->


<h2>1. 重用</h2>

<p>当TableView需要显示一个Cell时，会先从已创建的Cell中找一个可以重用的，然后展现到屏幕。一般情况下，可以被重用的Cell都滚到了屏幕区域外。如果慢慢地拖动TableView，就可以看到Cell不断地被重用（通过断点可以看到Cell的init或awakeFromNib没有被调用）。但是如果快速滚动，还是可能会看到Cell被创建。</p>

<h3>1.1 已经在StoryBoard的TableView中定义Cell的ProtoType</h3>

<p>则指定其ReuseIdentify，在delegate返回Cell的时候，调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="p">[</span><span class="n">tableView</span> <span class="n">dequeueReusableCellWithIdentifier</span><span class="o">:</span><span class="n">kCellID</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.2 Cell是从单独的xib加载</h3>

<p>则需要先注册：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="p">[</span><span class="n">tableView</span> <span class="n">registerNib</span><span class="o">:</span><span class="p">[</span><span class="n">UINib</span> <span class="n">nibWithNibName</span><span class="o">:</span><span class="n">kCellID</span> <span class="n">bundle</span><span class="o">:</span><span class="n">nil</span><span class="p">]</span> <span class="n">forCellReuseIdentifier</span><span class="o">:</span><span class="n">kCellID</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.3 Cell的ProtoType个数尽可能少，因为Cell的种类越多，TableView创建的Cell个数就越多，并且是成倍增长。</h3>

<h2>2. 缓存</h2>

<p>缓存基本上可以解决大部分性能问题。TableView需要知道Cell的高度，才能对Cell进行布局；需要知道所有的Cell的高度，才能知道TableView本身的高度，所以，每次调用reloadData，都需要计算所有Cell的高度。我们要尽量减小高度计算的复杂度。</p>

<h3>2.1 缓存Cell的高度</h3>

<h4>2.1.1 高度固定、类型单一的Cell</h4>

<p>在创建TableView的时候，直接设置其rowHeight属性。</p>

<h4>2.1.2 对于高度固定、类型多样的Cell</h4>

<p>实现代理方法，根据Cell的类型返回不同的高度：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">tableView</span><span class="o">:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="n">heightForRowAtIndexPath</span><span class="o">:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.1.3 对于高度不固定的Cell</h4>

<p><img src="http://blog.lessfun.com/images/2015/04/tableview_dynamic_cell.png" alt="dynamic uitableviewcell" /></p>

<p>由于需要动态计算高度，所以运算量必然会增大，但是还是存在优化的空间。常见的优化方式是，把cellHeight作为data的一个属性缓存起来，对于每一个data对应的每一个cell，就只需要计算一次高度。示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">@</span><span class="n">interface</span> <span class="n">ContentInfo</span> <span class="o">:</span> <span class="n">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">DetailInfo</span> <span class="o">*</span><span class="n">detail</span><span class="p">;</span>
</span><span class='line'><span class="err">@</span><span class="n">property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">cellHeight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">calcHeight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="n">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="n">tableView</span><span class="o">:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="n">tableView</span> <span class="n">heightForRowAtIndexPath</span><span class="o">:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">ContentInfo</span> <span class="o">*</span><span class="n">info</span> <span class="o">=</span> <span class="n">_dataSource</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">info</span><span class="p">.</span><span class="n">cellHeight</span> <span class="o">&lt;=</span> <span class="mf">0.1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">info</span><span class="p">.</span><span class="n">cellHeight</span> <span class="o">=</span> <span class="p">[</span><span class="n">info</span> <span class="n">calcHeight</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">info</span><span class="p">.</span><span class="n">cellHeight</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这样的方式，还是把运算量放到了TableView的代理方法内，其实也可以在创建ContentInfo本身的时候，就调用它的calcHeight方法，在代理方法里就可以可以直接返回info.cellHeight了。但也要结合实际情况进行取舍，因为有时候，有了数据源，但不一定需要展示TableView，提前计算高度反而会浪费时间。</p>

<h3>2.2 缓存Cell的资源</h3>

<p>比如每一个Cell都需要用到的UIImage，UIFont，NSDateFormatter或者任何在绘制时需要的对象，推荐使用类层级的初始化方法中执行分配，并将其存储为静态变量。</p>

<h2>3. 创建</h2>

<h3>3.1 去掉AutoLayout</h3>

<p>如果发现通过StoryBoard+xib+AutoLayout创建Cell时性能满足不了需求，可以考虑去掉AutoLayout。</p>

<h3>3.2 代码创建Cell</h3>

<p>如果不用AutoLayout还是有问题，可以考虑通过代码创建Cell的Views。</p>

<h3>3.3 自绘</h3>

<p>如果使用代码创建还是解决不了问题，那就只能靠自绘了，重载Cell的drawRect方法即可。</p>

<h2>4. 渲染</h2>

<h3>4.1 减少子View的个数和层级</h3>

<p>子View的层级越深，渲染到屏幕上所需要的计算量就越大。</p>

<h3>4.2 减少子View的透明图层</h3>

<p>对于不透明的View，设置opaque为YES，这样在绘制该View时，就不需要考虑被View覆盖的其他内容。</p>

<h3>4.3 避免CAlayer特效。</h3>

<p>给Cell中View加阴影会引起性能问题，如下面代码会导致滚动时有明显的卡顿：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowColor</span> <span class="o">=</span> <span class="n">color</span><span class="p">.</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowOffset</span> <span class="o">=</span> <span class="n">offset</span><span class="p">;</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowOpacity</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">view</span><span class="p">.</span><span class="n">layer</span><span class="p">.</span><span class="n">shadowRadius</span> <span class="o">=</span> <span class="n">radius</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve/'>http://blog.lessfun.com/blog/2015/04/01/uitableview-performence-improve/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MarkText - iOS 上支持语法高亮、HTML预览、文件导出的Markdown文本编辑器]]></title>
    <link href="http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios/"/>
    <updated>2014-12-10T21:29:06+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://blog.lessfun.com/images/app/marktext/marktext_appicon.png" width="120" height="120" title="MarkText App" alt="A Markdown Text Editor"></p>

<p>MarkText是iPhone上的Markdown文本编辑器。支持iCloud同步，实时语法高亮、带CSS的HTML预览、文件导出为HTML/PNG/PDF, 分享到Evernote，Dropbox或Email。</p>

<p>当前版本：1.0.3<br/>
更新时间：2015.05.06</p>

<h2>iPhone 屏幕截图</h2>

<div style="margin-top:30px;font-size:16px;line-height:20px;background:rgb(78,81,85);border-radius:4px;padding:4px;">
<div style="margin: 0 14px; max-height: 640px; min-height: 320px; overflow-x: auto; overflow-y: hidden; padding-bottom: 16px; white-space: nowrap;">
  <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_1.png" alt="1">
  <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_2.png" alt="2">
  <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_3.png" alt="3">
  <img style="border:2px solid white;margin:5px;box-shadow:0 0 5px rgba(220,220,220,0.5);width:320px;" src="http://blog.lessfun.com/images/app/marktext/marktext_screenshot_4.png" alt="4">
</div>
</div>


<h2>下载</h2>

<p><a href="https://itunes.apple.com/cn/app/marktext-markdown-text-editor/id948768793?mt=8"><img src="http://blog.lessfun.com/images/app/appstore_available.png" alt="从AppStore下载" /></a></p>

<h2>应用介绍</h2>

<!--more-->


<p>MarkText是iPhone与iPad上的一款Markdown文本编辑器，支持iCloud同步，实时语法高亮，能转换为HTML、PNG或PDF文件。通过Email发送格式化的markdown内容，或者调用第三方App打开转换后的文件。</p>

<h3>导入 &amp; 导出</h3>

<p>通过iTunes导入markdown文本文件，或通过MarkText创建，编辑时支持实时语法高亮显示。编辑完成之后，可以通过iTunes导出到电脑，或者转换为HTML、PNG、PDF文件并发送到Evernote、Dropbox、Email等第三方App。</p>

<h3>光标增强</h3>

<p>辅助工具条可以让你很方便地点击按钮插入Tabs、标题、列表、代码块，或者超链接。左右滑动工具条可以迅速移动光标；双指选择可以快速选择文本。</p>

<h3>HTML预览</h3>

<p>HTML预览支持CSS样式，语法高亮支持的特性：常规Markdown、MultiMarkdown、脚注、图片、表格和代码块。</p>

<h3>iCloud同步：</h3>

<p>通过iCloud，在所有设备自动同步存储所有文件。</p>

<h2>版本1.0.3 新特性</h2>

<ul>
<li>支持通过邮件发送HTML内容；</li>
<li>修复：HTML预览的加粗、斜体；</li>
<li>修复：关闭iCloud同步后无法新建文档；</li>
<li>修复：iOS 8下可能出现的光标抖动；</li>
<li>修复：在空行无法点击快捷输入。</li>
</ul>


<h2>主要功能</h2>

<ul>
<li>创建、编辑markdown格式的文本；</li>
<li>实时语法高亮；</li>
<li>带CSS样式的HTML预览；</li>
<li>修改主题配色；</li>
<li>通过iTunes导入、导出文件；</li>
<li>转换为HTML、PNG或PDF格式；</li>
<li>分享到Evernote、Dropbox或Email等App；</li>
<li>光标增强：滑动输入工具栏，快速移动光标；</li>
<li>支持的文件后缀：md、mmd、markdown、markdn、mdown、mkdn、markd、txt、text；</li>
<li>全文搜索；</li>
<li>字数统计;</li>
<li>支持正则的查找替换;</li>
<li>iCloud同步。</li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios/'>http://blog.lessfun.com/blog/2014/12/10/marktext-a-markdown-text-editor-for-ios/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年在Apple Store申请iOS个人开发者账号详细流程]]></title>
    <link href="http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014/"/>
    <updated>2014-12-03T19:20:56+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014</id>
    <content type="html"><![CDATA[<p><img src="http://blog.lessfun.com/images/2014/12/idp_intro.png" alt="idp intro" /></p>

<!--more-->


<p>想要在AppStore上发布个人App从来都不是一件简单的事，光是申请开发者账号就可以折腾好久了。这是加入个人开发者计划，申请iOS开发者账号的最新教程，2014年版，供参考。什么时候，苹果才能为开发者考虑一下，减少各种繁琐的流程呢？</p>

<h2>前期准备</h2>

<ul>
<li>需要有一张支持美元支付的信用卡。</li>
</ul>


<h2>注册Apple ID</h2>

<ol>
<li><p>访问<a href="https://developer.apple.com/cn/programs/ios/">https://developer.apple.com/cn/programs/ios/</a> ，点击<code>立即注册</code>。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_register.png" alt="apple register" /></p></li>
<li><p>按照提示，选择注册类型：公司或个人。这里以「个人」为例，点击继续。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_register_continue.png" alt="register continue" /></p></li>
<li><p>注册或创建Apple ID。如果已有，可以继续使用。我选了新建。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_create_apple_id.png" alt="create apple id" /></p></li>
<li><p>按照要求填写接口。需要注意的地方：FirstName 和 LastName 要是自己的名字拼音，由于涉及到审核、支付、收款等操作，不要乱填。另外，中英文的姓名顺序一直都可以把人绕晕，总之，我在 FirstName 填了名字拼音，在 LastName 填姓氏拼音。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_fill_apple_id.png" alt="fill apple id" /></p></li>
<li><p>设置安全问题答案，找回密码需要。</p></li>
<li>验证邮箱，之后就可以使用新的AppleID了，如果在上面填错了资料，可以登录修改，比如姓名。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_verify_email.png" alt="verify email" /></li>
</ol>


<h2>填写开发者信息</h2>

<ol>
<li><p>在协议这里打钩，点击<code>Agree</code>。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_develop_agreement.png" alt="develop agreement" /></p></li>
<li><p>完善个人的一些信息。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_self_info.png" alt="self info" /></p></li>
<li><p>至此，Apple ID创建完成。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_register_finished.png" alt="register finished" /></p></li>
</ol>


<h2>加入开发者计划</h2>

<ol>
<li><p>这时候已有新的Apple ID，再次打开<a href="https://developer.apple.com/programs/ios">https://developer.apple.com/programs/ios</a> ，正式加入$99/年的个人开发者计划。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_enroll_now.png" alt="enroll now" /></p></li>
<li><p>选择刚刚创建的Apple ID：<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_select_apple_id.png" alt="select apple id" /></p></li>
<li><p>提示选择注册类型，个人或公司。这里选择个人。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_select_individual.png" alt="select individual" /></p></li>
<li><p>输入账单地址等信息，这里需要与信用卡账单显示的地址完全一致，中英文各输入一遍，注意输入手机号时，区号填<code>86</code>。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_credit_card_address.png" alt="credit card address" /></p></li>
<li><p>选择开发者计划类型。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_select_program.png" alt="select program" /></p></li>
<li><p>Review，检查没问题后，提交。</p></li>
<li>继续同意协议。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_program_license.png" alt="program license" /></li>
</ol>


<h2>提交订单、付款</h2>

<ol>
<li><p>终于到了付款这一步骤了，点击<code>Buy now</code>。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_buy_now.png" alt="buy now" /></p></li>
<li><p>再次要求登录Apple ID。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_login_again.png" alt="login again" /></p></li>
<li><p>输入信用卡信息进行付款。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_credit_card_info.png" alt="credit card info" /></p></li>
<li><p>提交订单。<br/>
<img src="http://blog.lessfun.com/images/2014/12/idp_commit_order.png" alt="commit order" /></p></li>
<li><p>付款完成提示，等待苹果发送激活的邮件吧。</p></li>
</ol>


<p><img src="http://blog.lessfun.com/images/2014/12/idp_order_tips.png" alt="order tips" /></p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014/'>http://blog.lessfun.com/blog/2014/12/03/ios-developer-program-tutorial-2014/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[到底什么时候才需要在ObjC的Block中使用weakSelf/strongSelf]]></title>
    <link href="http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/"/>
    <updated>2014-11-22T15:59:18+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block</id>
    <content type="html"><![CDATA[<p>Objective C 的 <code>Block</code> 是一个很实用的语法，特别是与GCD结合使用，可以很方便地实现并发、异步任务。但是，如果使用不当，Block 也会引起一些循环引用问题(<code>retain cycle</code>)—— Block 会 retain ‘self’，而 ‘self‘ 又 retain 了 Block。因为在 ObjC 中，直接调用一个实例变量，会被编译器处理成 &lsquo;self->theVar&#8217;，&#8217;self&rsquo; 是一个 strong 类型的变量，引用计数会加 1，于是，self retains queue， queue retains block，block retains self。</p>

<!--more-->


<h3>解决 retain circle</h3>

<p>Apple 官方的建议是，传进 Block 之前，把 &lsquo;self&rsquo; 转换成 weak automatic 的变量，这样在 Block 中就不会出现对 self 的强引用。如果在 Block 执行完成之前，self 被释放了，weakSelf 也会变为 nil。</p>

<p>示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">__typeof__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>clang 的文档表示，在 doSomething 内，weakSelf 不会被释放。但，下面的情况除外：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">__typeof__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doOtherThing</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 doSomething 中，weakSelf 不会变成 nil，不过在 doSomething 执行完成，调用第二个方法 doOtherThing 的时候，weakSelf 有可能被释放，于是，strongSelf 就派上用场了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">__typeof__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">__strong</span> <span class="n">__typeof</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="n">strongSelf</span> <span class="o">=</span> <span class="n">weakSelf</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">strongSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">strongSelf</span> <span class="n">doOtherThing</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__strong</code> 确保在 Block 内，strongSelf 不会被释放。</p>

<h3>总结</h3>

<ul>
<li>在 Block 内如果需要访问 self 的方法、变量，建议使用 weakSelf。</li>
<li>如果在 Block 内需要多次 访问 self，则需要使用 strongSelf。</li>
</ul>


<h3>参考</h3>

<ul>
<li><a href="http://dhoerl.wordpress.com/2013/04/23/i-finally-figured-out-weakself-and-strongself/">I finally figured out weakSelf and strongSelf</a></li>
<li><a href="http://stackoverflow.com/questions/21113963/is-the-weakself-strongself-dance-really-necessary-when-referencing-self-inside-a?rq=1">Is the weakSelf/strongSelf dance really necessary when referencing self inside a non-retained completion called from a UIViewController?</a></li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/'>http://blog.lessfun.com/blog/2014/11/22/when-should-use-weakself-and-strongself-in-objc-block/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 6.1 iPhone Simulator 8.1 Keyboard Issue：键盘无法显示，设置inputAccessoryView崩溃]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue/"/>
    <updated>2014-10-24T14:42:51+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue</id>
    <content type="html"><![CDATA[<p>随着iPhone 6 &amp; Plus的发布，苹果也陆续更新了XCode和开发模拟器，目前最新的Xcode版本是6.1，内置的Simulator的iOS版本是8.1。也许你兴致冲冲迫不及待地一下子升级到了最新版的开发环境，那么可能会遇到一些键盘上的问题：无法弹出键盘，或者弹出键盘后会莫名其妙地崩溃。</p>

<p>当然，不能怪你，你的项目在iOS7.1上是运行地好好的。只能怪苹果没有推出一个完美无Bug的开发工具。</p>

<!--more-->


<h2>1. 在XCode 6，iOS 8.1模拟器无法弹出键盘</h2>

<p>解决方法很简单，在Simulator的系统菜单中，取消勾选：</p>

<p><code>Hardware</code> &ndash;> <code>Keyboard</code> &ndash;> <code>Connect Hardware Keyboard</code>。</p>

<p>取消选中之后，键盘可以正常弹出，但是，无法使用硬件的键盘输入了，自己慢慢用鼠标点击模拟器里的键盘吧……</p>

<h2>2. 弹出键盘后会莫名其妙地崩溃</h2>

<p>也许你键盘能正常显示了，但是一显示就崩溃，在堆栈中有这样的字样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="o">***</span> <span class="n">First</span> <span class="n">throw</span> <span class="n">call</span> <span class="nl">stack:</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>      <span class="mi">0</span>   <span class="n">CoreFoundation</span>                      <span class="mh">0x02101df6</span> <span class="n">__exceptionPreprocess</span> <span class="o">+</span> <span class="mi">182</span>
</span><span class='line'>      <span class="mi">1</span>   <span class="n">libobjc</span><span class="p">.</span><span class="n">A</span><span class="p">.</span><span class="n">dylib</span>                     <span class="mh">0x01d8ba97</span> <span class="n">objc_exception_throw</span> <span class="o">+</span> <span class="mi">44</span>
</span><span class='line'>      <span class="mi">2</span>   <span class="n">CoreFoundation</span>                      <span class="mh">0x02101d1d</span> <span class="o">+</span><span class="p">[</span><span class="n">NSException</span> <span class="nl">raise:format:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">141</span>
</span><span class='line'>      <span class="mi">3</span>   <span class="n">UIKit</span>                               <span class="mh">0x008cff9c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIViewController</span> <span class="nl">_addChildViewController:performHierarchyCheck:notifyWillMove:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">210</span>
</span><span class='line'>      <span class="mi">4</span>   <span class="n">UIKit</span>                               <span class="mh">0x00f4b44d</span> <span class="o">-</span><span class="p">[</span><span class="n">UIInputWindowController</span> <span class="nl">changeToInputViewSet:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">576</span>
</span><span class='line'>      <span class="mi">5</span>   <span class="n">UIKit</span>                               <span class="mh">0x00f4c1be</span> <span class="n">__43</span><span class="o">-</span><span class="p">[</span><span class="n">UIInputWindowController</span> <span class="nl">setInputViewSet:</span><span class="p">]</span><span class="n">_block_invoke</span> <span class="o">+</span> <span class="mi">103</span>
</span><span class='line'>      <span class="mi">6</span>   <span class="n">UIKit</span>                               <span class="mh">0x007f73bf</span> <span class="o">+</span><span class="p">[</span><span class="n">UIView</span><span class="p">(</span><span class="n">Animation</span><span class="p">)</span> <span class="nl">performWithoutAnimation:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">82</span>
</span><span class='line'>      <span class="mi">7</span>   <span class="n">UIKit</span>                               <span class="mh">0x00f4bf9c</span> <span class="o">-</span><span class="p">[</span><span class="n">UIInputWindowController</span> <span class="nl">setInputViewSet:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">374</span>
</span><span class='line'>      <span class="mi">8</span>   <span class="n">UIKit</span>                               <span class="mh">0x00ce9101</span> <span class="n">__64</span><span class="o">-</span><span class="p">[</span><span class="n">UIPeripheralHost</span><span class="p">(</span><span class="n">UIKitInternal</span><span class="p">)</span> <span class="nl">setInputViews:animationStyle:</span><span class="p">]</span><span class="n">_block_invoke1459</span> <span class="o">+</span> <span class="mi">43</span>
</span><span class='line'>      <span class="mi">9</span>   <span class="n">UIKit</span>                               <span class="mh">0x00f473af</span> <span class="o">-</span><span class="p">[</span><span class="n">UIInputWindowController</span> <span class="nl">performOperations:withAnimationStyle:</span><span class="p">]</span> <span class="o">+</span> <span class="mi">56</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">......</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上崩溃也只在XCode 6，iOS 8出现，在iOS 7一切正常。</p>

<p>原因可能是你设置了<code>UITextField</code>或<code>UITextView</code>的<code>inputView</code>或<code>inputAccessoryView</code>为customView，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="c1">//在Xib或Storyboard中创建了一个自定义View</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">UIView</span> <span class="o">*</span><span class="n">switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">inputAccessoryView</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码在iOS 8中是必定Crash的，因为<code>UITextView.inputAccessoryView</code>不能是其他View的子View。而上面的<code>switchKeyboardBar</code>先被添加到了当前<code>UIViewController</code>的<code>View</code>中，再被设置到<code>inputAccessoryView</code>，就会导致崩溃。</p>

<h3>2.1 解决方法</h3>

<p>不从Xib创建自定义View，而是在代码中手动创建，并且不添加到别的View中。</p>

<p>如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="c1">//注意这里没有 IBOutlet</span>
</span><span class='line'>  <span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="n">UIView</span> <span class="o">*</span><span class="n">switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="n">switchKeyboardBar</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">_switchKeyboardBar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">_switchKeyboardBar</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame:</span><span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">CGRectGetWidth</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">),</span> <span class="mi">40</span><span class="p">)];</span>
</span><span class='line'>  
</span><span class='line'>          <span class="c1">//add other subviews</span>
</span><span class='line'>          <span class="p">...</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="n">self</span><span class="p">.</span><span class="n">textView</span><span class="p">.</span><span class="n">inputAccessoryView</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">switchKeyboardBar</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue/'>http://blog.lessfun.com/blog/2014/10/24/xcode-6-dot-1-iphone-simulator-8-dot-1-keyboard-issue/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS AutoLayout与AutoSizing：自动布局，想说爱你真的好难]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing/"/>
    <updated>2014-10-17T14:31:20+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing</id>
    <content type="html"><![CDATA[<p>在iPhone Retina发布之前，还没有AutoLayout，因为屏幕只有一种尺寸。<br/>
当iPhone Retina发布之后，我没有用上AutoLayout，因为屏幕尺寸是用点来表示，布局写起来没什么不同。<br/>
当iPhone 5发布之后，屏幕尺寸终于加长了，但是由于有AutoSizing，所以我还是可以不用AutoLayout。<br/>
现在，iPhone 6和6 Plus发布了，屏幕又大了，我不得不开始考虑是否要使用AutoLayout。</p>

<!--more-->


<h2>1. Autolayout 与 Autosizing的区别</h2>

<p>虽然自iOS6之后，苹果推荐我们使用Autolayout布局，并且在Xib和Storyboard中默认帮我们打开了这个选项，但是在开发过程中，我们偏向于使用<code>Autosizing</code>，并且手动取消掉<code>Autolayout</code>，原因在于，Autolayout太繁琐复杂，而Autosizing简单并且能满足大部分的需求。</p>

<h3>Autosizing适用的情况</h3>

<p>当父视图被拉伸的时候，子视图能够适配父视图的新大小。其原理是，子视图有一个masks，用于指定与父视图上下左右边缘的距离，以及自身宽高的关系。</p>

<p>比如，指定子视图的右边缘紧跟着父视图的右边缘，那么父视图变大之后，子视图还是贴在父视图的右边。</p>

<p>这在大部分简单布局情况下非常有效。</p>

<h3>Autosizing的不足</h3>

<p>使用Autosizing，有一个前提，就是子视图的Frame是固定的，至少宽高是固定的，或者跟随着父视图的Frame变化。但是，如果希望多个子视图与父视图的边距固定，大小自动调整，Autosizing就爱莫能助了。</p>

<p>原因在于：<strong>Autosizing无法智能计算多个子View各自的Frame</strong>。</p>

<p>比如，我们希望在竖屏下布局是这样：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/StrutsProblem-portrait-design-423x500.png" alt="autosizing portrait" /></p>

<p>并且在横屏下布局是这样：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/StrutsProblem-landscape-looks-good-480x289.png" alt="autosizing landscape" /></p>

<p>除了手写代码调整Frame，单独用Autosizing是无法做到的。这时候就需要借助强大的Autolayout了。</p>

<h3>Autolayout的优点</h3>

<p>Autolayout使用约束来决定每个View的坐标、大小，约束可以针对SuperView，也可以针对其他任意一个SubView。</p>

<p>使用自动布局，你可以表达出视图与视图之间的关系，而不是明确地指定每个视图的Frame。通过约束，视图会自动计算它们应该呆在哪个位置，只要约束足够多，它们也能自动计算自己的大小。</p>

<p>只要指定了约束，无论屏幕大小怎么变化，它们都能自适应，这就是Autolayout的优点：妈妈再也不用担心你手写布局代码啦！也不用担心你为了适配各种屏幕大小而加班了。</p>

<h3>Autolayout的缺点</h3>

<p>Autolayout唯一的缺点就在于：过于复杂，较难上手。</p>

<h3>使用Autolayout，还是Autosizing？</h3>

<p>取决于项目需求。如果Autosizing完全能满足开发需求，那么就没必要使用复杂的Autolayout。但是，如果你已经被适配各种屏幕大小折腾得不成人形了，那么就要早日投入到Autolayout的怀抱了。</p>

<h2>Autolayout的使用</h2>

<p>首先要改变自己对布局的思考方式。你应该忘掉Frame，需要考虑的是subView A与subView B的上下左右的关系，以及与superView的关系。</p>

<h3>借助XCode</h3>

<p>在Xcode5之后，苹果已经尽力让开发者能更方便地使用Autolayout了。<br/>
通过<code>Xcode</code>&ndash;><code>Editor</code>&ndash;><code>Pin/Align</code>菜单为视图添加约束即可。</p>

<p>在XCode中除了通过菜单，还可以通过可视化的方式添加约束：</p>

<p><img src="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/Pin-green-view.png" alt="autolayout add constraint" /></p>

<p>如果你添加的约束不足以表达某个View的位置大小，XCode还会以黄色的辅助线发出警告，十分好用。</p>

<h3>手写约束Constraint</h3>

<p>XCode虽然强大，但是有时候我们也许希望借助代码来写Constraint。</p>

<p>加入你希望一个子view跟随父view的大小，但是与边距有10个点的距离：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UIView</span> <span class="o">*</span><span class="n">superview</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIView</span> <span class="o">*</span><span class="n">view1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="n">view1</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="n">view1</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">greenColor</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">superview</span> <span class="nl">addSubview:</span><span class="n">view1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIEdgeInsets</span> <span class="n">padding</span> <span class="o">=</span> <span class="n">UIEdgeInsetsMake</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">superview</span> <span class="nl">addConstraints:</span><span class="err">@</span><span class="p">[</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//view1 constraints</span>
</span><span class='line'>    <span class="p">[</span><span class="n">NSLayoutConstraint</span> <span class="nl">constraintWithItem:</span><span class="n">view1</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeTop</span>
</span><span class='line'>                                 <span class="nl">relatedBy:</span><span class="n">NSLayoutRelationEqual</span>
</span><span class='line'>                                    <span class="nl">toItem:</span><span class="n">superview</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeTop</span>
</span><span class='line'>                                <span class="nl">multiplier:</span><span class="mf">1.0</span>
</span><span class='line'>                                  <span class="nl">constant:</span><span class="n">padding</span><span class="p">.</span><span class="n">top</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSLayoutConstraint</span> <span class="nl">constraintWithItem:</span><span class="n">view1</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeLeft</span>
</span><span class='line'>                                 <span class="nl">relatedBy:</span><span class="n">NSLayoutRelationEqual</span>
</span><span class='line'>                                    <span class="nl">toItem:</span><span class="n">superview</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeLeft</span>
</span><span class='line'>                                <span class="nl">multiplier:</span><span class="mf">1.0</span>
</span><span class='line'>                                  <span class="nl">constant:</span><span class="n">padding</span><span class="p">.</span><span class="n">left</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSLayoutConstraint</span> <span class="nl">constraintWithItem:</span><span class="n">view1</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeBottom</span>
</span><span class='line'>                                 <span class="nl">relatedBy:</span><span class="n">NSLayoutRelationEqual</span>
</span><span class='line'>                                    <span class="nl">toItem:</span><span class="n">superview</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeBottom</span>
</span><span class='line'>                                <span class="nl">multiplier:</span><span class="mf">1.0</span>
</span><span class='line'>                                  <span class="nl">constant:</span><span class="o">-</span><span class="n">padding</span><span class="p">.</span><span class="n">bottom</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSLayoutConstraint</span> <span class="nl">constraintWithItem:</span><span class="n">view1</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeRight</span>
</span><span class='line'>                                 <span class="nl">relatedBy:</span><span class="n">NSLayoutRelationEqual</span>
</span><span class='line'>                                    <span class="nl">toItem:</span><span class="n">superview</span>
</span><span class='line'>                                 <span class="nl">attribute:</span><span class="n">NSLayoutAttributeRight</span>
</span><span class='line'>                                <span class="nl">multiplier:</span><span class="mi">1</span>
</span><span class='line'>                                  <span class="nl">constant:</span><span class="o">-</span><span class="n">padding</span><span class="p">.</span><span class="n">right</span><span class="p">],</span>
</span><span class='line'>
</span><span class='line'> <span class="p">]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个约束都是这样的长长一串代码，设想一下需要添加6个约束的话……</p>

<p>幸好有了这个开源库：<a href="https://github.com/Masonry/Masonry">Masonry</a>。</p>

<p>使用这个库，代码添加约束就可以简介如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">view1</span> <span class="nl">mas_makeConstraints:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">edges</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">superview</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">insets</span><span class="p">(</span><span class="n">padding</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更新约束</h3>

<p>比如，我们自己实现了一个图文混排的TextView，添加到Xib时我们还不知道其高度，需要在代码中计算，那么就需要在代码里更新约束，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">)</span> <span class="kt">IBOutlet</span> <span class="n">NSLayoutConstraint</span> <span class="o">*</span><span class="n">richTextHeightConstraint</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">relayout</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">richTextHeightConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">richTextView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">needsUpdateConstraints</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>关键还是实践</h2>

<p>多说无益，贵在实践。只要有意识地去使用了一次，自然就会了。</p>

<h3>参考链接</h3>

<ul>
<li><a href="http://www.raywenderlich.com/50317/beginning-auto-layout-tutorial-in-ios-7-part-1">Beginning Auto Layout Tutorial in iOS 7: Part 1</a></li>
<li><a href="http://www.raywenderlich.com/50319/beginning-auto-layout-tutorial-in-ios-7-part-2">Beginning Auto Layout Tutorial in iOS 7: Part 2</a></li>
<li><a href="http://www.cocoachina.com/industry/20131203/7462.html">开始iOS 7中自动布局教程 一</a></li>
<li><a href="http://www.cnblogs.com/zer0Black/p/3977288.html">开始iOS 7中自动布局教程 二</a></li>
<li><a href="http://segmentfault.com/blog/ilikewhite/1190000000646452">从此爱上iOS Autolayout</a></li>
</ul>


<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing/'>http://blog.lessfun.com/blog/2014/10/17/ios-autolayout-vs-autosizing/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SmartSVN一直是Local Refreshing状态，却无法Update/Commit/Check Out]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/17/smartsvn-keep-local-refreshing-issue/"/>
    <updated>2014-10-17T11:00:22+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/17/smartsvn-keep-local-refreshing-issue</id>
    <content type="html"><![CDATA[<p><img src="http://www.wandisco.com/sites/all/themes/wandisco/assets/i/prod-detail/screens/smartsvn.png" alt="smart svn" /></p>

<!--more-->


<h3>Mac下最好的SVN客户端</h3>

<p>在Windows下，最好用的SVN客户端是TortoiseSVN，但是没有跨平台版本。在Mac OS X，也有好几个SVN客户端，比如：Versions，CornerStone，SmartSVN，其中，最好用的是SmartSVN。</p>

<p>SmartSVN有两个版本，专业版和基础版。专业版可以免费试用30天，如果不注册，自动切换为基础版。最重要的是，基础版已经涵盖了大部分的功能特性，实乃业界良心。</p>

<h3>SmartSVN 7.5.5的问题</h3>

<p>话说我一直以来在Mac系统都用着SmartSVN 7.5.5版，顺心顺手，直到昨晚，update的时候一直是<code>Local Refreshing</code>状态，数据也是有出没进，如下图：</p>

<p><img src="http://blog.lessfun.com/images/2014/10/lessfun_smart_svn_keep_local_refreshing.jpg" alt="smart svn slow local refresh" /></p>

<p><code>Out</code>的数据一直在增加，如果放任不管，甚至可以达到几百M。于是我意识到出问题了，但是用命令行的svn来操作却一切正常。怀疑是SmartSVN的<code>Log Cache</code>太大，于是删除了<code>Log Cache</code>文件，位置在<code>~/Library/Preferences/SmartSVN</code>下，问题依旧。</p>

<h3>解决Keep Local Refreshing的方法</h3>

<p>无奈，只好使出重装大法。下载、安装了SmartSVN 8.6版本后，直接弹出了下面的提示：</p>

<p><img src="http://blog.lessfun.com/images/2014/10/lessfun_smart_svn_update_tips.jpg" alt="smart svn slow local refresh" /></p>

<p>实在是后知后觉啊，既然你那么Smart，就不能在出问题的时候直接弹提示吗？非得等到人家摸索并安装了最新版后才弹这个。</p>

<p>好消息是，安装8.6版本后，问题解决。</p>

<h3>更新：</h3>

<p>SmartSVN更新不了，问题不在于客户端本身，而是svn server端禁用了SSLv3引起的，为了避免这个问题： <a href="https://poodle.io/">https://poodle.io/</a></p>

<p>至于为什么更新为SmartSVN 8.6之后，问题解决，是因为8.6版本内置的是svn1.8，在SSLv3无法连接的时候，可能自动切换为tlsv模式。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/10/17/smartsvn-keep-local-refreshing-issue/'>http://blog.lessfun.com/blog/2014/10/17/smartsvn-keep-local-refreshing-issue/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS通过宏定义快速调整View的Frame]]></title>
    <link href="http://blog.lessfun.com/blog/2014/10/15/ios-adjust-view-frame-quickly-with-macro/"/>
    <updated>2014-10-15T18:45:03+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/10/15/ios-adjust-view-frame-quickly-with-macro</id>
    <content type="html"><![CDATA[<p>在iOS开发中，经常需要在运行时动态修改View Frame，比如，theView的X坐标右移2个点，Y坐标下移2个点，常用的方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="n">CGRect</span> <span class="n">newFrame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">theView</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</span><span class='line'>    <span class="n">newFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">newFrame</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">theView</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">newFrame</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>逻辑很简单，就是代码繁琐了点，设想一下，假如有5个以上的子View需要调整位置与大小……</p>

<!--more-->


<h3>解决方法</h3>

<p>也很简单，就是封装为通用的宏，或者方法(有些人比较反感C语言样式的宏定义)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">CGRectAdjust</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">w1</span><span class="p">,</span> <span class="n">h1</span><span class="p">)</span>    <span class="n">CGRectMake</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">x1</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">y1</span><span class="p">,</span>  <span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span> <span class="n">w1</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="n">h1</span><span class="p">)</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">CGRectSetSize</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>    <span class="n">CGRectMake</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">origin</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">CGRectSetOrigin</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>    <span class="n">CGRectMake</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">ViewAdjustFrame</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">w1</span><span class="p">,</span> <span class="n">h1</span><span class="p">)</span>   <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectAdjust</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">w1</span><span class="p">,</span> <span class="n">h1</span><span class="p">)</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">ViewSetSize</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>   <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectSetSize</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
</span><span class='line'>    <span class="err">#</span><span class="n">define</span> <span class="n">ViewSetOrigin</span><span class="p">(</span><span class="n">view</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>   <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectSetOrigin</span><span class="p">(</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，就可以这样调整UIView的Frame了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="c1">//大小不变，位置往右下方移动2个点</span>
</span><span class='line'>    <span class="n">ViewAdjustFrame</span><span class="p">(</span><span class="n">theView</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/10/15/ios-adjust-view-frame-quickly-with-macro/'>http://blog.lessfun.com/blog/2014/10/15/ios-adjust-view-frame-quickly-with-macro/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App适配iOS8遇到的兼容问题：键盘方向与StatusBar方向不一致，阻止锁屏失效，OpenGL崩溃]]></title>
    <link href="http://blog.lessfun.com/blog/2014/09/24/ios8-issue-keyboard-orientation-and-idletimerdisabled-not-working/"/>
    <updated>2014-09-24T13:59:29+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/09/24/ios8-issue-keyboard-orientation-and-idletimerdisabled-not-working</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://blog.lessfun.com/images/2014/09/lessfun_ios8_adapt.png" title="ios8 adapt" alt="ios8 adapt">
苹果正式发布iOS8系统，到现在安装覆盖率已达48%，而iOS7的安装率是49%。所以，各位开发者又有得忙了，把所有的App都升级并适配到iOS8系统可不是一件轻松的事。</p>

<p>下面罗列一下我在适配iOS8过程中遇到的兼容问题——而同样的代码在iOS6/7是完全没问题的。</p>

<!--more-->


<h2>1. 键盘弹出方向与StatusBar方向不一致</h2>

<p>在App中，第一个ViewController是只支持竖屏方向(Portrait)的，切换到第二个页面，默认也是Portrait，但用户可以点击按钮切换为横屏(Landscape)。</p>

<p>所以，我把App-Info.plist只选中了<code>Portrait</code>一项，并且在<code>Root ViewController</code>重载了以下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="n">shouldAutorotate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">supportedInterfaceOrientations</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIInterfaceOrientationMaskPortrait</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="n">preferredInterfaceOrientationForPresentation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">UIInterfaceOrientationPortrait</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在需要切换到横屏的时候，调用以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">onFullScreenButtonTouchUpInside</span><span class="o">:</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">adjustViewFrameToFullScreen</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">setStatusBarOrientation</span><span class="o">:</span><span class="n">UIInterfaceOrientationLandscapeRight</span> <span class="n">animated</span><span class="o">:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于在iOS6、7中，键盘方向是跟随状态栏方向的，所以一切表现正常，横屏下，无论设备方向怎样，键盘都是横着弹出。</p>

<p>但是，在iOS8中，键盘却随着设备方向弹出了。换言之，<strong>即使Interface Orientation为Landscape，但Device Orientation为Portrait，键盘就会以Portrait的方向弹出</strong>。<br/>
如下图：</p>

<p><img class="center" src="http://blog.lessfun.com/images/2014/09/lessfun_ios8_adapt_keyboard.png" title="ios8 adapt keyboard" alt="ios8 adapt keyboard"></p>

<h3>1.1 解决方法</h3>

<p>我想要的是键盘不管设备方向，只关注状态栏方向，也就是StatusBarOrientation。由于iOS8新出不久，在网上没找到解决方案。后来我一同事发现手动更改设备方向可以解决这一问题：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">onFullScreenButtonTouchUpInside</span><span class="o">:</span><span class="p">(</span><span class="n">id</span><span class="p">)</span><span class="n">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">adjustViewFrameToFullScreen</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">setStatusBarOrientation</span><span class="o">:</span><span class="n">UIInterfaceOrientationLandscapeRight</span> <span class="n">animated</span><span class="o">:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//改设备方向</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">IsIOS8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">setValue</span><span class="o">:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="n">numberWithInteger</span><span class="o">:</span><span class="n">UIDeviceOrientationLandscapeLeft</span><span class="p">]</span> <span class="n">forKey</span><span class="o">:</span><span class="err">@</span><span class="s">&quot;orientation&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. 禁用屏幕自动锁定失效</h2>

<p>本来，防止屏幕锁定只需一句代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">setIdleTimerDisabled</span><span class="o">:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，在iOS8中，偶尔会失效。测试人员发现了这个问题是在弹出键盘点击发送后必现，而原因不明。因为键盘出现与隐藏，理论上不应该影响这个<code>idleTimerDisabled</code>的属性。暂且认为是iOS8的Bug吧。</p>

<h3>2.1 解决方法</h3>

<p>在键盘收起的时候，重设<code>IdleTimerDisabled</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">onKeyboardDidHide</span><span class="o">:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">notification</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">IsIOS8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">setIdleTimerDisabled</span><span class="o">:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. OpenGL ES渲染时崩溃</h2>

<p>在iOS中使用OpenGL ES渲染，切换到后台时需要停止渲染，否则会引起崩溃。见这里：<a href="https://developer.apple.com/library/ios/qa/qa1766/_index.html">How to fix OpenGL ES application crashes when moving to the background</a></p>

<p>但是在iOS8中，即使不是切换到后台，而是通过<code>NavigationController</code>切换到另一个ViewController再切回来，也会引起崩溃，崩溃点在：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="p">[</span><span class="n">EAGLContext</span> <span class="n">presentRenderbuffer</span><span class="o">:</span><span class="n">GL_RENDERBUFFER</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>猜测可能是，在iOS 8中，如果OpenGL的视图如果切换到不可见的ViewController，也需要停止绘制，否则也会引起在后台渲染OpenGL类似的崩溃。</p>

<h3>3.1 解决方法</h3>

<p>在ViewWillDisapper的时候停止渲染。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewWillDisappear</span><span class="o">:</span><span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="n">animated</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">super</span> <span class="n">viewWillDisappear</span><span class="o">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">_videoView</span> <span class="o">&amp;&amp;</span> <span class="n">IsIOS8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">_videoView</span> <span class="n">pauseVideo</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewWillAppear</span><span class="o">:</span><span class="p">(</span><span class="n">BOOL</span><span class="p">)</span><span class="n">animated</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="n">super</span> <span class="n">viewWillAppear</span><span class="o">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">_videoView</span> <span class="o">&amp;&amp;</span> <span class="n">IsIOS8</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">_videoView</span> <span class="n">resumeVideo</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>iOS的兼容真是个蛋疼的问题。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/09/24/ios8-issue-keyboard-orientation-and-idletimerdisabled-not-working/'>http://blog.lessfun.com/blog/2014/09/24/ios8-issue-keyboard-orientation-and-idletimerdisabled-not-working/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XCode无法正确import预编译文件.pch里的头文件]]></title>
    <link href="http://blog.lessfun.com/blog/2014/09/18/xcode-not-load-all-headers-in-prefix-pch/"/>
    <updated>2014-09-18T11:13:56+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/09/18/xcode-not-load-all-headers-in-prefix-pch</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.lessfun.com/images/2014/09/lessfun_xcode_reload_pch_1.png" title="lessfun_xcode_reload_pch_1" alt="lessfun_xcode_reload_pch_1"></p>

<!--more-->


<p>如图。我在<code>xx-Prefix.pch</code>预编译文件中添加了<code>#import "YYMacro.h"</code>，其中定义了一些公共常用的宏和常量。这样就不需要在每个源文件中再import一次，节省代码并且可以提高便以速度。</p>

<p>大部分情况下，一切工作正常。但是，偶尔，XCode会出现一些Bug，导致无法完全加载pch里的头文件，而代码里用到的在Macro.h中定义的常量，全部被标识为未定义：</p>

<p><img class="center" src="http://blog.lessfun.com/images/2014/09/lessfun_xcode_reload_pch_2.png" title="lessfun_xcode_reload_pch_2" alt="lessfun_xcode_reload_pch_2"></p>

<p>虽然不影响编译运行，但是却让代码可读性变得很差，无法正常自动补全。试过了以下方法：</p>

<ul>
<li>重启XCode</li>
<li>Product &ndash; Clean</li>
<li>Build &ndash; Run</li>
</ul>


<p>无果。<br/>
摸索并搜索之后，找到了<a href="http://stackoverflow.com/questions/11840622/xcode-4-4-does-not-get-all-the-pch-file-headers-imports">解决方法</a>。</p>

<h3>解决方法</h3>

<h4>1. 打开DerivedData目录</h4>

<p>打开<code>Window</code>&ndash;<code>Organizer</code>，点击<code>右箭头</code>：</p>

<p><img class="center" src="http://blog.lessfun.com/images/2014/09/lessfun_xcode_reload_pch_3.png" title="lessfun_xcode_reload_pch_3" alt="lessfun_xcode_reload_pch_3"></p>

<h4>2. 定位到Index &ndash; PrecompiledHeaders</h4>

<p><img class="center" src="http://blog.lessfun.com/images/2014/09/lessfun_xcode_reload_pch_4.png" title="lessfun_xcode_reload_pch_4" alt="lessfun_xcode_reload_pch_4"></p>

<h4>3. 删掉相关的预编译头文件目录</h4>

<p>由于XCode打开的可能是Workspace，包含了多个工程，而大部分工程的pch工作正常，所以我们不需要删除整个<code>PrecompiledHeaders</code>，只需要删除无法正常工作的工程的相关目录，就是以工程名为前缀的那几个。</p>

<h4>4. 重新编译</h4>

<p>现在，一切又正常了。</p>

<p><img class="center" src="http://blog.lessfun.com/images/2014/09/lessfun_xcode_reload_pch_5.png" title="lessfun_xcode_reload_pch_5" alt="lessfun_xcode_reload_pch_5"></p>

<h3>结论</h3>

<p>与XCode相关的Bug，比如变量无法正确被加载，头文件没有被import，修改了xib文件但是在模拟器中不起作用，等等，都可以通过删除<code>DerivedData</code>的中间文件解决。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/09/18/xcode-not-load-all-headers-in-prefix-pch/'>http://blog.lessfun.com/blog/2014/09/18/xcode-not-load-all-headers-in-prefix-pch/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Octopress博客侧边栏的多说评论显示文章标题]]></title>
    <link href="http://blog.lessfun.com/blog/2014/09/14/show-article-title-in-duoshuo-comment/"/>
    <updated>2014-09-14T16:02:58+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/09/14/show-article-title-in-duoshuo-comment</id>
    <content type="html"><![CDATA[<p>基于Octopress的博客搭建，在<a href="http://blog.lessfun.com/blog/2013/11/27/create-blog-in-github-page-using-octopress-and-binding-domain/">用Octopress在Github搭建博客，并绑定独立域名</a>里已经介绍过了，并且介绍了在侧边栏集成多说评论的方法。</p>

<p>但是，有一处陷阱，一直坑了我好久，那就是，多说的最近评论里，被评论的文章标题与链接大多数时候是空的，但是偶尔又能正常显示，如图：<br/>
<img src="http://blog.lessfun.com/images/2014/09/recent_comment_title.png" alt="多说最近评论" /></p>

<!--more-->


<p>一直以来，我都以为这是多说的Bug，默默期待着它有朝一日会自动修复。安静地等待了大半年之后……这个Bug依然深深地存在我的博客里。虽然用户评论不多，但是偶尔难得有一条新评论，但是我却不知道评论的是哪一篇文章，得从头到尾慢慢遍历所有文章才能找出来，这种感觉实在是太不好受了！！！</p>

<p>我忍不住了，那么明显的Bug，多说不可能会那么久都不修复，一定是我的配置出了问题！于是，我检查了三遍<code>_config.yml</code>的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>duoshuo_asides_title: 1 <span class="c">#显示评论的文章标题</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置是没问题的啊！！！<br/>
估计靠个人力量是解决不了这个问题的了，于是我用上了万能的谷歌，在<a href="http://yrzhll.com/blog/2012/12/12/comment/">蝶姐的博客</a>中找到了原因与解决方法。</p>

<h3>问题原因</h3>

<p>多说默认没有传递文章标题，需要用户手动传递。</p>

<h3>解决方法</h3>

<p>修改<code>source/_includes/post/duoshuo.html</code>：</p>

<p>将：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ds-thread&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>改为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;ds-thread&quot;</span> <span class="na">data-title=</span><span class="s">&quot;{ { page.title } }&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>rake genrate</code>重新生成一下，Done。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/09/14/show-article-title-in-duoshuo-comment/'>http://blog.lessfun.com/blog/2014/09/14/show-article-title-in-duoshuo-comment/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Invalid Binary, the Binary Is Missing Architectures[arm64] - iTunes Connect的Bug]]></title>
    <link href="http://blog.lessfun.com/blog/2014/09/11/invalid-binary-the-binary-is-missing-architectures-arm64/"/>
    <updated>2014-09-11T14:51:58+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/09/11/invalid-binary-the-binary-is-missing-architectures-arm64</id>
    <content type="html"><![CDATA[<p>从昨天开始，网上iOS开发者哀鸿一片，因为提交App到AppStore的时候，都遇到了这样一个错误：</p>

<blockquote><p>「Today I cannot submit the binary to App Store, with the error &ldquo;Invalid binary, the binary is missing architectures[arm64]&rdquo;.」</p></blockquote>

<p>国内开发者也遇到了同样的问题：<br/>
<a href="http://bbs.lbsyun.baidu.com/redirect.php?tid=12550&amp;goto=lastpost">现在提交的新应用貌似必须支持arm64了</a></p>

<p><a href="http://www.cocoachina.com/ask/questions/show/119687">上传项目到APPstore，遇到的问题</a></p>

<p>公司内部这两天可能刚好不需要提交App，但是这是迟早的事，而项目中大部分引用的库都不支持arm64，未免开始紧张地修改工程编译选项，推动依赖库支持64位架构，沟通、协调、改错，乱成一团蚂蚁。</p>

<p>结果……苹果告诉我们，不好意思，让你们受惊了，这是我们的一个Bug！</p>

<!--more-->


<p>坑爹呢这是！<br/>
<img src="http://blog.lessfun.com/images/2014/09/keng_die_ne.jpg" alt="ios_tabbar_running" /></p>

<p>苹果开发者论坛里的员工TimT如是说：</p>

<blockquote><p>「Yes, there was a fix recently applied to the server. Everyone should be able to submit 32-bit apps again.」</p></blockquote>

<p><img src="http://blog.lessfun.com/images/2014/09/invalid_arm64.png" alt="ios_tabbar_running" /> <br/>
<a href="https://devforums.apple.com/message/1039265#1039265">32. Re: Invalid binary, the binary is missing architectures[arm64]</a></p>

<p>居然Sorry也没一句！任你乱如蚂蚁，我自泰然自若。</p>

<p>好了，没啥事了，还不能洗洗睡，继续提交32位App去吧~</p>

<p>PS: 查看.a库或.framework文件支持那些架构的方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>; .a
</span><span class='line'><span class="nv">$cd</span> libs
</span><span class='line'><span class="nv">$lipo</span> -info *.a
</span><span class='line'>Architectures in the fat file: libssl.a are: i386 armv7 armv7s
</span><span class='line'>
</span><span class='line'>; .framework
</span><span class='line'><span class="nv">$cd</span> xxFramework.framework
</span><span class='line'><span class="nv">$lipo</span> -info xxFramework
</span><span class='line'>Architectures in the fat file: xxFramework are: armv7 armv7s i386
</span></code></pre></td></tr></table></div></figure>




<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/09/11/invalid-binary-the-binary-is-missing-architectures-arm64/'>http://blog.lessfun.com/blog/2014/09/11/invalid-binary-the-binary-is-missing-architectures-arm64/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从储蓄罐到实现财务自由]]></title>
    <link href="http://blog.lessfun.com/blog/2014/08/28/to-achieve-financial-freedom/"/>
    <updated>2014-08-28T18:24:14+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/08/28/to-achieve-financial-freedom</id>
    <content type="html"><![CDATA[<p>博多·舍费尔的《小狗钱钱》和《财务自由之路》这两本理财入门书在各大社区、论坛都可以看到很多人推荐，口碑良好，最近抽时间看完，虽然有干货，能给人很大的启发，但是废话太多，读者很浪费时间。</p>

<p>其实两本书的内容，可以稍作总结如下：</p>

<!--more-->


<h3>财务自由之路</h3>

<p>这本书讲的是道理，而不是具体方法。作者也说了，遵循本书的思想，可以在七年内赚到一百万，美元。但是，如果只是纸上谈兵，则你仍然是一无所有。</p>

<h4>1. 得正视金钱，树立正确的金钱观。</h4>

<p>不要认为金钱是万恶之源，有钱可耻，贫穷光荣。我们想生活得更好，想让身边的人生活得更好，想让社会进步到更美好，这些都需要钱，需要我们去创造财富。</p>

<h4>2. 要有目标、有理想，并付诸行动，逐步实现计划。</h4>

<p>比如，七年赚一百万，这就是一个目标，但是不能设了目标就置身度外，月月月光。百万富翁不是一天变成的，每个月都花光，不可能几年后就积累了一百万。也不要认为先花钱才能赚到钱，不会理财，你月入几万，也会月花几万，到头来还是月光，所以需要制定详细的储蓄计划。</p>

<h4>3. 在储蓄的基础上进行投资</h4>

<p>第2点所说的储蓄，不要仅仅是存在银行，那样子跑不过通货膨胀，财富会贬值。更好的投资方法是购买股票，如果没有精力或不够专业，还可以选择股票型资金，这两项是收益率较高的，达到12%不是问题。</p>

<h4>4. 「王者之路」选股原则</h4>

<p>炒股时，股票数量有限制，至少购买5只不同行业的股票，可以分散风险；但是不要超过10只，避免精力不足。没有必要精读每家公司的财务报表，但是需要了解公司的收支情况，以及在社会上的名声。如果不知道应该选择什么股票，可以参照「王者之路」的原则，也就是，在不同的行业里选择最领先的公司。</p>

<h4>5. 买卖股票的原则</h4>

<p>买入时，需要保留50%的现金，避免价格下跌后没有余力补仓。只有在买入之后，价格下跌了30%，并且时间过去半年以后，才进行补仓，补仓时也不要满仓。</p>

<h3>小狗钱钱</h3>

<p>这本书以故事的形式，通过小狗和小女孩的口吻，向大家传递从小学会理财的重要性，除了描述新式不同之外，本书的思想可以在《财务自由之路》找到。</p>

<h4>1. 要自信，有计划，付诸行动。</h4>

<p>自信可以通过每天记录「成功日记」获得，每天睡前简单描述当天的收获。<br/>
计划可以通过存钱罐进行区分，每个存钱罐上表明实现该计划所需要的本钱，存够之后才去实施。<br/>
行动就不用多说了，总得想办法填充钱罐。</p>

<h4>2. 开始储蓄，获得利息。</h4>

<p>更好的方法是，用银行存款代替存钱罐，毕竟在银行有利息收入，而放在罐子里，只会慢慢贬值。<br/>
很多人都有错误的观念，认为想赚钱，必须得学会花钱，不会花钱的人，永远也赚不了大钱。这种观念在知乎上尤为常见，但是，这不适合于普通大众。对于一些土豪、富二代、官二代来说，会花钱，通人脉，自然财源滚滚；但是对于普通白领，你就算每个月把所有工资都拿出去请人吃喝玩乐，交的也是酒肉朋友，并不是说你请土豪吃一顿小肥羊，人家就会给你带来价值几千万的投资项目。<br/>
求人不如求己，我们都知道用钱赚钱才是人生赢家，但是怎样才能用钱赚钱？自然得是有钱。怎样才能有钱？自然得靠自己存钱。</p>

<h4>3. 要有盈余，不要月光。</h4>

<p>每个月月光，只会让你觉得生活越来越绝望。<br/>
对于年轻人，目前是钱少，时间多；以后则是钱多，时间少。而贷款刚好可以让这两者互补，将以后的钱预支到现在，先享受，再还款。<br/>
但是贷款有利息，所以很多人贷款之后又恨不得立刻就把钱还清。这样一来，贷款的意义又在哪里呢？还不如选择还款周期长的，减轻自己的压力。</p>

<h4>4. 用本钱去投资。</h4>

<p>制定明确的存钱计划并严格执行，过一段时间之后，就有了可以用于投资的本钱。银行定存的利息是很低的，跑不赢通货膨胀，所以得投资收益率更高的项目，比如基金，每天能稳定地获得固定收益。</p>

<h4>5. 股票利润最大，也可以投资股票资金。</h4>

<p>在所有投资类型中，股票的收益是最大的。但是难度、风险也最大，如果不想让自己亲自炒股，可以委托专业人士——股票基金经理进行操作，也就是买入股票基金。</p>

<h3>实际操作</h3>

<p>以上就是两本书的中心思想，但很多人都是听过很多赚钱的道理，依然过不好这一生。<br/>
普通人没法一夜暴富，至少能尝试坚持做到以下几点：</p>

<ol>
<li>开源节流。增加赚钱的渠道，减少不必要的支出。比如，找份兼职，业余投资之类，同时不要花太多不必要的钱在吃喝玩乐上。</li>
<li>制定计划。比如，每个月定存10%的工资，坚持30年，用作自己的退休基金；减去必要开支之后，30%的工资用作下蛋的金鹅；30%的工资用于实现短期的机会。</li>
<li>持之以恒。雷打不动地慢慢实现自己的每月计划，三十年后，你且看你。</li>
</ol>


<h4>附两本书的下载链接：</h4>

<p><a href="http://dl.vmall.com/c00vwwc6iw">财务自由之路</a><br/>
<a href="http://xuduoshu.com/view/53d862298650ca24f38720b6">小狗钱钱</a></p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/08/28/to-achieve-financial-freedom/'>http://blog.lessfun.com/blog/2014/08/28/to-achieve-financial-freedom/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Godaddy上使用PHPMailer通过SMTP发送邮件的方法]]></title>
    <link href="http://blog.lessfun.com/blog/2014/07/16/setting-phpmailer-to-send-email-in-godaddy/"/>
    <updated>2014-07-16T13:51:29+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/07/16/setting-phpmailer-to-send-email-in-godaddy</id>
    <content type="html"><![CDATA[<p>对于个人站点的“留言”、“评论”功能，除了把用户的发言保存到MySQL数据库中以外，管理员往往还希望在用户留言的同时发送一封邮件到指定邮箱，方便查看。</p>

<p>这个功能用PHP+MySQL实现很简单，PHP语言有一个mail()方法，只需配置好SMTP服务器、发件人的邮箱密码、收件人的邮箱，就可以自动发送邮件。</p>

<p>但是，mail()方法过于简洁，需要用户作很多其他配置，比如在php.ini里设置stmp服务器地址、端口等信息，同时使用也不太方便，比如没法便捷地使用抄送、添加附件等功能。</p>

<p>于是有了<a href="http://phpmailer.worxware.com">PHPMailer</a>，简化了发送邮件的配置。</p>

<!--more-->


<p>使用PHPMailer发送邮件的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>  <span class="k">require</span> <span class="s1">&#39;PHPMailerAutoload.php&#39;</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$mail</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PHPMailer</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">isSMTP</span><span class="p">();</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Host</span> <span class="o">=</span> <span class="s1">&#39;smtp1.example.com;smtp2.example.com&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">SMTPAuth</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Username</span> <span class="o">=</span> <span class="s1">&#39;user@example.com&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Password</span> <span class="o">=</span> <span class="s1">&#39;secret&#39;</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">From</span> <span class="o">=</span> <span class="s1">&#39;from@example.com&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">FromName</span> <span class="o">=</span> <span class="s1">&#39;Mailer&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">addAddress</span><span class="p">(</span><span class="s1">&#39;joe@example.net&#39;</span><span class="p">,</span> <span class="s1">&#39;Joe User&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">WordWrap</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">isHTML</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Subject</span> <span class="o">=</span> <span class="s1">&#39;Here is the subject&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Body</span>    <span class="o">=</span> <span class="s1">&#39;This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">send</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s1">&#39;Message could not be sent.&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s1">&#39;Mailer Error: &#39;</span> <span class="o">.</span> <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">ErrorInfo</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">echo</span> <span class="s1">&#39;Message has been sent&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码在本地服务器测试一切正常，但是上传到Godaddy空间后，发送邮件时会提示失败，因为Godaddy限制了用户利用第三方的SMTP服务器发送邮件。</p>

<p>解决方法有两个：</p>

<ol>
<li>使用Godaddy提供的免费邮箱转发</li>
<li>使用Godaddy提供的公共SMTP转发</li>
</ol>


<h3>方法1，使用Godaddy提供的邮箱账号</h3>

<p>购买了Godaddy的空间之后，会给用户提供企业Email，后缀名是自己的域名，免费账号可以有100个。我们需要在上面创建一个Email账号。比如：user@test.com, helloworld。见<a href="http://support.godaddy.com/help/article/3552/managing-your-email-account-smtp-relays">这里</a>。</p>

<p>完成后，查看相应账号的<code>Tools - Server Settings</code>，会列出该邮箱使用的smtp host和端口，host一般都是<code>smtpout.secureserver.net</code>，端口则有：<code>25, 80, 3535</code>。可以参考<a href="">Godaddy的帮助</a>。</p>

<p>有了上述信息之后，调整PHPMailer配置如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Host</span> <span class="o">=</span> <span class="s1">&#39;smtpout.secureserver.net&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Port</span> <span class="o">=</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">SMTPAuth</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Username</span> <span class="o">=</span> <span class="s1">&#39;user@test&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Password</span> <span class="o">=</span> <span class="s1">&#39;helloworld&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时候再发送，就不会提示<code>SMTP -&gt; ERROR: Failed to connect to server: Connection refused (111)</code>之类的错误了。</p>

<h3>方法2，使用Godaddy提供的公共SMTP服务器</h3>

<p><a href="http://www.freehao123.com/godaddy-smtp/">这里</a>提到了另一种免邮箱账号密码发送邮件的方法，就是利用Godaddy提供的公共SMTP服务器。</p>

<p>代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Host</span> <span class="o">=</span> <span class="s1">&#39;relay-hosting.secureserver.net&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Port</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">SMTPAuth</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Username</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>   <span class="c1">//blank</span>
</span><span class='line'>  <span class="nv">$mail</span><span class="o">-&gt;</span><span class="na">Password</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>   <span class="c1">//blank</span>
</span></code></pre></td></tr></table></div></figure>


<p>(完)</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/07/16/setting-phpmailer-to-send-email-in-godaddy/'>http://blog.lessfun.com/blog/2014/07/16/setting-phpmailer-to-send-email-in-godaddy/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac系统上简便地启用Http Server]]></title>
    <link href="http://blog.lessfun.com/blog/2014/06/30/setup-a-simple-http-server-on-mac/"/>
    <updated>2014-06-30T15:27:28+08:00</updated>
    <id>http://blog.lessfun.com/blog/2014/06/30/setup-a-simple-http-server-on-mac</id>
    <content type="html"><![CDATA[<p>在本地调试Html等简单网页的时候，经常需要启动一个Web服务器，但又不想或不方便安装Apache或者IIS之类的软件，那么可以使用简单的方法：在Python或Php命令行下启用Http Server。</p>

<p>由于在Mac系统下，Python和Php都是默认安装好的，所以不需要额外的软件支持。具体方法如下：</p>

<!--more-->


<h4>方法一：不支持Php</h4>

<p>这一方法的前提是，Mac系统默认安装了Python，所以可以利用Python启用Http服务器。
步骤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cd</span> /path/project/site
</span><span class='line'><span class="nv">$python</span> -m SimpleHTTPServer 8080
</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>然后，在浏览器打开<a href="http://localhost:8080/index.html%E5%8D%B3%E5%8F%AF%E3%80%82">http://localhost:8080/index.html%E5%8D%B3%E5%8F%AF%E3%80%82</a></p>

<h4>方法二：支持Php</h4>

<p>注意，以上方法，仅适用于提供html等文件服务，不支持运行php脚本。</p>

<p>如果需要运行php，参考 StackOverFlow 和 官网。请先确保php版本是5.4之后。
步骤：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$cd</span> /path/project/site
</span><span class='line'><span class="nv">$php</span> -S localhost:8080
</span></code></pre></td></tr></table></div></figure>


<h4>停止Server</h4>

<p>在终端按<code>Ctrl-C</code>即可停止。</p>

<h4>其他系统</h4>

<p>由于Python和PHP都是跨平台的，在其他系统上，只需要安装好这两个运行环境，就可以使用同样的方法。</p>

<blockquote class='post_original_block'>
            原文作者：
            <a href='http://blog.lessfun.com'>lslin</a><br/>
            原文链接：
            <a href='http://blog.lessfun.com/blog/2014/06/30/setup-a-simple-http-server-on-mac/'>http://blog.lessfun.com/blog/2014/06/30/setup-a-simple-http-server-on-mac/</a><br/>
            版权声明：自由转载-非商用-非衍生-保持署名 | 
            <a href='http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh'>Creative Commons BY-NC-ND 3.0</a>
            </blockquote>

]]></content>
  </entry>
  
</feed>
